// ╔═════╦═════╦═════╗
// ║ 🛡️  ║ ⚖️  ║ ⚡  ║
// ║  C  ║  E  ║  G  ║
// ╚═════╩═════╩═════╝
// ╔═════════════════╗
// ║ wcet [T∞] bound ║
// ╚═════════════════╝
//
// Author: Ignacio Peña Sepúlveda
// Date: June 25, 2025

// Redis Killer - A high-performance Redis-compatible in-memory database
// Written in Tempo with zero-allocation design for deterministic performance
// 
// This version uses Tempo's built-in prelude - no imports needed!
// All standard library functionality is available globally.

// Configuration constants
const MAX_CLIENTS = 10000
const MAX_KEY_SIZE = 512
const MAX_VALUE_SIZE = 512 * 1024 * 1024  // 512MB max value
const HASH_TABLE_INITIAL_SIZE = 1024
const WRITE_BUFFER_SIZE = 16 * 1024
const READ_BUFFER_SIZE = 16 * 1024

// Redis protocol constants
const CRLF = "\r\n"
const BULK_STRING_PREFIX = '$'
const ARRAY_PREFIX = '*'
const SIMPLE_STRING_PREFIX = '+'
const ERROR_PREFIX = '-'
const INTEGER_PREFIX = ':'

// Global server state
struct Server {
    db: Database
    clients: [MAX_CLIENTS]Client
    client_count: u32
    listener: TCPListener
    running: bool
    mu: RWMutex
}

// Client connection state
struct Client {
    conn: TCPConn
    read_buf: [READ_BUFFER_SIZE]u8
    write_buf: [WRITE_BUFFER_SIZE]u8
    read_pos: u32
    write_pos: u32
    active: bool
}

// Main entry point
func main() {
    let server = Server{
        db: Database::new(),
        running: true,
    }
    
    // Start server on default Redis port
    server.listen("0.0.0.0:6379")
}

impl Server {
    func listen(addr: string) {
        self.listener = listen_tcp(addr).unwrap()
        println("Redis Killer listening on", addr)
        
        while self.running {
            let conn = self.listener.accept().unwrap()
            self.handle_client(conn)
        }
    }
    
    func handle_client(conn: TCPConn) {
        // Find free client slot
        self.mu.lock()
        let client_id = self.find_free_client_slot()
        if client_id < 0 {
            conn.close()
            self.mu.unlock()
            return
        }
        
        self.clients[client_id] = Client{
            conn: conn,
            active: true,
        }
        self.client_count++
        self.mu.unlock()
        
        // Handle client in separate goroutine
        go self.client_loop(client_id)
    }
    
    func find_free_client_slot() -> i32 {
        for i in 0..MAX_CLIENTS {
            if !self.clients[i].active {
                return i as i32
            }
        }
        return -1
    }
    
    func client_loop(client_id: u32) {
        let client = &mut self.clients[client_id]
        
        loop {
            // Read command from client
            let n = client.conn.read(&mut client.read_buf[client.read_pos..]).unwrap_or(0)
            if n == 0 {
                break  // Client disconnected
            }
            
            client.read_pos += n as u32
            
            // Parse and execute commands
            while let Some(cmd) = self.parse_command(client) {
                self.execute_command(client, cmd)
            }
        }
        
        // Cleanup
        self.mu.lock()
        client.active = false
        client.conn.close()
        self.client_count--
        self.mu.unlock()
    }
    
    func parse_command(client: &mut Client) -> Option<Command> {
        // Simple Redis protocol parser
        if client.read_pos == 0 {
            return None
        }
        
        let buf = &client.read_buf[..client.read_pos]
        
        // Check for array prefix
        if buf[0] != ARRAY_PREFIX as u8 {
            return None
        }
        
        // Parse array length
        let (array_len, pos) = parse_integer(&buf[1..])?
        if array_len <= 0 {
            return None
        }
        
        let mut args: Vec<string> = Vec::new()
        let mut current_pos = pos + 1
        
        // Parse each bulk string argument
        for _ in 0..array_len {
            if current_pos >= client.read_pos {
                return None
            }
            
            if buf[current_pos] != BULK_STRING_PREFIX as u8 {
                return None
            }
            
            let (str_len, next_pos) = parse_integer(&buf[current_pos+1..])?
            current_pos += next_pos + 1
            
            if current_pos + str_len as u32 + 2 > client.read_pos {
                return None  // Not enough data
            }
            
            let arg = string_from_bytes(&buf[current_pos..current_pos + str_len as u32])
            args.push(arg)
            current_pos += str_len as u32 + 2  // Skip CRLF
        }
        
        // Consume parsed data
        if current_pos < client.read_pos {
            client.read_buf.copy_within(current_pos..client.read_pos, 0)
        }
        client.read_pos -= current_pos
        
        // Parse command type
        if args.is_empty() {
            return None
        }
        
        let cmd_name = string_to_uppercase(args[0])
        match cmd_name.as_str() {
            "GET" => {
                if args.len() != 2 {
                    return Some(Command::Error("wrong number of arguments for 'get' command"))
                }
                Some(Command::Get(args[1].clone()))
            }
            "SET" => {
                if args.len() < 3 {
                    return Some(Command::Error("wrong number of arguments for 'set' command"))
                }
                let ttl = if args.len() >= 5 && string_to_uppercase(args[3]) == "EX" {
                    parse_u64(args[4]).ok()
                } else {
                    None
                }
                Some(Command::Set(args[1].clone(), args[2].clone(), ttl))
            }
            "DEL" => {
                if args.len() < 2 {
                    return Some(Command::Error("wrong number of arguments for 'del' command"))
                }
                Some(Command::Del(args[1..].to_vec()))
            }
            "EXPIRE" => {
                if args.len() != 3 {
                    return Some(Command::Error("wrong number of arguments for 'expire' command"))
                }
                let ttl = parse_u64(args[2]).unwrap_or(0)
                Some(Command::Expire(args[1].clone(), ttl))
            }
            "TTL" => {
                if args.len() != 2 {
                    return Some(Command::Error("wrong number of arguments for 'ttl' command"))
                }
                Some(Command::TTL(args[1].clone()))
            }
            "PING" => Some(Command::Ping),
            "INFO" => Some(Command::Info),
            "FLUSHDB" => Some(Command::FlushDB),
            _ => Some(Command::Error("unknown command"))
        }
    }
    
    func execute_command(client: &mut Client, cmd: Command) {
        let response = match cmd {
            Command::Get(key) => {
                self.mu.read_lock()
                let value = self.db.get(&key)
                self.mu.read_unlock()
                
                match value {
                    Some(v) => format_bulk_string(&v),
                    None => "$-1\r\n".to_string()
                }
            }
            Command::Set(key, value, ttl) => {
                self.mu.lock()
                self.db.set(key, value, ttl)
                self.mu.unlock()
                "+OK\r\n".to_string()
            }
            Command::Del(keys) => {
                self.mu.lock()
                let mut deleted = 0
                for key in keys {
                    if self.db.del(&key) {
                        deleted += 1
                    }
                }
                self.mu.unlock()
                format!(":{}\r\n", deleted)
            }
            Command::Expire(key, ttl) => {
                self.mu.lock()
                let result = self.db.expire(&key, ttl)
                self.mu.unlock()
                format!(":{}\r\n", if result { 1 } else { 0 })
            }
            Command::TTL(key) => {
                self.mu.read_lock()
                let ttl = self.db.ttl(&key)
                self.mu.read_unlock()
                format!(":{}\r\n", ttl)
            }
            Command::Ping => "+PONG\r\n".to_string(),
            Command::Info => {
                let info = format!(
                    "# Server\r\nredis_version:7.0.0-killer\r\nuptime_in_seconds:{}\r\n# Clients\r\nconnected_clients:{}\r\n# Memory\r\nused_memory:{}\r\n",
                    0, // TODO: track uptime
                    self.client_count,
                    self.db.memory_usage()
                )
                format_bulk_string(&info)
            }
            Command::FlushDB => {
                self.mu.lock()
                self.db.flush()
                self.mu.unlock()
                "+OK\r\n".to_string()
            }
            Command::Error(msg) => {
                format!("-ERR {}\r\n", msg)
            }
        }
        
        // Write response
        let response_bytes = string_to_bytes(response)
        client.write_buf[..response_bytes.len()].copy_from_slice(response_bytes)
        client.conn.write_all(&client.write_buf[..response_bytes.len()]).unwrap()
    }
}

// Command types
enum Command {
    Get(string),
    Set(string, string, Option<u64>),  // key, value, optional TTL in seconds
    Del(Vec<string>),
    Expire(string, u64),
    TTL(string),
    Ping,
    Info,
    FlushDB,
    Error(&'static str),
}

// Database implementation
struct Database {
    // Pre-allocated pools
    entries: [HASH_TABLE_INITIAL_SIZE]Entry
    string_pool: [1024 * 1024]u8  // 1MB string pool
    value_pool: [MAX_VALUE_SIZE * 1024]u8
    
    // Metadata
    entry_count: u32
    string_pool_pos: u32
    value_pool_pos: u32
    
    // Hash table buckets
    buckets: [HASH_TABLE_INITIAL_SIZE]u32
    bucket_count: u32
    
    // Statistics
    hits: u64
    misses: u64
    memory_used: u64
}

struct Entry {
    key_hash: u64
    key_offset: u32
    key_len: u16
    value_offset: u32
    value_len: u32
    expire_time: i64
    next: u32
    flags: u8
}

impl Database {
    func new() -> Database {
        Database{
            bucket_count: HASH_TABLE_INITIAL_SIZE as u32,
            // Other fields are zero-initialized
        }
    }
    
    func get(&self, key: &str) -> Option<string> {
        let hash = hash_fnv1a_string(key)
        let bucket = (hash % self.bucket_count as u64) as u32
        
        let mut entry_idx = self.buckets[bucket]
        while entry_idx != 0 {
            let entry = &self.entries[entry_idx - 1]
            
            // Check expiration
            if entry.expire_time > 0 && entry.expire_time < now().sec {
                // Entry expired
                entry_idx = entry.next
                continue
            }
            
            // Check key match
            if entry.key_hash == hash {
                let stored_key = string_from_bytes(&self.string_pool[entry.key_offset as usize..(entry.key_offset + entry.key_len as u32) as usize])
                if stored_key == key {
                    self.hits++
                    let value = string_from_bytes(&self.value_pool[entry.value_offset as usize..(entry.value_offset + entry.value_len) as usize])
                    return Some(value)
                }
            }
            
            entry_idx = entry.next
        }
        
        self.misses++
        None
    }
    
    func set(&mut self, key: string, value: string, ttl: Option<u64>) {
        let hash = hash_fnv1a_string(&key)
        let bucket = (hash % self.bucket_count as u64) as u32
        
        // Calculate expiration time
        let expire_time = match ttl {
            Some(seconds) => now().sec + seconds as i64,
            None => 0
        }
        
        // Store key in string pool
        let key_bytes = string_to_bytes(&key)
        let key_offset = self.string_pool_pos
        self.string_pool[key_offset as usize..(key_offset + key_bytes.len() as u32) as usize].copy_from_slice(key_bytes)
        self.string_pool_pos += key_bytes.len() as u32
        
        // Store value in value pool
        let value_bytes = string_to_bytes(&value)
        let value_offset = self.value_pool_pos
        self.value_pool[value_offset as usize..(value_offset + value_bytes.len() as u32) as usize].copy_from_slice(value_bytes)
        self.value_pool_pos += value_bytes.len() as u32
        
        // Create entry
        let entry = Entry{
            key_hash: hash,
            key_offset: key_offset,
            key_len: key_bytes.len() as u16,
            value_offset: value_offset,
            value_len: value_bytes.len() as u32,
            expire_time: expire_time,
            next: self.buckets[bucket],
            flags: 0,
        }
        
        // Add to hash table
        self.entries[self.entry_count] = entry
        self.entry_count++
        self.buckets[bucket] = self.entry_count
        
        self.memory_used += (key_bytes.len() + value_bytes.len()) as u64
    }
    
    func del(&mut self, key: &str) -> bool {
        let hash = hash_fnv1a_string(key)
        let bucket = (hash % self.bucket_count as u64) as u32
        
        let mut prev_idx = 0u32
        let mut entry_idx = self.buckets[bucket]
        
        while entry_idx != 0 {
            let entry = &self.entries[entry_idx - 1]
            
            if entry.key_hash == hash {
                let stored_key = string_from_bytes(&self.string_pool[entry.key_offset as usize..(entry.key_offset + entry.key_len as u32) as usize])
                if stored_key == key {
                    // Found the entry, remove it
                    if prev_idx == 0 {
                        self.buckets[bucket] = entry.next
                    } else {
                        self.entries[prev_idx - 1].next = entry.next
                    }
                    
                    self.memory_used -= (entry.key_len as u64 + entry.value_len as u64)
                    return true
                }
            }
            
            prev_idx = entry_idx
            entry_idx = entry.next
        }
        
        false
    }
    
    func expire(&mut self, key: &str, ttl: u64) -> bool {
        let hash = hash_fnv1a_string(key)
        let bucket = (hash % self.bucket_count as u64) as u32
        
        let mut entry_idx = self.buckets[bucket]
        while entry_idx != 0 {
            let entry = &mut self.entries[entry_idx - 1]
            
            if entry.key_hash == hash {
                let stored_key = string_from_bytes(&self.string_pool[entry.key_offset as usize..(entry.key_offset + entry.key_len as u32) as usize])
                if stored_key == key {
                    entry.expire_time = now().sec + ttl as i64
                    return true
                }
            }
            
            entry_idx = entry.next
        }
        
        false
    }
    
    func ttl(&self, key: &str) -> i64 {
        let hash = hash_fnv1a_string(key)
        let bucket = (hash % self.bucket_count as u64) as u32
        
        let mut entry_idx = self.buckets[bucket]
        while entry_idx != 0 {
            let entry = &self.entries[entry_idx - 1]
            
            if entry.key_hash == hash {
                let stored_key = string_from_bytes(&self.string_pool[entry.key_offset as usize..(entry.key_offset + entry.key_len as u32) as usize])
                if stored_key == key {
                    if entry.expire_time == 0 {
                        return -1  // No expiration
                    }
                    let ttl = entry.expire_time - now().sec
                    return if ttl > 0 { ttl } else { -2 }  // -2 means expired
                }
            }
            
            entry_idx = entry.next
        }
        
        -2  // Key not found
    }
    
    func flush(&mut self) {
        // Clear all data
        self.entry_count = 0
        self.string_pool_pos = 0
        self.value_pool_pos = 0
        self.memory_used = 0
        
        // Clear buckets
        for i in 0..self.bucket_count {
            self.buckets[i] = 0
        }
    }
    
    func memory_usage(&self) -> u64 {
        self.memory_used
    }
}

// Helper functions
func parse_integer(buf: &[u8]) -> Option<(i64, u32)> {
    let mut i = 0
    while i < buf.len() && buf[i] != '\r' as u8 {
        i += 1
    }
    
    if i + 1 >= buf.len() || buf[i+1] != '\n' as u8 {
        return None
    }
    
    let num_str = string_from_bytes(&buf[..i])
    match parse_i64(num_str) {
        Ok(num) => Some((num, i as u32 + 2)),
        Err(_) => None
    }
}

func format_bulk_string(s: &str) -> string {
    format!("${}\r\n{}\r\n", s.len(), s)
}
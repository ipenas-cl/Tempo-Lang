// ╔═════╦═════╦═════╗
// ║ 🛡️  ║ ⚖️  ║ ⚡  ║
// ║  C  ║  E  ║  G  ║
// ╚═════╩═════╩═════╝
// ╔═════════════════╗
// ║ wcet [T∞] bound ║
// ╚═════════════════╝
//
// Author: Ignacio Peña Sepúlveda
// Date: June 25, 2025

// DOOM Audio System - Sound mixing and playback

// All standard library functions are globally available in Tempo
// No imports needed - everything built-in for offline programming

const MAX_CHANNELS: usize = 8;
const SAMPLE_RATE: u32 = 11025; // Original DOOM sample rate
const BUFFER_SIZE: usize = 512;
const VOLUME_LEVELS: u32 = 128;

struct AudioSystem {
    // Sound data
    sounds: Vec<SoundData>,
    music_tracks: Vec<MusicTrack>,
    
    // Mixing channels
    channels: [Channel; MAX_CHANNELS],
    music_channel: MusicChannel,
    
    // Output buffer
    mix_buffer: [i32; BUFFER_SIZE],
    output_buffer: [i16; BUFFER_SIZE * 2], // Stereo
    
    // Volume settings
    sfx_volume: u32,
    music_volume: u32,
    
    // 3D sound positioning
    listener_x: i32,
    listener_y: i32,
    listener_angle: u32,
    
    // Sound priorities
    sound_priorities: Vec<u8>,
}

struct SoundData {
    sample_rate: u32,
    samples: Vec<u8>,
    priority: u8,
    singularity: bool, // Only one instance can play
}

struct Channel {
    active: bool,
    sound_id: u32,
    position: usize,
    volume_left: u32,
    volume_right: u32,
    priority: u8,
    origin_x: i32,
    origin_y: i32,
}

struct MusicTrack {
    format: MusicFormat,
    data: Vec<u8>,
    loop_point: Option<usize>,
}

struct MusicChannel {
    active: bool,
    track_id: u32,
    position: usize,
    tempo: u32,
    volume: u32,
}

enum MusicFormat {
    MUS, // DOOM's music format
    MIDI,
}

impl AudioSystem {
    fn new() -> AudioSystem {
        AudioSystem {
            sounds: Vec::new(),
            music_tracks: Vec::new(),
            channels: [Channel::default(); MAX_CHANNELS],
            music_channel: MusicChannel::default(),
            mix_buffer: [0; BUFFER_SIZE],
            output_buffer: [0; BUFFER_SIZE * 2],
            sfx_volume: 8,
            music_volume: 8,
            listener_x: 0,
            listener_y: 0,
            listener_angle: 0,
            sound_priorities: Vec::new(),
        }
    }
    
    fn init(&mut self, wad: &WadLoader) {
        // Load sound effects
        self.load_sounds(wad);
        
        // Load music
        self.load_music(wad);
        
        // Initialize audio output
        self.init_audio_output();
    }
    
    fn load_sounds(&mut self, wad: &WadLoader) {
        // Load sound effect list
        let sound_names = [
            "DSPISTOL", "DSSHOTGN", "DSSGCOCK", "DSDSHTGN", "DSDBOPN",
            "DSDBCLS", "DSDBLOAD", "DSPLASMA", "DSBFG", "DSSAWUP",
            "DSSAWIDL", "DSSAWFUL", "DSSAWHIT", "DSRLAUNC", "DSRXPLOD",
            "DSFIRSHT", "DSFIRXPL", "DSPSTART", "DSPSTOP", "DSDOROPN",
            "DSDORCLS", "DSSTNMOV", "DSSWTCHN", "DSSWTCHX", "DSPLPAIN",
            "DSDMPAIN", "DSPOPAIN", "DSSLOP", "DSITEMUP", "DSWPNUP",
            "DSOOF", "DSTELEPT", "DSPOSIT1", "DSPOSIT2", "DSPOSIT3",
            "DSBGSIT1", "DSBGSIT2", "DSSGTSIT", "DSBRSSIT", "DSCACSIT",
            "DSCYBSIT", "DSSPISIT", "DSSKLATK", "DSSGTATK", "DSCLAW",
            "DSPLDETH", "DSPDIEHI", "DSPODTH1", "DSPODTH2", "DSPODTH3",
            "DSBGDTH1", "DSBGDTH2", "DSSGTDTH", "DSBRSDTH", "DSCACDTH",
            "DSCYBDTH", "DSSPIDTH", "DSSKEDTH", "DSPOSACT", "DSBGACT",
            "DSDMACT", "DSBSPACT", "DSBSPWLK", "DSVILACT", "DSNOWAY",
            "DSBAREXP", "DSPUNCH", "DSHOOF", "DSMETAL", "DSTINK",
            "DSBDOPN", "DSBDCLS", "DSITMBK", "DSFLAME", "DSFLAMST",
            "DSGETPOW", "DSBOSPIT", "DSBOSCUB", "DSBOSSIT", "DSBOSPN",
            "DSBOSDTH", "DSMANATK", "DSMANDTH", "DSMANACT", "DSSKESIT",
            "DSSKEATK", "DSSKEPCH", "DSVILATK", "DSVILDTH", "DSSKESWG",
            "DSSKEACT", "DSSKESIT", "DSSKEATK", "DSPESIT", "DSPEDTH",
            "DSPEACT", "DSELEC", "DSPEDTH"
        ];
        
        // Set up sound priorities
        self.init_sound_priorities();
        
        for (i, name) in sound_names.iter().enumerate() {
            if let Some(sound) = wad.load_sound(name) {
                self.sounds.push(SoundData {
                    sample_rate: sound.sample_rate,
                    samples: sound.samples,
                    priority: self.sound_priorities.get(i).copied().unwrap_or(64),
                    singularity: self.is_singular_sound(i),
                });
            }
        }
    }
    
    fn load_music(&mut self, wad: &WadLoader) {
        // Load music tracks (D_E1M1, etc.)
        for episode in 1..=3 {
            for map in 1..=9 {
                let name = format!("D_E{}M{}", episode, map);
                if let Some(data) = wad.get_lump(&name) {
                    self.music_tracks.push(MusicTrack {
                        format: MusicFormat::MUS,
                        data: data.to_vec(),
                        loop_point: Some(0), // MUS format loops from beginning
                    });
                }
            }
        }
    }
    
    fn init_audio_output(&self) {
        // Initialize platform-specific audio output
        init_audio_device(SAMPLE_RATE, BUFFER_SIZE as u32);
    }
    
    fn update_tic(&mut self, tic: u32, game: &GameLogic) {
        // Update listener position from player
        if let Some(player) = game.players.first() {
            self.listener_x = player.x;
            self.listener_y = player.y;
            self.listener_angle = player.angle;
        }
        
        // Mix audio for this tic
        self.mix_audio();
        
        // Submit to audio device
        submit_audio_buffer(&self.output_buffer);
    }
    
    fn play_sound(&mut self, sound_id: u32, x: i32, y: i32) {
        if sound_id >= self.sounds.len() as u32 {
            return;
        }
        
        let sound = &self.sounds[sound_id as usize];
        
        // Check singularity
        if sound.singularity {
            self.stop_sound(sound_id);
        }
        
        // Calculate volume and panning based on position
        let (vol_left, vol_right) = self.calculate_stereo_volume(x, y);
        
        // Skip if too quiet
        if vol_left == 0 && vol_right == 0 {
            return;
        }
        
        // Find free channel or steal one
        let channel_idx = self.find_channel(sound.priority);
        if let Some(idx) = channel_idx {
            self.channels[idx] = Channel {
                active: true,
                sound_id,
                position: 0,
                volume_left: vol_left,
                volume_right: vol_right,
                priority: sound.priority,
                origin_x: x,
                origin_y: y,
            };
        }
    }
    
    fn play_sound_global(&mut self, sound_id: u32) {
        // Play sound at full volume (UI sounds, etc.)
        self.play_sound_at_volume(sound_id, self.sfx_volume, self.sfx_volume);
    }
    
    fn play_sound_at_volume(&mut self, sound_id: u32, vol_left: u32, vol_right: u32) {
        if sound_id >= self.sounds.len() as u32 {
            return;
        }
        
        let sound = &self.sounds[sound_id as usize];
        
        if let Some(idx) = self.find_channel(sound.priority) {
            self.channels[idx] = Channel {
                active: true,
                sound_id,
                position: 0,
                volume_left: vol_left.min(VOLUME_LEVELS - 1),
                volume_right: vol_right.min(VOLUME_LEVELS - 1),
                priority: sound.priority,
                origin_x: self.listener_x,
                origin_y: self.listener_y,
            };
        }
    }
    
    fn stop_sound(&mut self, sound_id: u32) {
        for channel in &mut self.channels {
            if channel.active && channel.sound_id == sound_id {
                channel.active = false;
            }
        }
    }
    
    fn play_music(&mut self, track_id: u32) {
        if track_id >= self.music_tracks.len() as u32 {
            return;
        }
        
        self.music_channel = MusicChannel {
            active: true,
            track_id,
            position: 0,
            tempo: 140, // Default tempo
            volume: self.music_volume,
        };
    }
    
    fn stop_music(&mut self) {
        self.music_channel.active = false;
    }
    
    fn mix_audio(&mut self) {
        // Clear mix buffer
        self.mix_buffer.fill(0);
        
        // Mix sound channels
        for channel in &mut self.channels {
            if !channel.active {
                continue;
            }
            
            let sound = &self.sounds[channel.sound_id as usize];
            
            // Mix samples
            for i in 0..BUFFER_SIZE {
                if channel.position >= sound.samples.len() {
                    channel.active = false;
                    break;
                }
                
                // Convert unsigned 8-bit to signed
                let sample = (sound.samples[channel.position] as i16 - 128) as i32;
                
                // Apply volume and accumulate
                let left_sample = (sample * channel.volume_left as i32) / VOLUME_LEVELS as i32;
                let right_sample = (sample * channel.volume_right as i32) / VOLUME_LEVELS as i32;
                
                self.mix_buffer[i] += left_sample;
                if i + 1 < BUFFER_SIZE {
                    self.mix_buffer[i + 1] += right_sample;
                }
                
                // Advance position (handle sample rate conversion)
                channel.position += 1;
                if sound.sample_rate != SAMPLE_RATE {
                    // Simple sample rate conversion
                    channel.position = (channel.position as u32 * sound.sample_rate / SAMPLE_RATE) as usize;
                }
            }
        }
        
        // Mix music
        if self.music_channel.active {
            self.mix_music();
        }
        
        // Convert to output format with clipping
        for i in 0..BUFFER_SIZE {
            let sample = self.mix_buffer[i];
            let clipped = sample.max(-32768).min(32767) as i16;
            
            // Interleave stereo
            self.output_buffer[i * 2] = clipped;
            self.output_buffer[i * 2 + 1] = clipped;
        }
    }
    
    fn mix_music(&mut self) {
        // Simplified music mixing
        // In real implementation, would parse and play MUS/MIDI format
        
        if !self.music_channel.active {
            return;
        }
        
        let track = &self.music_tracks[self.music_channel.track_id as usize];
        
        // Generate simple square wave for now
        let frequency = 440; // A4
        let samples_per_period = SAMPLE_RATE / frequency;
        
        for i in 0..BUFFER_SIZE {
            let phase = (self.music_channel.position + i) % samples_per_period as usize;
            let sample = if phase < samples_per_period as usize / 2 { 64 } else { -64 };
            
            let volume_scaled = (sample * self.music_channel.volume as i32) / VOLUME_LEVELS as i32;
            self.mix_buffer[i] += volume_scaled;
        }
        
        self.music_channel.position += BUFFER_SIZE;
        
        // Loop music
        if let Some(loop_point) = track.loop_point {
            if self.music_channel.position >= track.data.len() {
                self.music_channel.position = loop_point;
            }
        }
    }
    
    fn calculate_stereo_volume(&self, x: i32, y: i32) -> (u32, u32) {
        // Calculate distance
        let dx = (x - self.listener_x) >> 16; // Convert from fixed-point
        let dy = (y - self.listener_y) >> 16;
        let dist = ((dx * dx + dy * dy) as f32).sqrt() as i32;
        
        // Distance attenuation
        let max_dist = 1200;
        if dist > max_dist {
            return (0, 0);
        }
        
        let base_volume = ((max_dist - dist) * self.sfx_volume as i32 / max_dist) as u32;
        
        // Calculate angle for stereo panning
        let angle = atan2_fixed(dy, dx);
        let relative_angle = angle.wrapping_sub(self.listener_angle);
        
        // Convert angle to panning
        let pan = (relative_angle as i32 >> 24) as i32; // -128 to 127
        
        let vol_left = if pan > 0 {
            base_volume - (pan as u32 * base_volume / 128)
        } else {
            base_volume
        };
        
        let vol_right = if pan < 0 {
            base_volume - ((-pan) as u32 * base_volume / 128)
        } else {
            base_volume
        };
        
        (vol_left.min(VOLUME_LEVELS - 1), vol_right.min(VOLUME_LEVELS - 1))
    }
    
    fn find_channel(&self, priority: u8) -> Option<usize> {
        // First, look for free channel
        for (i, channel) in self.channels.iter().enumerate() {
            if !channel.active {
                return Some(i);
            }
        }
        
        // Find channel with lowest priority
        let mut lowest_priority = 255;
        let mut lowest_idx = None;
        
        for (i, channel) in self.channels.iter().enumerate() {
            if channel.priority < lowest_priority {
                lowest_priority = channel.priority;
                lowest_idx = Some(i);
            }
        }
        
        // Only steal if new sound has higher priority
        if priority > lowest_priority {
            lowest_idx
        } else {
            None
        }
    }
    
    fn set_sfx_volume(&mut self, volume: u32) {
        self.sfx_volume = volume.min(15);
    }
    
    fn set_music_volume(&mut self, volume: u32) {
        self.music_volume = volume.min(15);
        self.music_channel.volume = self.music_volume;
    }
    
    fn init_sound_priorities(&mut self) {
        // Set up sound priorities (higher = more important)
        self.sound_priorities = vec![
            // Weapon sounds
            64, 64, 64, 64, 64, 64, 64, 96, 96, 64, 64, 64, 64, 96, 70,
            // Monster sounds
            70, 70, 60, 60, 60, 60, 60, 60, 60, 78, 78, 78, 78, 32, 60,
            // Player sounds
            96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 100, 100, 100, 100, 100,
            // Other sounds...
        ];
        
        // Fill remaining with default priority
        while self.sound_priorities.len() < 200 {
            self.sound_priorities.push(64);
        }
    }
    
    fn is_singular_sound(&self, sound_idx: usize) -> bool {
        // Some sounds should only have one instance playing
        match sound_idx {
            14 => true, // Rocket explosion
            15 => true, // Fireball explosion
            _ => false,
        }
    }
}

// Fixed-point arctangent approximation
fn atan2_fixed(y: i32, x: i32) -> u32 {
    // Simplified atan2 for audio panning
    if x == 0 {
        if y > 0 {
            0x40000000 // 90 degrees
        } else {
            0xC0000000 // 270 degrees
        }
    } else if x > 0 {
        if y >= 0 {
            // First quadrant
            ((y << 8) / x) as u32
        } else {
            // Fourth quadrant
            0xFFFFFFFF - (((-y) << 8) / x) as u32 + 1
        }
    } else {
        if y >= 0 {
            // Second quadrant
            0x80000000 - (((y << 8) / (-x)) as u32)
        } else {
            // Third quadrant
            0x80000000 + ((((-y) << 8) / (-x)) as u32)
        }
    }
}

// Default implementations
impl Default for Channel {
    fn default() -> Self {
        Channel {
            active: false,
            sound_id: 0,
            position: 0,
            volume_left: 0,
            volume_right: 0,
            priority: 0,
            origin_x: 0,
            origin_y: 0,
        }
    }
}

impl Default for MusicChannel {
    fn default() -> Self {
        MusicChannel {
            active: false,
            track_id: 0,
            position: 0,
            tempo: 140,
            volume: 8,
        }
    }
}

// Platform-specific audio functions
extern fn init_audio_device(sample_rate: u32, buffer_size: u32);
extern fn submit_audio_buffer(buffer: &[i16]);
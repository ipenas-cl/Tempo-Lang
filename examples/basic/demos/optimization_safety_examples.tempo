// ╔═════╦═════╦═════╗
// ║ 🛡️  ║ ⚖️  ║ ⚡  ║
// ║  C  ║  E  ║  G  ║
// ╚═════╩═════╩═════╝
// ╔═════════════════╗
// ║ wcet [T∞] bound ║
// ╚═════════════════╝
//
// Author: Ignacio Peña Sepúlveda
// Date: June 25, 2025

// ===========================================================================
// OPTIMIZATION SAFETY EXAMPLES - SAFE vs UNSAFE Optimizations
// ===========================================================================
// Demonstrates concrete examples of optimizations that preserve vs violate
// real-time guarantees, determinism, and correctness properties
// ===========================================================================

module optimization_safety_examples {
    use mir::{MirProgram, MirFunction, MirInst, BasicBlock};
    use stage2::wcet::{WCETContext, TimeBound, TimeUnit};
    use conservative_tree_shaker::{ConservativeTreeShaker, ReachabilityProof};
    use wcet_preserving_optimizer::{WCETPreservingOptimizer, WCETSafeOptimization};
    use determinism_checker::{DeterminismChecker, NonDeterministicSource};

    // Examples of SAFE optimizations with mathematical proofs
    struct SafeOptimizationExample {
        name: String,
        description: String,
        original_code: MirFunction,
        optimized_code: MirFunction,
        safety_proof: SafetyProof,
        wcet_guarantee: WCETGuarantee,
        determinism_guarantee: DeterminismGuarantee,
    }

    // Examples of UNSAFE optimizations with counterexamples
    struct UnsafeOptimizationExample {
        name: String,
        description: String,
        original_code: MirFunction,
        attempted_optimization: MirFunction,
        violation_type: ViolationType,
        counterexample: OptimizationCounterexample,
        why_unsafe: String,
    }

    enum ViolationType {
        WCETViolation,         // Increases worst-case execution time
        DeterminismViolation,  // Breaks deterministic behavior
        CorrectnessViolation,  // Changes program semantics
        RealTimeViolation,     // Breaks real-time constraints
    }

    struct SafetyProof {
        theorem: String,
        mathematical_proof: String,
        verification_method: String,
        confidence_level: f64, // 0.0 to 1.0
    }

    struct WCETGuarantee {
        original_wcet: TimeBound,
        optimized_wcet: TimeBound,
        improvement_factor: f64,
        proof_of_improvement: String,
    }

    struct DeterminismGuarantee {
        properties_preserved: Vec<String>,
        formal_proof: String,
        no_counterexamples: bool,
    }

    struct OptimizationCounterexample {
        input_case: String,
        original_behavior: ExecutionResult,
        optimized_behavior: ExecutionResult,
        difference_explanation: String,
    }

    struct ExecutionResult {
        output_values: HashMap<String, i64>,
        execution_time: u64,
        side_effects: Vec<SideEffect>,
        memory_usage: u64,
    }

    struct SideEffect {
        effect_type: String,
        location: String,
        value: String,
    }

    // Demonstrate safe optimizations
    fn demonstrate_safe_optimizations() -> Vec<SafeOptimizationExample> {
        vec![
            create_safe_constant_folding_example(),
            create_safe_dead_code_elimination_example(),
            create_safe_loop_unrolling_example(),
            create_safe_common_subexpression_elimination_example(),
            create_safe_tail_call_optimization_example(),
        ]
    }

    // SAFE EXAMPLE 1: Constant Folding
    fn create_safe_constant_folding_example() -> SafeOptimizationExample {
        // Original function with constant expressions
        let original_code = create_function("constant_computation", vec![
            // Block 0: Entry
            create_block(0, vec![
                MirInst::LoadConst(1, 42),        // reg1 = 42
                MirInst::LoadConst(2, 58),        // reg2 = 58
                MirInst::Add(3, 1, 2),            // reg3 = reg1 + reg2 = 100
                MirInst::LoadConst(4, 2),         // reg4 = 2
                MirInst::Mul(5, 3, 4),            // reg5 = reg3 * reg4 = 200
                MirInst::Return(Some(5)),         // return reg5
            ]),
        ]);

        // Optimized function with constants folded
        let optimized_code = create_function("constant_computation", vec![
            // Block 0: Entry (optimized)
            create_block(0, vec![
                MirInst::LoadConst(5, 200),       // reg5 = 200 (computed at compile time)
                MirInst::Return(Some(5)),         // return reg5
            ]),
        ]);

        SafeOptimizationExample {
            name: "Constant Folding".to_string(),
            description: "Compile-time evaluation of constant expressions".to_string(),
            original_code,
            optimized_code,
            safety_proof: SafetyProof {
                theorem: "Constant folding preserves program semantics and improves WCET".to_string(),
                mathematical_proof: 
                    "Theorem: For pure arithmetic operations on constants,\n\
                     compile-time evaluation produces identical results to runtime evaluation.\n\
                     Proof: Mathematical operations are deterministic and platform-independent.\n\
                     42 + 58 = 100 (always), 100 * 2 = 200 (always)\n\
                     Original: 5 instructions, Optimized: 2 instructions\n\
                     WCET reduction: 3 instruction cycles guaranteed. ∎".to_string(),
                verification_method: "Static analysis and mathematical verification".to_string(),
                confidence_level: 1.0,
            },
            wcet_guarantee: WCETGuarantee {
                original_wcet: TimeBound::Constant(5, TimeUnit::Cycles), // 5 instructions
                optimized_wcet: TimeBound::Constant(2, TimeUnit::Cycles), // 2 instructions
                improvement_factor: 2.5,
                proof_of_improvement: "Eliminated 3 arithmetic instructions, keeping only load and return".to_string(),
            },
            determinism_guarantee: DeterminismGuarantee {
                properties_preserved: vec![
                    "Value determinism".to_string(),
                    "Timing determinism".to_string(),
                    "Memory determinism".to_string(),
                ],
                formal_proof: "Constant folding is a purely syntactic transformation that preserves semantics".to_string(),
                no_counterexamples: true,
            },
        }
    }

    // SAFE EXAMPLE 2: Dead Code Elimination
    fn create_safe_dead_code_elimination_example() -> SafeOptimizationExample {
        // Original function with unreachable code
        let original_code = create_function("conditional_example", vec![
            // Block 0: Entry
            create_block(0, vec![
                MirInst::LoadConst(1, 10),        // reg1 = 10
                MirInst::LoadConst(2, 5),         // reg2 = 5
                MirInst::Lt(3, 2, 1),             // reg3 = (reg2 < reg1) = true
                MirInst::JumpIf(3, 1, 2),         // if reg3 then block1 else block2
            ]),
            // Block 1: True branch (always taken)
            create_block(1, vec![
                MirInst::LoadConst(4, 100),       // reg4 = 100
                MirInst::Return(Some(4)),         // return 100
            ]),
            // Block 2: False branch (never taken - DEAD CODE)
            create_block(2, vec![
                MirInst::LoadConst(5, 999),       // DEAD: reg5 = 999
                MirInst::LoadConst(6, 1000),      // DEAD: reg6 = 1000
                MirInst::Add(7, 5, 6),            // DEAD: reg7 = reg5 + reg6
                MirInst::Return(Some(7)),         // DEAD: return reg7
            ]),
        ]);

        // Optimized function with dead code removed
        let optimized_code = create_function("conditional_example", vec![
            // Block 0: Entry (simplified)
            create_block(0, vec![
                MirInst::LoadConst(4, 100),       // reg4 = 100 (condition always true)
                MirInst::Return(Some(4)),         // return 100
            ]),
        ]);

        SafeOptimizationExample {
            name: "Dead Code Elimination".to_string(),
            description: "Removal of provably unreachable code".to_string(),
            original_code,
            optimized_code,
            safety_proof: SafetyProof {
                theorem: "Eliminating unreachable code preserves semantics and improves performance".to_string(),
                mathematical_proof: 
                    "Theorem: If code is provably unreachable, its removal cannot affect program behavior.\n\
                     Proof: The condition (5 < 10) is always true (mathematical fact).\n\
                     Therefore, block 2 is never executed in any program execution.\n\
                     Removing unreachable code cannot change reachable program behavior.\n\
                     WCET improvement: Eliminated 4 dead instructions. ∎".to_string(),
                verification_method: "Static reachability analysis with constant propagation".to_string(),
                confidence_level: 1.0,
            },
            wcet_guarantee: WCETGuarantee {
                original_wcet: TimeBound::Constant(6, TimeUnit::Cycles), // Worst case through block 1
                optimized_wcet: TimeBound::Constant(2, TimeUnit::Cycles), // Direct computation
                improvement_factor: 3.0,
                proof_of_improvement: "Eliminated conditional branch and constant computation".to_string(),
            },
            determinism_guarantee: DeterminismGuarantee {
                properties_preserved: vec![
                    "Value determinism".to_string(),
                    "Control flow determinism".to_string(),
                    "Timing determinism".to_string(),
                ],
                formal_proof: "Dead code removal is semantics-preserving by definition".to_string(),
                no_counterexamples: true,
            },
        }
    }

    // SAFE EXAMPLE 3: Bounded Loop Unrolling
    fn create_safe_loop_unrolling_example() -> SafeOptimizationExample {
        // Original function with small bounded loop
        let original_code = create_function("sum_array_4", vec![
            // Block 0: Entry and loop setup
            create_block(0, vec![
                MirInst::LoadConst(1, 0),         // i = 0 (loop counter)
                MirInst::LoadConst(2, 0),         // sum = 0
                MirInst::LoadConst(3, 4),         // array_size = 4
                MirInst::Jump(1),                 // goto loop_condition
            ]),
            // Block 1: Loop condition
            create_block_with_bound(1, Some(4), vec![
                MirInst::Lt(4, 1, 3),             // reg4 = (i < array_size)
                MirInst::JumpIf(4, 2, 3),         // if reg4 then loop_body else exit
            ]),
            // Block 2: Loop body
            create_block(2, vec![
                MirInst::Load(5, 1, 8),           // reg5 = array[i] (load from memory)
                MirInst::Add(2, 2, 5),            // sum += array[i]
                MirInst::LoadConst(6, 1),         // reg6 = 1
                MirInst::Add(1, 1, 6),            // i += 1
                MirInst::Jump(1),                 // goto loop_condition
            ]),
            // Block 3: Exit
            create_block(3, vec![
                MirInst::Return(Some(2)),         // return sum
            ]),
        ]);

        // Optimized function with loop unrolled
        let optimized_code = create_function("sum_array_4", vec![
            // Block 0: Unrolled loop
            create_block(0, vec![
                MirInst::LoadConst(2, 0),         // sum = 0
                MirInst::LoadConst(1, 0),         // i = 0
                MirInst::Load(5, 1, 8),           // sum += array[0]
                MirInst::Add(2, 2, 5),
                MirInst::LoadConst(1, 1),         // i = 1
                MirInst::Load(5, 1, 8),           // sum += array[1]
                MirInst::Add(2, 2, 5),
                MirInst::LoadConst(1, 2),         // i = 2
                MirInst::Load(5, 1, 8),           // sum += array[2]
                MirInst::Add(2, 2, 5),
                MirInst::LoadConst(1, 3),         // i = 3
                MirInst::Load(5, 1, 8),           // sum += array[3]
                MirInst::Add(2, 2, 5),
                MirInst::Return(Some(2)),         // return sum
            ]),
        ]);

        SafeOptimizationExample {
            name: "Bounded Loop Unrolling".to_string(),
            description: "Unrolling loops with small, statically known bounds".to_string(),
            original_code,
            optimized_code,
            safety_proof: SafetyProof {
                theorem: "Unrolling bounded loops preserves semantics and can improve performance".to_string(),
                mathematical_proof: 
                    "Theorem: For a loop with static bound N, unrolling produces equivalent behavior.\n\
                     Proof: Loop executes exactly 4 iterations (0,1,2,3).\n\
                     Unrolled version performs same operations in same order.\n\
                     Eliminates 4 branch instructions and 4 comparisons.\n\
                     WCET: Original has branch overhead, unrolled has none. ∎".to_string(),
                verification_method: "Loop bound analysis and instruction count verification".to_string(),
                confidence_level: 1.0,
            },
            wcet_guarantee: WCETGuarantee {
                original_wcet: TimeBound::Constant(21, TimeUnit::Cycles), // 4 iterations * ~5 cycles + overhead
                optimized_wcet: TimeBound::Constant(17, TimeUnit::Cycles), // 17 instructions, no branches
                improvement_factor: 1.24,
                proof_of_improvement: "Eliminated branch overhead and loop counter management".to_string(),
            },
            determinism_guarantee: DeterminismGuarantee {
                properties_preserved: vec![
                    "Value determinism".to_string(),
                    "Memory access pattern".to_string(),
                    "Execution order".to_string(),
                ],
                formal_proof: "Loop unrolling preserves iteration order and operation sequence".to_string(),
                no_counterexamples: true,
            },
        }
    }

    // Demonstrate unsafe optimizations
    fn demonstrate_unsafe_optimizations() -> Vec<UnsafeOptimizationExample> {
        vec![
            create_unsafe_aggressive_inlining_example(),
            create_unsafe_floating_point_reordering_example(),
            create_unsafe_speculative_execution_example(),
            create_unsafe_unbounded_loop_optimization_example(),
            create_unsafe_memory_coalescing_example(),
        ]
    }

    // UNSAFE EXAMPLE 1: Aggressive Function Inlining
    fn create_unsafe_aggressive_inlining_example() -> UnsafeOptimizationExample {
        // Original function with recursive call
        let original_code = create_function("fibonacci", vec![
            create_block(0, vec![
                MirInst::LoadConst(1, 2),         // reg1 = 2
                MirInst::Lt(2, 0, 1),             // reg2 = (n < 2)
                MirInst::JumpIf(2, 1, 2),         // if n < 2 then base_case else recursive
            ]),
            create_block(1, vec![
                MirInst::Return(Some(0)),         // return n (base case)
            ]),
            create_block(2, vec![
                MirInst::LoadConst(3, 1),         // reg3 = 1
                MirInst::Sub(4, 0, 3),            // reg4 = n - 1
                MirInst::Call(5, 0, vec![4]),     // reg5 = fibonacci(n-1)
                MirInst::LoadConst(6, 2),         // reg6 = 2
                MirInst::Sub(7, 0, 6),            // reg7 = n - 2
                MirInst::Call(8, 0, vec![7]),     // reg8 = fibonacci(n-2)
                MirInst::Add(9, 5, 8),            // reg9 = fib(n-1) + fib(n-2)
                MirInst::Return(Some(9)),         // return result
            ]),
        ]);

        // Attempted aggressive inlining (UNSAFE)
        let attempted_optimization = create_function("fibonacci_inlined", vec![
            create_block(0, vec![
                // Attempting to inline recursive calls leads to infinite expansion
                // This is a conceptual representation of the problem
                MirInst::LoadConst(1, 2),
                MirInst::Lt(2, 0, 1),
                MirInst::JumpIf(2, 1, 2),
            ]),
            // ... infinite inlined recursive calls would go here
        ]);

        UnsafeOptimizationExample {
            name: "Aggressive Recursive Function Inlining".to_string(),
            description: "Attempting to inline recursive functions without bounds".to_string(),
            original_code,
            attempted_optimization,
            violation_type: ViolationType::WCETViolation,
            counterexample: OptimizationCounterexample {
                input_case: "fibonacci(10)".to_string(),
                original_behavior: ExecutionResult {
                    output_values: hashmap!["result".to_string() => 55],
                    execution_time: 1000, // Bounded by recursion depth
                    side_effects: vec![],
                    memory_usage: 100, // Stack frames
                },
                optimized_behavior: ExecutionResult {
                    output_values: hashmap!["result".to_string() => 55],
                    execution_time: u64::MAX, // Code explosion!
                    side_effects: vec![],
                    memory_usage: u64::MAX, // Massive code size
                },
                difference_explanation: "Inlining recursive function causes exponential code growth".to_string(),
            },
            why_unsafe: 
                "UNSAFE BECAUSE:\n\
                1. WCET Violation: Code size grows exponentially O(2^n)\n\
                2. Memory Explosion: Instruction cache pollution\n\
                3. Compilation Time: May not terminate\n\
                4. Real-time Violation: Unpredictable execution time\n\
                LESSON: Always check for recursion before inlining".to_string(),
        }
    }

    // UNSAFE EXAMPLE 2: Floating Point Reordering
    fn create_unsafe_floating_point_reordering_example() -> UnsafeOptimizationExample {
        // Original careful floating point computation
        let original_code = create_function("precise_calculation", vec![
            create_block(0, vec![
                // Calculating: (a + b) + (c + d) with careful ordering
                MirInst::LoadConst(1, 0x3F800000), // a = 1.0 (float32)
                MirInst::LoadConst(2, 0x3F000000), // b = 0.5
                MirInst::LoadConst(3, 0x3E800000), // c = 0.25
                MirInst::LoadConst(4, 0x3E000000), // d = 0.125
                MirInst::Add(5, 1, 2),              // temp1 = a + b = 1.5
                MirInst::Add(6, 3, 4),              // temp2 = c + d = 0.375
                MirInst::Add(7, 5, 6),              // result = temp1 + temp2 = 1.875
                MirInst::Return(Some(7)),
            ]),
        ]);

        // Attempted reordering optimization (UNSAFE for some inputs)
        let attempted_optimization = create_function("reordered_calculation", vec![
            create_block(0, vec![
                // Reordered to: ((a + c) + b) + d - different associativity!
                MirInst::LoadConst(1, 0x3F800000), // a = 1.0
                MirInst::LoadConst(2, 0x3F000000), // b = 0.5
                MirInst::LoadConst(3, 0x3E800000), // c = 0.25
                MirInst::LoadConst(4, 0x3E000000), // d = 0.125
                MirInst::Add(5, 1, 3),              // temp1 = a + c = 1.25
                MirInst::Add(6, 5, 2),              // temp2 = temp1 + b = 1.75
                MirInst::Add(7, 6, 4),              // result = temp2 + d = 1.875
                MirInst::Return(Some(7)),
            ]),
        ]);

        UnsafeOptimizationExample {
            name: "Floating Point Associativity Reordering".to_string(),
            description: "Reordering floating point operations assuming mathematical associativity".to_string(),
            original_code,
            attempted_optimization,
            violation_type: ViolationType::DeterminismViolation,
            counterexample: OptimizationCounterexample {
                input_case: "Large numbers with precision loss".to_string(),
                original_behavior: ExecutionResult {
                    output_values: hashmap!["result".to_string() => 0x3FF00000], // Precise result
                    execution_time: 100,
                    side_effects: vec![],
                    memory_usage: 50,
                },
                optimized_behavior: ExecutionResult {
                    output_values: hashmap!["result".to_string() => 0x3FEFFFFF], // Slightly different due to rounding
                    execution_time: 100,
                    side_effects: vec![],
                    memory_usage: 50,
                },
                difference_explanation: "Floating point operations are not associative due to rounding errors".to_string(),
            },
            why_unsafe: 
                "UNSAFE BECAUSE:\n\
                1. Determinism Violation: Different results on different platforms\n\
                2. Precision Loss: Reordering can increase accumulated errors\n\
                3. Real-time Violation: Results may vary between runs\n\
                4. Platform Dependence: Different FPU implementations give different results\n\
                LESSON: Never reorder floating point operations without explicit permission".to_string(),
        }
    }

    // UNSAFE EXAMPLE 3: Speculative Execution Optimization
    fn create_unsafe_speculative_execution_example() -> UnsafeOptimizationExample {
        // Original function with side effect in condition
        let original_code = create_function("conditional_side_effect", vec![
            create_block(0, vec![
                MirInst::LoadConst(1, 0),         // counter = 0
                MirInst::Call(2, 1, vec![]),      // reg2 = increment_global_counter()
                MirInst::LoadConst(3, 5),         // reg3 = 5
                MirInst::Lt(4, 2, 3),             // reg4 = (counter < 5)
                MirInst::JumpIf(4, 1, 2),         // if condition then true_branch else false_branch
            ]),
            create_block(1, vec![
                MirInst::LoadConst(5, 100),       // result = 100
                MirInst::Return(Some(5)),
            ]),
            create_block(2, vec![
                MirInst::LoadConst(6, 200),       // result = 200
                MirInst::Return(Some(6)),
            ]),
        ]);

        // Attempted speculative optimization (UNSAFE)
        let attempted_optimization = create_function("speculative_version", vec![
            create_block(0, vec![
                // SPECULATIVELY execute both branches and select result
                MirInst::LoadConst(1, 0),         // counter = 0
                MirInst::LoadConst(5, 100),       // speculatively compute true branch
                MirInst::LoadConst(6, 200),       // speculatively compute false branch
                MirInst::Call(2, 1, vec![]),      // reg2 = increment_global_counter() (side effect!)
                MirInst::LoadConst(3, 5),         // reg3 = 5
                MirInst::Lt(4, 2, 3),             // reg4 = (counter < 5)
                // Select result based on condition (but side effect already happened!)
                MirInst::JumpIf(4, 1, 2),
            ]),
            create_block(1, vec![
                MirInst::Return(Some(5)),         // return 100
            ]),
            create_block(2, vec![
                MirInst::Return(Some(6)),         // return 200
            ]),
        ]);

        UnsafeOptimizationExample {
            name: "Speculative Execution with Side Effects".to_string(),
            description: "Speculatively executing code that has observable side effects".to_string(),
            original_code,
            attempted_optimization,
            violation_type: ViolationType::CorrectnessViolation,
            counterexample: OptimizationCounterexample {
                input_case: "Function called when global counter is 4".to_string(),
                original_behavior: ExecutionResult {
                    output_values: hashmap!["result".to_string() => 100, "global_counter".to_string() => 5],
                    execution_time: 150,
                    side_effects: vec![
                        SideEffect {
                            effect_type: "global_write".to_string(),
                            location: "global_counter".to_string(),
                            value: "5".to_string(),
                        }
                    ],
                    memory_usage: 60,
                },
                optimized_behavior: ExecutionResult {
                    output_values: hashmap!["result".to_string() => 100, "global_counter".to_string() => 5],
                    execution_time: 140, // Slight improvement
                    side_effects: vec![
                        SideEffect {
                            effect_type: "global_write".to_string(),
                            location: "global_counter".to_string(),
                            value: "5".to_string(),
                        }
                    ],
                    memory_usage: 60,
                },
                difference_explanation: "Side effect timing changed - function call moved before condition evaluation".to_string(),
            },
            why_unsafe: 
                "UNSAFE BECAUSE:\n\
                1. Correctness Violation: Changes order of observable side effects\n\
                2. Determinism Violation: Side effects may be visible at different times\n\
                3. Real-time Violation: Timing of side effects becomes unpredictable\n\
                4. Concurrency Issues: Other threads may observe inconsistent state\n\
                LESSON: Never reorder operations with observable side effects".to_string(),
        }
    }

    // Helper functions to create MIR structures
    fn create_function(name: &str, blocks: Vec<BasicBlock>) -> MirFunction {
        MirFunction {
            name: name.to_string(),
            params: vec![],
            return_type: Some(mir::MirType::I32),
            locals: vec![],
            blocks,
            entry_block: 0,
            wcet_bound: None,
            stack_bound: None,
        }
    }

    fn create_block(id: u32, instructions: Vec<MirInst>) -> BasicBlock {
        BasicBlock {
            id,
            instructions,
            predecessors: vec![],
            successors: vec![],
            wcet_cycles: instructions.len() as u64,
            loop_bound: None,
        }
    }

    fn create_block_with_bound(id: u32, bound: Option<u32>, instructions: Vec<MirInst>) -> BasicBlock {
        BasicBlock {
            id,
            instructions,
            predecessors: vec![],
            successors: vec![],
            wcet_cycles: instructions.len() as u64,
            loop_bound: bound,
        }
    }

    // Main demonstration function
    pub fn demonstrate_optimization_safety() {
        println("=== OPTIMIZATION SAFETY DEMONSTRATION ===\n");

        // Show safe optimizations
        println("=== SAFE OPTIMIZATIONS ===");
        let safe_examples = demonstrate_safe_optimizations();
        for example in &safe_examples {
            println("\n🟢 SAFE: {}", example.name);
            println("Description: {}", example.description);
            println("WCET Improvement: {:.2}x", example.wcet_guarantee.improvement_factor);
            println("Safety Confidence: {:.1}%", example.safety_proof.confidence_level * 100.0);
            println("Proof: {}", example.safety_proof.theorem);
        }

        // Show unsafe optimizations
        println("\n=== UNSAFE OPTIMIZATIONS ===");
        let unsafe_examples = demonstrate_unsafe_optimizations();
        for example in &unsafe_examples {
            println("\n🔴 UNSAFE: {}", example.name);
            println("Description: {}", example.description);
            println("Violation Type: {:?}", example.violation_type);
            println("Why Unsafe: {}", example.why_unsafe);
        }

        println("\n=== KEY SAFETY PRINCIPLES ===");
        println("1. MATHEMATICAL PROOF: Always require formal proof of safety");
        println("2. WCET PRESERVATION: Never increase worst-case execution time");
        println("3. DETERMINISM PRESERVATION: Maintain deterministic behavior");
        println("4. SIDE EFFECT ORDERING: Preserve observable operation order");
        println("5. BOUNDED ANALYSIS: Only optimize when bounds are known");
        println("6. CONSERVATIVE APPROACH: When in doubt, don't optimize");
    }

    // Utility for creating hashmaps
    macro_rules! hashmap {
        ($($key:expr => $value:expr),*) => {
            {
                let mut map = HashMap::new();
                $(map.insert($key, $value);)*
                map
            }
        };
    }
}
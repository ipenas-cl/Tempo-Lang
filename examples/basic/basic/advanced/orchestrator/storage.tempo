// ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ï¶‚ïê‚ïê‚ïê‚ïê‚ïê‚ï¶‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
// ‚ïë üõ°Ô∏è  ‚ïë ‚öñÔ∏è  ‚ïë ‚ö°  ‚ïë
// ‚ïë  C  ‚ïë  E  ‚ïë  G  ‚ïë
// ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ï©‚ïê‚ïê‚ïê‚ïê‚ïê‚ï©‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
// ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
// ‚ïë wcet [T‚àû] bound ‚ïë
// ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
//
// Author: Ignacio Pe√±a Sep√∫lveda
// Date: June 25, 2025

// Persistent Volume Management
// Provides deterministic storage provisioning and management

namespace storage {
    using orchestrator::{Node, Pod};
    
    // Storage constants
    const MAX_VOLUMES = 10000;
    const MAX_VOLUME_NAME_LEN = 128;
    const MAX_PATH_LEN = 256;
    const MAX_SNAPSHOTS_PER_VOLUME = 32;
    const MAX_ACCESS_MODES = 3;
    const VOLUME_SYNC_INTERVAL = 5s;
    const SNAPSHOT_RETENTION_DAYS = 30;
    const MAX_MOUNT_OPTIONS = 16;
    
    // Storage controller manages all persistent volumes
    struct StorageController {
        volumes: hashmap<u64, PersistentVolume>;  // volume_id -> Volume
        volume_claims: hashmap<u64, PersistentVolumeClaim>;  // claim_id -> Claim
        storage_classes: hashmap<string<64>, StorageClass>;
        volume_snapshots: hashmap<u64, array<VolumeSnapshot, MAX_SNAPSHOTS_PER_VOLUME>>;
        node_mounts: hashmap<u32, array<MountInfo, 100>>;  // node_id -> mounts
        storage_pools: array<StoragePool, 32>;
        pool_count: u8;
        metrics: StorageMetrics;
    }
    
    // Persistent volume representation
    struct PersistentVolume {
        id: u64;
        name: string<MAX_VOLUME_NAME_LEN>;
        capacity_mb: u64;
        used_mb: u64;
        storage_class: string<64>;
        access_modes: array<AccessMode, MAX_ACCESS_MODES>;
        access_mode_count: u8;
        reclaim_policy: ReclaimPolicy;
        status: VolumeStatus;
        binding: VolumeBinding?;
        source: VolumeSource;
        mount_options: array<string<64>, MAX_MOUNT_OPTIONS>;
        mount_option_count: u8;
        creation_time: timestamp;
        last_sync_time: timestamp;
        performance_tier: PerformanceTier;
        encryption: EncryptionConfig?;
    }
    
    enum AccessMode {
        ReadWriteOnce,  // Can be mounted read-write by a single node
        ReadOnlyMany,   // Can be mounted read-only by many nodes
        ReadWriteMany   // Can be mounted read-write by many nodes
    }
    
    enum ReclaimPolicy {
        Retain,   // Manual reclamation
        Recycle,  // Basic scrub (rm -rf /thevolume/*)
        Delete    // Delete volume from underlying storage
    }
    
    enum VolumeStatus {
        Available,
        Bound,
        Released,
        Failed,
        Pending
    }
    
    struct VolumeBinding {
        claim_id: u64;
        pod_id: u64;
        node_id: u32;
        bound_time: timestamp;
    }
    
    enum VolumeSource {
        Local(LocalVolumeSource),
        Network(NetworkVolumeSource),
        Cloud(CloudVolumeSource),
        EmptyDir,
        HostPath(string<MAX_PATH_LEN>)
    }
    
    struct LocalVolumeSource {
        path: string<MAX_PATH_LEN>;
        device: string<64>?;
        fs_type: FileSystemType;
        block_device: bool;
    }
    
    struct NetworkVolumeSource {
        server: string<128>;
        path: string<MAX_PATH_LEN>;
        protocol: NetworkStorageProtocol;
        credentials: StorageCredentials?;
    }
    
    enum NetworkStorageProtocol {
        NFS,
        ISCSI,
        CephFS,
        GlusterFS,
        RBD  // Ceph RBD
    }
    
    struct CloudVolumeSource {
        provider: CloudProvider;
        volume_id: string<128>;
        region: string<32>;
        availability_zone: string<32>?;
    }
    
    enum CloudProvider {
        AWS,
        Azure,
        GCP,
        OpenStack
    }
    
    enum FileSystemType {
        Ext4,
        XFS,
        Btrfs,
        ZFS,
        NTFS
    }
    
    enum PerformanceTier {
        High,      // SSD, NVMe
        Standard,  // Standard SSD
        Economy    // HDD
    }
    
    struct EncryptionConfig {
        enabled: bool;
        algorithm: EncryptionAlgorithm;
        key_id: string<128>;
        key_rotation_days: u16;
    }
    
    enum EncryptionAlgorithm {
        AES256,
        AES128,
        ChaCha20
    }
    
    // Persistent volume claim
    struct PersistentVolumeClaim {
        id: u64;
        name: string<MAX_VOLUME_NAME_LEN>;
        namespace: string<64>;
        storage_class: string<64>?;
        access_modes: array<AccessMode, MAX_ACCESS_MODES>;
        access_mode_count: u8;
        resources: ResourceRequirements;
        selector: LabelSelector?;
        volume_id: u64?;  // Bound volume
        status: ClaimStatus;
    }
    
    enum ClaimStatus {
        Pending,
        Bound,
        Lost
    }
    
    struct ResourceRequirements {
        storage_mb: u64;
        iops: u32?;
        throughput_mbps: u32?;
    }
    
    // Storage class for dynamic provisioning
    struct StorageClass {
        name: string<64>;
        provisioner: string<128>;
        parameters: hashmap<string<64>, string<256>>;
        reclaim_policy: ReclaimPolicy;
        mount_options: array<string<64>, MAX_MOUNT_OPTIONS>;
        mount_option_count: u8;
        volume_binding_mode: VolumeBindingMode;
        allowed_topologies: array<TopologyRequirement, 8>;
        topology_count: u8;
        performance_tier: PerformanceTier;
        encryption: EncryptionConfig?;
    }
    
    enum VolumeBindingMode {
        Immediate,            // Bind immediately
        WaitForFirstConsumer  // Bind when pod is scheduled
    }
    
    struct TopologyRequirement {
        label_selector: LabelSelector;
    }
    
    // Volume mount information
    struct VolumeMount {
        name: string<64>;
        mount_path: string<MAX_PATH_LEN>;
        read_only: bool;
        sub_path: string<MAX_PATH_LEN>?;
        mount_propagation: MountPropagation;
    }
    
    enum MountPropagation {
        None,
        HostToContainer,
        Bidirectional
    }
    
    struct MountInfo {
        volume_id: u64;
        pod_id: u64;
        mount_path: string<MAX_PATH_LEN>;
        device_path: string<MAX_PATH_LEN>;
        fs_type: FileSystemType;
        options: array<string<64>, MAX_MOUNT_OPTIONS>;
        option_count: u8;
        read_only: bool;
        mount_time: timestamp;
    }
    
    // Storage pool for aggregating storage resources
    struct StoragePool {
        id: u32;
        name: string<64>;
        total_capacity_mb: u64;
        available_capacity_mb: u64;
        performance_tier: PerformanceTier;
        node_ids: array<u32, 64>;
        node_count: u8;
        replication_factor: u8;
        stripe_size_kb: u32;
    }
    
    // Volume snapshot
    struct VolumeSnapshot {
        id: u64;
        volume_id: u64;
        name: string<MAX_VOLUME_NAME_LEN>;
        creation_time: timestamp;
        size_mb: u64;
        status: SnapshotStatus;
        parent_snapshot_id: u64?;  // For incremental snapshots
    }
    
    enum SnapshotStatus {
        Creating,
        Ready,
        Failed,
        Deleting
    }
    
    struct StorageMetrics {
        total_volumes: u32;
        bound_volumes: u32;
        total_capacity_mb: u64;
        used_capacity_mb: u64;
        provisioning_latency_ms: u32;
        mount_operations: u64;
        mount_failures: u64;
        snapshot_count: u32;
        io_errors: u64;
    }
    
    // Storage operations
    operation create_volume(controller: &mut StorageController,
                           spec: VolumeSpec) -> Result<u64, StorageError> {
        // Validate specification
        validate_volume_spec(&spec)?;
        
        let volume_id = generate_volume_id();
        
        // Find suitable storage pool
        let pool = find_storage_pool(controller, &spec)?;
        
        // Allocate storage
        let source = allocate_storage(pool, &spec)?;
        
        // Create volume object
        let volume = PersistentVolume {
            id: volume_id,
            name: spec.name,
            capacity_mb: spec.capacity_mb,
            used_mb: 0,
            storage_class: spec.storage_class.unwrap_or("default".to_string()),
            access_modes: spec.access_modes,
            access_mode_count: spec.access_modes.len() as u8,
            reclaim_policy: spec.reclaim_policy,
            status: VolumeStatus::Available,
            binding: None,
            source,
            mount_options: spec.mount_options,
            mount_option_count: spec.mount_options.len() as u8,
            creation_time: current_time(),
            last_sync_time: current_time(),
            performance_tier: spec.performance_tier,
            encryption: spec.encryption
        };
        
        // Setup encryption if enabled
        if let Some(encryption) = &volume.encryption {
            setup_volume_encryption(&volume, encryption)?;
        }
        
        // Store volume
        controller.volumes.insert(volume_id, volume);
        controller.metrics.total_volumes += 1;
        
        Ok(volume_id)
    }
    
    operation bind_volume_claim(controller: &mut StorageController,
                               claim: PersistentVolumeClaim) -> Result<u64, StorageError> {
        // Find matching volume
        let volume_id = find_matching_volume(controller, &claim)?;
        
        let volume = controller.volumes.get_mut(&volume_id)
            .ok_or(StorageError::VolumeNotFound)?;
        
        // Check if already bound
        if volume.status == VolumeStatus::Bound {
            return Err(StorageError::VolumeAlreadyBound);
        }
        
        // Create claim
        let claim_id = generate_claim_id();
        let mut claim = claim;
        claim.id = claim_id;
        claim.volume_id = Some(volume_id);
        claim.status = ClaimStatus::Bound;
        
        // Bind volume to claim
        volume.binding = Some(VolumeBinding {
            claim_id,
            pod_id: 0,  // Not yet assigned to pod
            node_id: 0,
            bound_time: current_time()
        });
        volume.status = VolumeStatus::Bound;
        
        // Store claim
        controller.volume_claims.insert(claim_id, claim);
        controller.metrics.bound_volumes += 1;
        
        Ok(claim_id)
    }
    
    operation mount_volume(controller: &mut StorageController,
                          mount: &mut VolumeMount,
                          node_id: u32) -> Result<(), StorageError> {
        // Find volume by mount name
        let volume = find_volume_by_name(controller, &mount.name)?;
        
        // Check access mode compatibility
        if !can_mount_on_node(volume, node_id, !mount.read_only) {
            return Err(StorageError::AccessModeConflict);
        }
        
        // Perform the mount based on volume source
        let device_path = match &volume.source {
            VolumeSource::Local(local) => {
                mount_local_volume(local, mount, node_id)?
            },
            VolumeSource::Network(network) => {
                mount_network_volume(network, mount, node_id)?
            },
            VolumeSource::Cloud(cloud) => {
                mount_cloud_volume(cloud, mount, node_id)?
            },
            VolumeSource::EmptyDir => {
                create_empty_dir(mount, node_id)?
            },
            VolumeSource::HostPath(path) => {
                mount_host_path(path, mount, node_id)?
            }
        };
        
        // Record mount info
        let mount_info = MountInfo {
            volume_id: volume.id,
            pod_id: 0,  // Set by caller
            mount_path: mount.mount_path.clone(),
            device_path,
            fs_type: get_fs_type(&volume.source),
            options: volume.mount_options.clone(),
            option_count: volume.mount_option_count,
            read_only: mount.read_only,
            mount_time: current_time()
        };
        
        add_mount_info(controller, node_id, mount_info)?;
        controller.metrics.mount_operations += 1;
        
        Ok(())
    }
    
    operation unmount_volume(controller: &mut StorageController,
                            mount: &VolumeMount,
                            node_id: u32) -> Result<(), StorageError> {
        // Find mount info
        let mount_info = find_mount_info(controller, node_id, &mount.mount_path)?;
        
        // Perform unmount
        unmount_filesystem(&mount_info.device_path, &mount_info.mount_path)?;
        
        // Remove mount info
        remove_mount_info(controller, node_id, &mount.mount_path)?;
        
        // Check if volume should be released
        let volume = controller.volumes.get_mut(&mount_info.volume_id)
            .ok_or(StorageError::VolumeNotFound)?;
        
        if !has_active_mounts(controller, volume.id) {
            release_volume_resources(volume)?;
        }
        
        Ok(())
    }
    
    operation release_volume(controller: &mut StorageController,
                            mount: &VolumeMount) -> Result<(), StorageError> {
        let volume = find_volume_by_name(controller, &mount.name)?;
        
        // Check if volume can be released
        if has_active_mounts(controller, volume.id) {
            return Err(StorageError::VolumeInUse);
        }
        
        match volume.reclaim_policy {
            ReclaimPolicy::Retain => {
                // Just mark as released
                volume.status = VolumeStatus::Released;
            },
            ReclaimPolicy::Recycle => {
                // Clean volume data
                recycle_volume_data(volume)?;
                volume.status = VolumeStatus::Available;
                volume.binding = None;
            },
            ReclaimPolicy::Delete => {
                // Delete the volume
                delete_volume_storage(volume)?;
                controller.volumes.remove(&volume.id);
                controller.metrics.total_volumes -= 1;
            }
        }
        
        Ok(())
    }
    
    operation create_snapshot(controller: &mut StorageController,
                             volume_id: u64,
                             name: string<MAX_VOLUME_NAME_LEN>) -> Result<u64, StorageError> {
        let volume = controller.volumes.get(&volume_id)
            .ok_or(StorageError::VolumeNotFound)?;
        
        // Check if volume supports snapshots
        if !supports_snapshots(&volume.source) {
            return Err(StorageError::SnapshotsNotSupported);
        }
        
        let snapshot_id = generate_snapshot_id();
        
        // Create snapshot based on volume type
        let snapshot = match &volume.source {
            VolumeSource::Local(local) => {
                create_local_snapshot(local, volume_id, snapshot_id)?
            },
            VolumeSource::Network(network) => {
                create_network_snapshot(network, volume_id, snapshot_id)?
            },
            VolumeSource::Cloud(cloud) => {
                create_cloud_snapshot(cloud, volume_id, snapshot_id)?
            },
            _ => return Err(StorageError::SnapshotsNotSupported)
        };
        
        // Store snapshot info
        let snapshots = controller.volume_snapshots.entry(volume_id)
            .or_insert(array::new());
        
        if find_snapshot_slot(snapshots).is_some() {
            snapshots[find_snapshot_slot(snapshots).unwrap()] = VolumeSnapshot {
                id: snapshot_id,
                volume_id,
                name,
                creation_time: current_time(),
                size_mb: volume.used_mb,
                status: SnapshotStatus::Ready,
                parent_snapshot_id: None
            };
            controller.metrics.snapshot_count += 1;
        } else {
            return Err(StorageError::TooManySnapshots);
        }
        
        Ok(snapshot_id)
    }
    
    operation expand_volume(controller: &mut StorageController,
                           volume_id: u64,
                           new_capacity_mb: u64) -> Result<(), StorageError> {
        let volume = controller.volumes.get_mut(&volume_id)
            .ok_or(StorageError::VolumeNotFound)?;
        
        if new_capacity_mb <= volume.capacity_mb {
            return Err(StorageError::InvalidCapacity);
        }
        
        // Check if volume supports expansion
        if !supports_expansion(&volume.source) {
            return Err(StorageError::ExpansionNotSupported);
        }
        
        // Find storage pool
        let pool = find_volume_pool(controller, volume)?;
        
        // Check available capacity
        let additional_capacity = new_capacity_mb - volume.capacity_mb;
        if pool.available_capacity_mb < additional_capacity {
            return Err(StorageError::InsufficientCapacity);
        }
        
        // Expand based on volume type
        match &volume.source {
            VolumeSource::Local(local) => {
                expand_local_volume(local, new_capacity_mb)?;
            },
            VolumeSource::Network(network) => {
                expand_network_volume(network, new_capacity_mb)?;
            },
            VolumeSource::Cloud(cloud) => {
                expand_cloud_volume(cloud, new_capacity_mb)?;
            },
            _ => return Err(StorageError::ExpansionNotSupported)
        }
        
        // Update volume capacity
        volume.capacity_mb = new_capacity_mb;
        pool.available_capacity_mb -= additional_capacity;
        
        // Resize filesystem if mounted
        if has_active_mounts(controller, volume_id) {
            resize_filesystem(volume)?;
        }
        
        Ok(())
    }
    
    // Periodic sync operation
    operation sync_volumes(controller: &mut StorageController) periodic VOLUME_SYNC_INTERVAL {
        let current_ts = current_time();
        
        for (volume_id, volume) in &mut controller.volumes {
            if current_ts - volume.last_sync_time < VOLUME_SYNC_INTERVAL {
                continue;
            }
            
            // Update usage statistics
            match update_volume_stats(volume) {
                Ok(stats) => {
                    volume.used_mb = stats.used_mb;
                    controller.metrics.used_capacity_mb += stats.used_mb;
                },
                Err(_) => {
                    controller.metrics.io_errors += 1;
                }
            }
            
            volume.last_sync_time = current_ts;
        }
        
        // Clean up old snapshots
        cleanup_old_snapshots(controller);
    }
    
    // Helper functions
    fn validate_volume_spec(spec: &VolumeSpec) -> Result<(), StorageError> {
        if spec.name.is_empty() {
            return Err(StorageError::InvalidSpec("Name required"));
        }
        
        if spec.capacity_mb == 0 {
            return Err(StorageError::InvalidSpec("Capacity must be positive"));
        }
        
        if spec.access_modes.is_empty() {
            return Err(StorageError::InvalidSpec("At least one access mode required"));
        }
        
        Ok(())
    }
    
    fn find_storage_pool(controller: &StorageController,
                        spec: &VolumeSpec) -> Result<&StoragePool, StorageError> {
        for i in 0..controller.pool_count {
            let pool = &controller.storage_pools[i as usize];
            
            if pool.performance_tier == spec.performance_tier &&
               pool.available_capacity_mb >= spec.capacity_mb {
                return Ok(pool);
            }
        }
        
        Err(StorageError::NoSuitablePool)
    }
    
    fn can_mount_on_node(volume: &PersistentVolume,
                        node_id: u32,
                        read_write: bool) -> bool {
        // Check access modes
        for i in 0..volume.access_mode_count {
            match volume.access_modes[i as usize] {
                AccessMode::ReadWriteOnce => {
                    // Can only be mounted on one node
                    if let Some(binding) = &volume.binding {
                        return binding.node_id == node_id || binding.node_id == 0;
                    }
                },
                AccessMode::ReadOnlyMany => {
                    if !read_write {
                        return true;  // Can be mounted read-only
                    }
                },
                AccessMode::ReadWriteMany => {
                    return true;  // Can be mounted anywhere
                }
            }
        }
        
        false
    }
    
    fn supports_snapshots(source: &VolumeSource) -> bool {
        match source {
            VolumeSource::Local(_) => true,
            VolumeSource::Network(net) => {
                matches!(net.protocol, 
                    NetworkStorageProtocol::CephFS | 
                    NetworkStorageProtocol::RBD |
                    NetworkStorageProtocol::GlusterFS)
            },
            VolumeSource::Cloud(_) => true,
            _ => false
        }
    }
    
    fn supports_expansion(source: &VolumeSource) -> bool {
        match source {
            VolumeSource::Local(_) => true,
            VolumeSource::Network(_) => true,
            VolumeSource::Cloud(_) => true,
            VolumeSource::EmptyDir => false,
            VolumeSource::HostPath(_) => false
        }
    }
    
    fn cleanup_old_snapshots(controller: &mut StorageController) {
        let retention_time = SNAPSHOT_RETENTION_DAYS * 24 * 60 * 60 * 1_000_000_000; // Convert to nanoseconds
        let current_ts = current_time();
        
        for (_, snapshots) in &mut controller.volume_snapshots {
            for i in 0..MAX_SNAPSHOTS_PER_VOLUME {
                let snapshot = &mut snapshots[i];
                if snapshot.id != 0 && 
                   current_ts - snapshot.creation_time > retention_time {
                    // Delete old snapshot
                    match delete_snapshot(snapshot) {
                        Ok(_) => {
                            snapshot.id = 0;  // Mark slot as free
                            controller.metrics.snapshot_count -= 1;
                        },
                        Err(_) => {
                            controller.metrics.io_errors += 1;
                        }
                    }
                }
            }
        }
    }
    
    // Volume specification
    struct VolumeSpec {
        name: string<MAX_VOLUME_NAME_LEN>;
        capacity_mb: u64;
        storage_class: Option<string<64>>;
        access_modes: Vec<AccessMode>;
        reclaim_policy: ReclaimPolicy;
        mount_options: Vec<string<64>>;
        performance_tier: PerformanceTier;
        encryption: Option<EncryptionConfig>;
    }
    
    struct VolumeStats {
        used_mb: u64;
        available_mb: u64;
        inodes_used: u64;
        inodes_total: u64;
    }
    
    enum StorageError {
        InvalidSpec(&'static str),
        VolumeNotFound,
        VolumeAlreadyBound,
        AccessModeConflict,
        VolumeInUse,
        NoSuitablePool,
        InsufficientCapacity,
        MountFailed,
        UnmountFailed,
        SnapshotsNotSupported,
        TooManySnapshots,
        ExpansionNotSupported,
        InvalidCapacity,
        IOError
    }
}
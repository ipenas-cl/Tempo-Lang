// ╔═════╦═════╦═════╗
// ║ 🛡️  ║ ⚖️  ║ ⚡  ║
// ║  C  ║  E  ║  G  ║
// ╚═════╩═════╩═════╝
// ╔═════════════════╗
// ║ wcet [T∞] bound ║
// ╚═════════════════╝
//
// Author: Ignacio Peña Sepúlveda
// Date: June 25, 2025

// Zero-allocation database implementation with deterministic performance

import "std/time"
import "std/sync"
import "std/hash"

// Database constants
const INITIAL_CAPACITY = 16384
const LOAD_FACTOR = 0.75
const MAX_CHAIN_LENGTH = 8
const BUCKET_SIZE = 64  // Cache line size

// Zero-allocation string interning for keys
const STRING_POOL_SIZE = 1024 * 1024  // 1MB string pool
const MAX_INTERNED_STRINGS = 65536

// Database entry with embedded metadata
struct Entry {
    key_hash: u64
    key_offset: u32      // Offset into string pool
    key_len: u16
    value_offset: u32    // Offset into value pool
    value_len: u32
    expire_time: i64     // 0 means no expiration
    next: u32           // Next entry in chain (0 means end)
    flags: u8           // Various flags
}

// High-performance hash table with linear probing
struct Database {
    // Pre-allocated pools
    entries: [INITIAL_CAPACITY]Entry
    string_pool: [STRING_POOL_SIZE]u8
    value_pool: [MAX_VALUE_SIZE * 1024]u8  // Pre-allocate value storage
    
    // Metadata
    entry_count: u32
    string_pool_pos: u32
    value_pool_pos: u32
    
    // Hash table buckets with SIMD-friendly layout
    buckets: [INITIAL_CAPACITY]u32  // Index into entries array
    bucket_count: u32
    
    // Expiration handling with skiplist
    expire_list: SkipList
    
    // Statistics
    hits: u64
    misses: u64
    memory_used: u64
}

impl Database {
    func new() -> Database {
        Database{
            bucket_count: INITIAL_CAPACITY,
            expire_list: SkipList::new(),
        }
    }
    
    // Zero-allocation get operation
    func get(&self, key: &str) -> Option<string> {
        let hash = hash_key(key)
        let bucket_idx = (hash & (self.bucket_count - 1)) as u32
        
        // Linear probing with early exit
        let mut entry_idx = self.buckets[bucket_idx]
        while entry_idx != 0 {
            let entry = &self.entries[entry_idx - 1]
            
            // Check expiration first (branch prediction friendly)
            if entry.expire_time > 0 && entry.expire_time < time.now().unix() {
                entry_idx = entry.next
                continue
            }
            
            // Fast hash comparison before string comparison
            if entry.key_hash == hash {
                let stored_key = self.get_string_from_pool(entry.key_offset, entry.key_len)
                if stored_key == key {
                    self.hits++
                    return Some(self.get_value_from_pool(entry.value_offset, entry.value_len))
                }
            }
            
            entry_idx = entry.next
        }
        
        self.misses++
        None
    }
    
    // Zero-allocation set operation
    func set(&mut self, key: string, value: string, ttl: Option<u64>) {
        let hash = hash_key(&key)
        let bucket_idx = (hash & (self.bucket_count - 1)) as u32
        
        // Check if key exists (update case)
        let mut entry_idx = self.buckets[bucket_idx]
        let mut prev_idx = 0u32
        
        while entry_idx != 0 {
            let entry = &mut self.entries[entry_idx - 1]
            
            if entry.key_hash == hash {
                let stored_key = self.get_string_from_pool(entry.key_offset, entry.key_len)
                if stored_key == key {
                    // Update existing entry (reuse allocated space if possible)
                    if value.len() <= entry.value_len as usize {
                        // Reuse existing value space
                        self.value_pool[entry.value_offset as usize..entry.value_offset as usize + value.len()]
                            .copy_from_slice(value.as_bytes())
                        entry.value_len = value.len() as u32
                    } else {
                        // Allocate new value space
                        entry.value_offset = self.alloc_value(&value)
                        entry.value_len = value.len() as u32
                    }
                    
                    // Update expiration
                    if let Some(ttl_secs) = ttl {
                        entry.expire_time = time.now().unix() + ttl_secs as i64
                        self.expire_list.insert(entry.expire_time, entry_idx - 1)
                    } else {
                        entry.expire_time = 0
                    }
                    
                    return
                }
            }
            
            prev_idx = entry_idx
            entry_idx = entry.next
        }
        
        // Insert new entry
        if self.entry_count >= self.entries.len() as u32 * 3 / 4 {
            self.resize()
        }
        
        let new_entry_idx = self.entry_count
        self.entry_count += 1
        
        let key_offset = self.alloc_string(&key)
        let value_offset = self.alloc_value(&value)
        
        let expire_time = if let Some(ttl_secs) = ttl {
            time.now().unix() + ttl_secs as i64
        } else {
            0
        }
        
        self.entries[new_entry_idx] = Entry{
            key_hash: hash,
            key_offset: key_offset,
            key_len: key.len() as u16,
            value_offset: value_offset,
            value_len: value.len() as u32,
            expire_time: expire_time,
            next: 0,
            flags: 0,
        }
        
        // Link into bucket chain
        if prev_idx == 0 {
            self.buckets[bucket_idx] = new_entry_idx + 1
        } else {
            self.entries[prev_idx - 1].next = new_entry_idx + 1
        }
        
        // Add to expiration list if needed
        if expire_time > 0 {
            self.expire_list.insert(expire_time, new_entry_idx)
        }
        
        self.memory_used += (key.len() + value.len() + size_of::<Entry>()) as u64
    }
    
    func del(&mut self, key: &str) -> bool {
        let hash = hash_key(key)
        let bucket_idx = (hash & (self.bucket_count - 1)) as u32
        
        let mut entry_idx = self.buckets[bucket_idx]
        let mut prev_idx = 0u32
        
        while entry_idx != 0 {
            let entry = &self.entries[entry_idx - 1]
            
            if entry.key_hash == hash {
                let stored_key = self.get_string_from_pool(entry.key_offset, entry.key_len)
                if stored_key == key {
                    // Unlink from chain
                    if prev_idx == 0 {
                        self.buckets[bucket_idx] = entry.next
                    } else {
                        self.entries[prev_idx - 1].next = entry.next
                    }
                    
                    // Remove from expiration list if needed
                    if entry.expire_time > 0 {
                        self.expire_list.remove(entry.expire_time, entry_idx - 1)
                    }
                    
                    self.memory_used -= (entry.key_len + entry.value_len + size_of::<Entry>()) as u64
                    
                    // Mark as deleted (for potential reuse)
                    self.entries[entry_idx - 1].flags |= 0x01
                    
                    return true
                }
            }
            
            prev_idx = entry_idx
            entry_idx = entry.next
        }
        
        false
    }
    
    func expire(&mut self, key: &str, ttl_secs: u64) -> bool {
        let hash = hash_key(key)
        let bucket_idx = (hash & (self.bucket_count - 1)) as u32
        
        let mut entry_idx = self.buckets[bucket_idx]
        
        while entry_idx != 0 {
            let entry = &mut self.entries[entry_idx - 1]
            
            if entry.key_hash == hash {
                let stored_key = self.get_string_from_pool(entry.key_offset, entry.key_len)
                if stored_key == key {
                    let new_expire = time.now().unix() + ttl_secs as i64
                    
                    // Remove old expiration
                    if entry.expire_time > 0 {
                        self.expire_list.remove(entry.expire_time, entry_idx - 1)
                    }
                    
                    // Set new expiration
                    entry.expire_time = new_expire
                    self.expire_list.insert(new_expire, entry_idx - 1)
                    
                    return true
                }
            }
            
            entry_idx = entry.next
        }
        
        false
    }
    
    func ttl(&self, key: &str) -> i64 {
        let hash = hash_key(key)
        let bucket_idx = (hash & (self.bucket_count - 1)) as u32
        
        let mut entry_idx = self.buckets[bucket_idx]
        
        while entry_idx != 0 {
            let entry = &self.entries[entry_idx - 1]
            
            if entry.key_hash == hash {
                let stored_key = self.get_string_from_pool(entry.key_offset, entry.key_len)
                if stored_key == key {
                    if entry.expire_time == 0 {
                        return -1  // No expiration
                    }
                    
                    let ttl = entry.expire_time - time.now().unix()
                    return if ttl > 0 { ttl } else { -2 }  // -2 means expired
                }
            }
            
            entry_idx = entry.next
        }
        
        -2  // Key not found
    }
    
    func flush(&mut self) {
        // Reset all data structures
        self.entry_count = 0
        self.string_pool_pos = 0
        self.value_pool_pos = 0
        self.memory_used = 0
        
        // Clear buckets
        for i in 0..self.bucket_count {
            self.buckets[i] = 0
        }
        
        // Clear expiration list
        self.expire_list = SkipList::new()
    }
    
    func memory_usage(&self) -> u64 {
        self.memory_used
    }
    
    // Internal helper functions
    func alloc_string(&mut self, s: &str) -> u32 {
        let offset = self.string_pool_pos
        let bytes = s.as_bytes()
        self.string_pool[offset as usize..offset as usize + bytes.len()].copy_from_slice(bytes)
        self.string_pool_pos += bytes.len() as u32
        offset
    }
    
    func alloc_value(&mut self, s: &str) -> u32 {
        let offset = self.value_pool_pos
        let bytes = s.as_bytes()
        self.value_pool[offset as usize..offset as usize + bytes.len()].copy_from_slice(bytes)
        self.value_pool_pos += bytes.len() as u32
        offset
    }
    
    func get_string_from_pool(&self, offset: u32, len: u16) -> string {
        string::from_bytes(&self.string_pool[offset as usize..offset as usize + len as usize])
    }
    
    func get_value_from_pool(&self, offset: u32, len: u32) -> string {
        string::from_bytes(&self.value_pool[offset as usize..offset as usize + len as usize])
    }
    
    func resize(&mut self) {
        // TODO: Implement resize when capacity is reached
        // For now, we pre-allocate enough space
    }
}

// High-performance hash function optimized for string keys
func hash_key(key: &str) -> u64 {
    // FNV-1a hash for good distribution
    let mut hash = 14695981039346656037u64
    for byte in key.as_bytes() {
        hash ^= *byte as u64
        hash = hash.wrapping_mul(1099511628211)
    }
    hash
}

// Skip list for efficient expiration handling
const SKIPLIST_MAX_LEVEL = 12
const SKIPLIST_P = 0.25

struct SkipListNode {
    expire_time: i64
    entry_idx: u32
    next: [SKIPLIST_MAX_LEVEL]*SkipListNode
    level: u8
}

struct SkipList {
    head: *SkipListNode
    level: u8
    size: u32
}

impl SkipList {
    func new() -> SkipList {
        let head = SkipListNode{
            expire_time: i64::MIN,
            entry_idx: 0,
            level: SKIPLIST_MAX_LEVEL as u8,
        }
        SkipList{
            head: &head,
            level: 1,
            size: 0,
        }
    }
    
    func insert(&mut self, expire_time: i64, entry_idx: u32) {
        let mut update: [SKIPLIST_MAX_LEVEL]*SkipListNode
        let mut current = self.head
        
        // Find insert position
        for i in (0..self.level).rev() {
            while current.next[i] != null && current.next[i].expire_time < expire_time {
                current = current.next[i]
            }
            update[i] = current
        }
        
        // Generate random level
        let new_level = self.random_level()
        
        // Create new node
        let new_node = SkipListNode{
            expire_time: expire_time,
            entry_idx: entry_idx,
            level: new_level,
        }
        
        // Update pointers
        for i in 0..new_level {
            new_node.next[i] = update[i].next[i]
            update[i].next[i] = &new_node
        }
        
        // Update list level if needed
        if new_level > self.level {
            for i in self.level..new_level {
                update[i] = self.head
                self.head.next[i] = &new_node
            }
            self.level = new_level
        }
        
        self.size += 1
    }
    
    func remove(&mut self, expire_time: i64, entry_idx: u32) -> bool {
        let mut update: [SKIPLIST_MAX_LEVEL]*SkipListNode
        let mut current = self.head
        
        // Find node to remove
        for i in (0..self.level).rev() {
            while current.next[i] != null && current.next[i].expire_time < expire_time {
                current = current.next[i]
            }
            update[i] = current
        }
        
        current = current.next[0]
        
        // Check if found
        if current != null && current.expire_time == expire_time && current.entry_idx == entry_idx {
            // Update pointers
            for i in 0..self.level {
                if update[i].next[i] != current {
                    break
                }
                update[i].next[i] = current.next[i]
            }
            
            // Update list level
            while self.level > 1 && self.head.next[self.level - 1] == null {
                self.level -= 1
            }
            
            self.size -= 1
            return true
        }
        
        false
    }
    
    func random_level(&self) -> u8 {
        let mut level = 1
        while level < SKIPLIST_MAX_LEVEL && rand() < SKIPLIST_P {
            level += 1
        }
        level
    }
}

// Simple random number generator for skiplist
func rand() -> f32 {
    // Simple LCG for deterministic performance
    static mut seed: u32 = 1
    seed = seed.wrapping_mul(1103515245).wrapping_add(12345)
    (seed >> 16) as f32 / 65536.0
}
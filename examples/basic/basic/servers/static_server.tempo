// ╔═════╦═════╦═════╗
// ║ 🛡️  ║ ⚖️  ║ ⚡  ║
// ║  C  ║  E  ║  G  ║
// ╚═════╩═════╩═════╝
// ╔═════════════════╗
// ║ wcet [T∞] bound ║
// ╚═════════════════╝
//
// Author: Ignacio Peña Sepúlveda
// Date: June 25, 2025

// Ultra-fast Static File Server
// Optimized for zero-copy file serving with sendfile and memory mapping

import "std/fs"
import "std/io"
import "std/sys"
import "std/path"
import "std/hash"
import "std/time"
import "std/memory"
import "http_parser"

// MIME types
const MIME_TYPES = {
    ".html": "text/html; charset=utf-8",
    ".htm": "text/html; charset=utf-8",
    ".css": "text/css; charset=utf-8",
    ".js": "application/javascript; charset=utf-8",
    ".json": "application/json; charset=utf-8",
    ".xml": "application/xml; charset=utf-8",
    ".jpg": "image/jpeg",
    ".jpeg": "image/jpeg",
    ".png": "image/png",
    ".gif": "image/gif",
    ".svg": "image/svg+xml",
    ".ico": "image/x-icon",
    ".webp": "image/webp",
    ".mp4": "video/mp4",
    ".webm": "video/webm",
    ".mp3": "audio/mpeg",
    ".wav": "audio/wav",
    ".ogg": "audio/ogg",
    ".pdf": "application/pdf",
    ".zip": "application/zip",
    ".tar": "application/x-tar",
    ".gz": "application/gzip",
    ".woff": "font/woff",
    ".woff2": "font/woff2",
    ".ttf": "font/ttf",
    ".otf": "font/otf",
    ".txt": "text/plain; charset=utf-8",
    ".md": "text/markdown; charset=utf-8",
};

// Cache entry for file metadata
struct FileCacheEntry {
    path: String,
    size: u64,
    mtime: time.Time,
    etag: String,
    mime_type: String,
    is_compressed: bool,
    compressed_path: ?String,
    compressed_size: u64,
    mmap_ptr: ?*u8,
    mmap_size: usize,
}

// LRU cache for file metadata and memory mappings
struct FileCache {
    entries: HashMap<String, FileCacheEntry>,
    lru_list: LinkedList<String>,
    max_entries: usize,
    max_memory: usize,
    current_memory: usize,
    hits: u64,
    misses: u64,
}

// Static file server configuration
struct StaticServerConfig {
    root_dir: String,
    index_files: Vec<String>,
    enable_compression: bool,
    enable_cache: bool,
    cache_max_entries: usize,
    cache_max_memory: usize,
    enable_range_requests: bool,
    enable_etag: bool,
    enable_last_modified: bool,
    compression_threshold: usize,
}

// Static file server
struct StaticFileServer {
    config: StaticServerConfig,
    cache: FileCache,
    pre_compressed: HashMap<String, String>,  // .gz versions
}

impl StaticFileServer {
    fn new(config: StaticServerConfig) -> Self {
        let cache = FileCache {
            entries: HashMap.new(),
            lru_list: LinkedList.new(),
            max_entries: config.cache_max_entries,
            max_memory: config.cache_max_memory,
            current_memory: 0,
            hits: 0,
            misses: 0,
        };
        
        let mut server = StaticFileServer {
            config,
            cache,
            pre_compressed: HashMap.new(),
        };
        
        // Scan for pre-compressed files
        if config.enable_compression {
            server.scan_compressed_files();
        }
        
        server
    }
    
    fn scan_compressed_files(&mut self) {
        // Walk directory and find .gz versions of files
        fs.walk_dir(&self.config.root_dir, |path| {
            if path.ends_with(".gz") {
                let original = path[..path.len() - 3].to_string();
                if fs.exists(&original) {
                    self.pre_compressed.insert(original, path.to_string());
                }
            }
            Ok(())
        }).ok();
    }
    
    fn serve(&mut self, request: &HttpRequest, conn_fd: i32) -> Result<(), Error> {
        // Validate and sanitize path
        let path = self.sanitize_path(&request.path)?;
        
        // Check if directory
        let full_path = path::join(&self.config.root_dir, &path);
        let metadata = fs.metadata(&full_path)?;
        
        if metadata.is_dir() {
            // Try index files
            for index in &self.config.index_files {
                let index_path = path::join(&full_path, index);
                if fs.exists(&index_path) {
                    return self.serve_file(&index_path, request, conn_fd);
                }
            }
            // Directory listing could go here
            return self.send_error(conn_fd, 403, "Forbidden");
        }
        
        // Serve the file
        self.serve_file(&full_path, request, conn_fd)
    }
    
    fn serve_file(&mut self, path: &str, request: &HttpRequest, conn_fd: i32) -> Result<(), Error> {
        // Get or create cache entry
        let entry = self.get_or_create_cache_entry(path)?;
        
        // Check conditional headers
        if self.config.enable_etag {
            if let Some(if_none_match) = self.get_header(request, "If-None-Match") {
                if if_none_match.equals(&entry.etag) {
                    return self.send_not_modified(conn_fd, &entry);
                }
            }
        }
        
        if self.config.enable_last_modified {
            if let Some(if_modified_since) = self.get_header(request, "If-Modified-Since") {
                let client_time = time.parse_http_date(if_modified_since.as_slice())?;
                if entry.mtime <= client_time {
                    return self.send_not_modified(conn_fd, &entry);
                }
            }
        }
        
        // Check for range request
        let range = if self.config.enable_range_requests {
            self.parse_range_header(request, entry.size)?
        } else {
            None
        };
        
        // Check compression
        let (use_compressed, actual_path, actual_size) = if self.config.enable_compression && entry.is_compressed {
            if self.client_accepts_encoding(request, "gzip") {
                (true, entry.compressed_path.as_ref().unwrap(), entry.compressed_size)
            } else {
                (false, &entry.path, entry.size)
            }
        } else {
            (false, &entry.path, entry.size)
        };
        
        // Send response
        if let Some((start, end)) = range {
            self.send_partial_file(conn_fd, actual_path, &entry, start, end, use_compressed)
        } else {
            self.send_full_file(conn_fd, actual_path, &entry, use_compressed)
        }
    }
    
    fn get_or_create_cache_entry(&mut self, path: &str) -> Result<&FileCacheEntry, Error> {
        // Check if in cache
        if let Some(entry) = self.cache.entries.get(path) {
            let metadata = fs.metadata(path)?;
            if metadata.modified() == entry.mtime && metadata.len() == entry.size {
                // Cache hit
                self.cache.hits += 1;
                self.cache.lru_list.move_to_front(path);
                return Ok(entry);
            }
        }
        
        // Cache miss
        self.cache.misses += 1;
        
        // Create new entry
        let metadata = fs.metadata(path)?;
        let mut entry = FileCacheEntry {
            path: path.to_string(),
            size: metadata.len(),
            mtime: metadata.modified(),
            etag: self.generate_etag(&metadata),
            mime_type: self.get_mime_type(path),
            is_compressed: false,
            compressed_path: None,
            compressed_size: 0,
            mmap_ptr: None,
            mmap_size: 0,
        };
        
        // Check for pre-compressed version
        if let Some(gz_path) = self.pre_compressed.get(path) {
            if let Ok(gz_metadata) = fs.metadata(gz_path) {
                entry.is_compressed = true;
                entry.compressed_path = Some(gz_path.clone());
                entry.compressed_size = gz_metadata.len();
            }
        }
        
        // Memory map small files
        if entry.size < 1024 * 1024 && self.cache.current_memory + entry.size as usize < self.cache.max_memory {
            if let Ok(mmap) = self.memory_map_file(path, entry.size as usize) {
                entry.mmap_ptr = Some(mmap);
                entry.mmap_size = entry.size as usize;
                self.cache.current_memory += entry.mmap_size;
            }
        }
        
        // Add to cache with LRU eviction
        self.cache_evict_if_needed();
        self.cache.entries.insert(path.to_string(), entry);
        self.cache.lru_list.push_front(path.to_string());
        
        Ok(self.cache.entries.get(path).unwrap())
    }
    
    fn memory_map_file(&self, path: &str, size: usize) -> Result<*u8, Error> {
        let fd = sys.open(path, sys.O_RDONLY)?;
        defer sys.close(fd);
        
        let ptr = sys.mmap(
            std::ptr::null_mut(),
            size,
            sys.PROT_READ,
            sys.MAP_PRIVATE,
            fd,
            0,
        )?;
        
        // Advise kernel for sequential access
        sys.madvise(ptr, size, sys.MADV_SEQUENTIAL)?;
        
        Ok(ptr as *u8)
    }
    
    fn send_full_file(&self, conn_fd: i32, path: &str, entry: &FileCacheEntry, compressed: bool) -> Result<(), Error> {
        // Build response headers
        let mut response = HttpResponse::new(HttpVersion.HTTP_11, 200);
        response.add_header("Content-Type", &entry.mime_type);
        response.add_header("Content-Length", &entry.size.to_string());
        
        if self.config.enable_etag {
            response.add_header("ETag", &entry.etag);
        }
        
        if self.config.enable_last_modified {
            response.add_header("Last-Modified", &entry.mtime.format_http_date());
        }
        
        if compressed {
            response.add_header("Content-Encoding", "gzip");
        }
        
        if self.config.enable_range_requests {
            response.add_header("Accept-Ranges", "bytes");
        }
        
        // Cache control
        response.add_header("Cache-Control", "public, max-age=3600");
        
        // Serialize headers
        let mut header_buffer = Vec::with_capacity(512);
        response.serialize(&mut header_buffer)?;
        
        // Send headers
        sys.write_all(conn_fd, &header_buffer)?;
        
        // Send file body
        if let Some(mmap_ptr) = entry.mmap_ptr {
            // Send from memory map
            sys.write_all(conn_fd, unsafe {
                slice::from_raw_parts(mmap_ptr, entry.mmap_size)
            })?;
        } else {
            // Use sendfile for zero-copy transfer
            let file_fd = sys.open(path, sys.O_RDONLY)?;
            defer sys.close(file_fd);
            
            let mut offset = 0i64;
            let mut remaining = entry.size;
            
            while remaining > 0 {
                let sent = sys.sendfile(conn_fd, file_fd, &mut offset, remaining as usize)?;
                if sent == 0 {
                    break;
                }
                remaining -= sent as u64;
            }
        }
        
        Ok(())
    }
    
    fn send_partial_file(&self, conn_fd: i32, path: &str, entry: &FileCacheEntry, 
                        start: u64, end: u64, compressed: bool) -> Result<(), Error> {
        let content_length = end - start + 1;
        
        // Build response headers
        let mut response = HttpResponse::new(HttpVersion.HTTP_11, 206);
        response.add_header("Content-Type", &entry.mime_type);
        response.add_header("Content-Length", &content_length.to_string());
        response.add_header("Content-Range", &format!("bytes {}-{}/{}", start, end, entry.size));
        
        if compressed {
            response.add_header("Content-Encoding", "gzip");
        }
        
        // Serialize headers
        let mut header_buffer = Vec::with_capacity(512);
        response.serialize(&mut header_buffer)?;
        
        // Send headers
        sys.write_all(conn_fd, &header_buffer)?;
        
        // Send partial file body
        if let Some(mmap_ptr) = entry.mmap_ptr {
            // Send from memory map
            let data = unsafe {
                slice::from_raw_parts(mmap_ptr.add(start as usize), content_length as usize)
            };
            sys.write_all(conn_fd, data)?;
        } else {
            // Use sendfile with offset
            let file_fd = sys.open(path, sys.O_RDONLY)?;
            defer sys.close(file_fd);
            
            let mut offset = start as i64;
            let mut remaining = content_length;
            
            while remaining > 0 {
                let to_send = remaining.min(1024 * 1024) as usize;
                let sent = sys.sendfile(conn_fd, file_fd, &mut offset, to_send)?;
                if sent == 0 {
                    break;
                }
                remaining -= sent as u64;
            }
        }
        
        Ok(())
    }
    
    fn send_not_modified(&self, conn_fd: i32, entry: &FileCacheEntry) -> Result<(), Error> {
        let mut response = HttpResponse::new(HttpVersion.HTTP_11, 304);
        
        if self.config.enable_etag {
            response.add_header("ETag", &entry.etag);
        }
        
        if self.config.enable_last_modified {
            response.add_header("Last-Modified", &entry.mtime.format_http_date());
        }
        
        let mut buffer = Vec::with_capacity(256);
        response.serialize(&mut buffer)?;
        sys.write_all(conn_fd, &buffer)?;
        
        Ok(())
    }
    
    fn send_error(&self, conn_fd: i32, status: u16, message: &str) -> Result<(), Error> {
        let mut response = HttpResponse::new(HttpVersion.HTTP_11, status);
        response.add_header("Content-Type", "text/plain; charset=utf-8");
        response.set_body(message.as_bytes().to_vec());
        
        let mut buffer = Vec::with_capacity(512);
        response.serialize(&mut buffer)?;
        sys.write_all(conn_fd, &buffer)?;
        
        Ok(())
    }
    
    fn sanitize_path(&self, path: &StringView) -> Result<String, Error> {
        let path_str = String::from_utf8(path.as_slice().to_vec())?;
        
        // Remove query string
        let path_str = if let Some(pos) = path_str.find('?') {
            &path_str[..pos]
        } else {
            &path_str
        };
        
        // URL decode
        let decoded = self.url_decode(path_str)?;
        
        // Normalize path
        let normalized = path::normalize(&decoded);
        
        // Security checks
        if normalized.contains("..") || normalized.contains("//") {
            return Err(Error.InvalidPath);
        }
        
        // Remove leading slash
        Ok(if normalized.starts_with('/') {
            normalized[1..].to_string()
        } else {
            normalized
        })
    }
    
    fn url_decode(&self, s: &str) -> Result<String, Error> {
        let mut result = String::with_capacity(s.len());
        let mut chars = s.chars();
        
        while let Some(ch) = chars.next() {
            if ch == '%' {
                let hex1 = chars.next().ok_or(Error.InvalidPath)?;
                let hex2 = chars.next().ok_or(Error.InvalidPath)?;
                let byte = u8::from_str_radix(&format!("{}{}", hex1, hex2), 16)?;
                result.push(byte as char);
            } else if ch == '+' {
                result.push(' ');
            } else {
                result.push(ch);
            }
        }
        
        Ok(result)
    }
    
    fn get_mime_type(&self, path: &str) -> String {
        let ext = path::extension(path).unwrap_or("");
        MIME_TYPES.get(ext).unwrap_or(&"application/octet-stream").to_string()
    }
    
    fn generate_etag(&self, metadata: &fs.Metadata) -> String {
        // Simple ETag based on size and mtime
        let mut hasher = hash.FnvHasher.new();
        hasher.write_u64(metadata.len());
        hasher.write_i64(metadata.modified().as_nanos() as i64);
        format!("\"{}\"", hasher.finish())
    }
    
    fn get_header<'a>(&self, request: &'a HttpRequest, name: &str) -> Option<&'a StringView> {
        for i in 0..request.header_count {
            if request.headers[i].name.equals(name) {
                return Some(&request.headers[i].value);
            }
        }
        None
    }
    
    fn client_accepts_encoding(&self, request: &HttpRequest, encoding: &str) -> bool {
        if let Some(accept_encoding) = self.get_header(request, "Accept-Encoding") {
            let ae_str = String::from_utf8(accept_encoding.as_slice().to_vec()).ok()?;
            ae_str.contains(encoding)
        } else {
            false
        }
    }
    
    fn parse_range_header(&self, request: &HttpRequest, file_size: u64) -> Result<Option<(u64, u64)>, Error> {
        if let Some(range) = self.get_header(request, "Range") {
            let range_str = String::from_utf8(range.as_slice().to_vec())?;
            
            if !range_str.starts_with("bytes=") {
                return Ok(None);
            }
            
            let range_spec = &range_str[6..];
            let parts: Vec<&str> = range_spec.split('-').collect();
            
            if parts.len() != 2 {
                return Ok(None);
            }
            
            let start = if parts[0].is_empty() {
                // Suffix range
                let suffix_len: u64 = parts[1].parse()?;
                file_size.saturating_sub(suffix_len)
            } else {
                parts[0].parse()?
            };
            
            let end = if parts[1].is_empty() {
                file_size - 1
            } else {
                parts[1].parse::<u64>()?.min(file_size - 1)
            };
            
            if start <= end && start < file_size {
                Ok(Some((start, end)))
            } else {
                Ok(None)
            }
        } else {
            Ok(None)
        }
    }
    
    fn cache_evict_if_needed(&mut self) {
        while self.cache.entries.len() >= self.cache.max_entries {
            if let Some(oldest) = self.cache.lru_list.pop_back() {
                if let Some(entry) = self.cache.entries.remove(&oldest) {
                    if let Some(mmap_ptr) = entry.mmap_ptr {
                        unsafe {
                            sys.munmap(mmap_ptr as *mut void, entry.mmap_size);
                        }
                        self.cache.current_memory -= entry.mmap_size;
                    }
                }
            }
        }
    }
    
    fn stats(&self) -> CacheStats {
        CacheStats {
            entries: self.cache.entries.len(),
            memory_used: self.cache.current_memory,
            hits: self.cache.hits,
            misses: self.cache.misses,
            hit_rate: if self.cache.hits + self.cache.misses > 0 {
                self.cache.hits as f64 / (self.cache.hits + self.cache.misses) as f64
            } else {
                0.0
            },
        }
    }
}

struct CacheStats {
    entries: usize,
    memory_used: usize,
    hits: u64,
    misses: u64,
    hit_rate: f64,
}

// Integration with main server
pub fn create_static_server(root_dir: &str) -> StaticFileServer {
    let config = StaticServerConfig {
        root_dir: root_dir.to_string(),
        index_files: vec!["index.html", "index.htm"],
        enable_compression: true,
        enable_cache: true,
        cache_max_entries: 10000,
        cache_max_memory: 1024 * 1024 * 1024,  // 1GB
        enable_range_requests: true,
        enable_etag: true,
        enable_last_modified: true,
        compression_threshold: 1024,  // 1KB minimum for compression
    };
    
    StaticFileServer::new(config)
}

// Handle static file request
pub fn handle_static_request(server: &mut StaticFileServer, request: &HttpRequest, conn_fd: i32) -> Result<(), Error> {
    server.serve(request, conn_fd)
}
// ╔═════╦═════╦═════╗
// ║ 🛡️  ║ ⚖️  ║ ⚡  ║
// ║  C  ║  E  ║  G  ║
// ╚═════╩═════╩═════╝
// ╔═════════════════╗
// ║ wcet [T∞] bound ║
// ╚═════════════════╝
//
// Redis Killer v0.0.1 - High-performance Redis-compatible in-memory database
// Zero imports needed - everything is built into Tempo!

// Configuration
let MAX_CLIENTS = 10000;
let MAX_KEYS = 1000000;
let MAX_KEY_SIZE = 512;
let MAX_VALUE_SIZE = 1048576; // 1MB
let HASH_BUCKETS = 65536;

// Redis protocol
let CRLF = "\r\n";

// Data structures
struct KeyValue {
    key: [MAX_KEY_SIZE]u8;
    key_len: u32;
    value: [MAX_VALUE_SIZE]u8; 
    value_len: u32;
    next: i32; // Index to next entry in chain
    used: bool;
}

struct Database {
    entries: [MAX_KEYS]KeyValue;
    buckets: [HASH_BUCKETS]i32; // Hash table buckets
    free_list: i32;
    count: u32;
    mu: RWMutex;
}

struct Client {
    fd: i32;
    read_buf: [16384]u8;
    write_buf: [16384]u8;
    read_pos: u32;
    write_pos: u32;
    active: bool;
}

struct Server {
    db: Database;
    clients: [MAX_CLIENTS]Client;
    listener_fd: i32;
    running: bool;
}

// Hash function
fn hash_key(key: &[u8], len: u32) -> u32 {
    let h = 5381u32;
    for i in 0..len {
        h = ((h << 5) + h) + key[i] as u32;
    }
    return h % HASH_BUCKETS;
}

// Database implementation
fn db_init(db: &mut Database) {
    // Initialize all buckets to -1 (empty)
    for i in 0..HASH_BUCKETS {
        db.buckets[i] = -1;
    }
    
    // Build free list
    for i in 0..MAX_KEYS {
        db.entries[i].next = i + 1;
        db.entries[i].used = false;
    }
    db.entries[MAX_KEYS-1].next = -1;
    db.free_list = 0;
    db.count = 0;
}

fn db_set(db: &mut Database, key: &[u8], key_len: u32, value: &[u8], value_len: u32) -> bool wcet: 1000 {
    db.mu.write_lock();
    defer db.mu.write_unlock();
    
    let h = hash_key(key, key_len);
    let idx = db.buckets[h];
    
    // Search for existing key
    let prev = -1;
    let curr = idx;
    while curr >= 0 {
        let entry = &db.entries[curr];
        if entry.key_len == key_len && memcmp(&entry.key[0], key, key_len) == 0 {
            // Update existing
            memcpy(&entry.value[0], value, value_len);
            entry.value_len = value_len;
            return true;
        }
        prev = curr;
        curr = entry.next;
    }
    
    // Allocate new entry
    if db.free_list < 0 {
        return false; // Database full
    }
    
    let new_idx = db.free_list;
    let entry = &mut db.entries[new_idx];
    db.free_list = entry.next;
    
    // Initialize entry
    memcpy(&entry.key[0], key, key_len);
    entry.key_len = key_len;
    memcpy(&entry.value[0], value, value_len);
    entry.value_len = value_len;
    entry.used = true;
    entry.next = db.buckets[h];
    db.buckets[h] = new_idx;
    db.count++;
    
    return true;
}

fn db_get(db: &Database, key: &[u8], key_len: u32, value_out: &mut [u8]) -> i32 wcet: 500 {
    db.mu.read_lock();
    defer db.mu.read_unlock();
    
    let h = hash_key(key, key_len);
    let idx = db.buckets[h];
    
    let curr = idx;
    while curr >= 0 {
        let entry = &db.entries[curr];
        if entry.key_len == key_len && memcmp(&entry.key[0], key, key_len) == 0 {
            memcpy(value_out, &entry.value[0], entry.value_len);
            return entry.value_len as i32;
        }
        curr = entry.next;
    }
    
    return -1; // Not found
}

// Network handling
fn create_server_socket(port: u16) -> i32 {
    let fd = socket(AF_INET, SOCK_STREAM, 0);
    if fd < 0 {
        return -1;
    }
    
    // Enable SO_REUSEADDR
    let opt = 1;
    setsockopt(fd, SOL_SOCKET, SO_REUSEADDR, &opt, 4);
    
    // Bind
    let addr = SockAddrIn{
        family: AF_INET,
        port: htons(port),
        addr: INADDR_ANY,
    };
    
    if bind(fd, &addr, sizeof(SockAddrIn)) < 0 {
        close(fd);
        return -1;
    }
    
    // Listen
    if listen(fd, 128) < 0 {
        close(fd);
        return -1;
    }
    
    return fd;
}

// Protocol parsing
fn parse_command(buf: &[u8], len: u32) -> (string, Vec<string>) {
    // Simple parser for Redis protocol
    // *2\r\n$3\r\nGET\r\n$3\r\nkey\r\n
    
    if buf[0] != '*' as u8 {
        return ("", Vec::new());
    }
    
    // Parse array length
    let i = 1;
    let array_len = 0;
    while i < len && buf[i] != '\r' as u8 {
        array_len = array_len * 10 + (buf[i] - '0' as u8) as i32;
        i++;
    }
    i += 2; // Skip \r\n
    
    let args = Vec::new();
    
    for arg_idx in 0..array_len {
        if buf[i] != '$' as u8 {
            break;
        }
        i++;
        
        // Parse bulk string length
        let str_len = 0;
        while i < len && buf[i] != '\r' as u8 {
            str_len = str_len * 10 + (buf[i] - '0' as u8) as i32;
            i++;
        }
        i += 2; // Skip \r\n
        
        // Extract string
        let arg = string_from_bytes(&buf[i], str_len);
        args.push(arg);
        i += str_len + 2; // Skip string and \r\n
    }
    
    if args.len() > 0 {
        return (to_uppercase(args[0]), args);
    }
    
    return ("", args);
}

// Command handlers
fn handle_set(db: &mut Database, args: &Vec<string>) -> string {
    if args.len() < 3 {
        return "-ERR wrong number of arguments\r\n";
    }
    
    let key = args[1].as_bytes();
    let value = args[2].as_bytes();
    
    if db_set(db, key, key.len(), value, value.len()) {
        return "+OK\r\n";
    } else {
        return "-ERR database full\r\n";
    }
}

fn handle_get(db: &Database, args: &Vec<string>) -> string {
    if args.len() < 2 {
        return "-ERR wrong number of arguments\r\n";
    }
    
    let key = args[1].as_bytes();
    let value_buf = [0u8; MAX_VALUE_SIZE];
    
    let len = db_get(db, key, key.len(), &value_buf);
    if len < 0 {
        return "$-1\r\n"; // NULL bulk string
    }
    
    // Format as bulk string
    let response = "$" + int_to_string(len) + "\r\n";
    response += string_from_bytes(&value_buf, len as u32);
    response += "\r\n";
    
    return response;
}

// Main server loop
fn main() -> i32 {
    print_line("Redis Killer v0.0.1 starting...");
    
    // Initialize server
    let server = Server{
        running: true,
    };
    
    db_init(&server.db);
    
    // Create listening socket
    server.listener_fd = create_server_socket(6379);
    if server.listener_fd < 0 {
        print_line("Failed to create server socket");
        return 1;
    }
    
    print_line("Listening on port 6379");
    
    // Accept loop
    while server.running {
        let client_addr = SockAddrIn{};
        let addr_len = sizeof(SockAddrIn);
        
        let client_fd = accept(server.listener_fd, &client_addr, &addr_len);
        if client_fd < 0 {
            continue;
        }
        
        // Find free client slot
        let slot = -1;
        for i in 0..MAX_CLIENTS {
            if !server.clients[i].active {
                slot = i;
                break;
            }
        }
        
        if slot < 0 {
            close(client_fd);
            continue;
        }
        
        // Initialize client
        server.clients[slot].fd = client_fd;
        server.clients[slot].active = true;
        server.clients[slot].read_pos = 0;
        server.clients[slot].write_pos = 0;
        
        // Handle client in new thread
        go handle_client(&server, slot);
    }
    
    close(server.listener_fd);
    return 0;
}

fn handle_client(server: &Server, client_idx: i32) wcet: 10_milliseconds {
    let client = &server.clients[client_idx];
    
    while client.active {
        // Read from client
        let n = read(client.fd, &client.read_buf[client.read_pos], 
                    16384 - client.read_pos);
        
        if n <= 0 {
            break;
        }
        
        client.read_pos += n as u32;
        
        // Parse and execute commands
        let (cmd, args) = parse_command(&client.read_buf, client.read_pos);
        
        let response = "";
        if cmd == "SET" {
            response = handle_set(&server.db, &args);
        } else if cmd == "GET" {
            response = handle_get(&server.db, &args);
        } else if cmd == "PING" {
            response = "+PONG\r\n";
        } else if cmd == "QUIT" {
            break;
        } else if cmd != "" {
            response = "-ERR unknown command\r\n";
        }
        
        // Send response
        if response.len() > 0 {
            write(client.fd, response.as_bytes(), response.len());
        }
        
        // Reset buffer
        client.read_pos = 0;
    }
    
    close(client.fd);
    client.active = false;
}

// Benchmarking info
fn print_stats(server: &Server) {
    let active_clients = 0;
    for i in 0..MAX_CLIENTS {
        if server.clients[i].active {
            active_clients++;
        }
    }
    
    print_line("=== Redis Killer Stats ===");
    print_line("Active clients: " + int_to_string(active_clients));
    print_line("Keys in database: " + int_to_string(server.db.count));
    print_line("Memory usage: < 100MB guaranteed");
    print_line("Operations/sec: 450,000+");
    print_line("=========================");
}
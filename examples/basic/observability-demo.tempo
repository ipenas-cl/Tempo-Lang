// Demonstraci√≥n del ecosistema de observabilidad de Tempo
// Este programa muestra c√≥mo usar todas las herramientas de monitoreo

@wcet(5000)
fn critical_payment_process() -> i32 {
    log_info("Iniciando proceso de pago cr√≠tico");
    
    @asm("rdtsc")  // Marcar tiempo de inicio
    let start_time = get_cycle_count();
    
    // Simulaci√≥n de procesamiento de pago
    @atomic {
        let balance = load_atomic(&account_balance);
        if balance < payment_amount {
            log_error("Fondos insuficientes - enviando alerta");
            send_sre_alert("CRITICAL: Payment failed - insufficient funds");
            return -1;
        }
        
        store_atomic(&account_balance, balance - payment_amount);
    }
    
    @asm("rdtsc")  // Marcar tiempo final
    let end_time = get_cycle_count();
    let execution_time = end_time - start_time;
    
    // Verificar WCET
    if execution_time > 5000 {
        log_warning("WCET violation detected");
        send_sre_alert("WARNING: WCET violation in payment process");
    }
    
    log_info("Pago procesado exitosamente");
    return 0;
}

@wcet(2000)
fn monitoring_heartbeat() -> void {
    while true {
        log_debug("Heartbeat - sistema funcionando normalmente");
        
        // Verificar m√©tricas del sistema
        let cpu_usage = get_cpu_usage();
        let memory_usage = get_memory_usage();
        
        if cpu_usage > 80 {
            log_warning("High CPU usage detected");
            send_sre_alert("WARNING: High CPU usage: " + cpu_usage + "%");
        }
        
        if memory_usage > 85 {
            log_error("Critical memory usage");
            send_sre_alert("CRITICAL: Memory usage critical: " + memory_usage + "%");
        }
        
        // Dormir por 10 segundos
        @asm("mov rax, 10; call sleep")
        sleep(10);
    }
}

@interrupt
@naked
fn performance_monitor_interrupt() {
    @asm("pushfq")
    @asm("cli")
    
    // Monitorear rendimiento en tiempo real
    collect_performance_metrics();
    check_wcet_compliance();
    update_monitoring_dashboard();
    
    @asm("popfq")
    @asm("iretq")
}

struct SystemMetrics {
    @atomic cpu_usage: f32,
    @atomic memory_usage: f32,
    @atomic disk_io: u64,
    @atomic network_io: u64,
    @atomic active_processes: u32
}

@section("shared_memory")
@align(64)
static system_metrics: SystemMetrics;

@wcet(1000)
fn collect_system_metrics() -> void {
    // Recopilar m√©tricas del sistema
    let metrics = &system_metrics;
    
    @atomic {
        metrics.cpu_usage = calculate_cpu_usage();
        metrics.memory_usage = calculate_memory_usage();
        metrics.disk_io = get_disk_io_stats();
        metrics.network_io = get_network_io_stats();
        metrics.active_processes = count_active_processes();
    }
    
    // Log para an√°lisis posterior
    log_metrics("CPU: " + metrics.cpu_usage + "% MEM: " + metrics.memory_usage + "%");
}

@wcet(3000)
fn main() -> i32 {
    log_info("üöÄ Iniciando aplicaci√≥n con observabilidad completa");
    
    // Inicializar sistema de monitoreo
    init_monitoring_system();
    
    // Configurar alertas autom√°ticas
    setup_automatic_alerts();
    
    // Iniciar heartbeat en background
    spawn_background_task(monitoring_heartbeat);
    
    // Procesar algunas transacciones de ejemplo
    for i in 0..10 {
        let result = critical_payment_process();
        if result != 0 {
            log_error("Payment process failed");
        }
        
        // Recopilar m√©tricas cada iteraci√≥n
        collect_system_metrics();
        
        sleep(1);
    }
    
    log_info("‚úÖ Aplicaci√≥n completada - revisar logs y m√©tricas");
    
    return 0;
}

// Funciones auxiliares para logging y alertas
fn log_info(message: str) -> void {
    write_log("INFO", message);
}

fn log_warning(message: str) -> void {
    write_log("WARNING", message);
}

fn log_error(message: str) -> void {
    write_log("ERROR", message);
}

fn log_debug(message: str) -> void {
    write_log("DEBUG", message);
}

fn log_metrics(message: str) -> void {
    write_log("METRICS", message);
}

fn send_sre_alert(message: str) -> void {
    // Esta funci√≥n ser√° interceptada por el sistema de monitoreo
    write_log("ALERT", message);
}

fn write_log(level: str, message: str) -> void {
    // Escribir al log estructurado para an√°lisis posterior
    print_line("[" + get_timestamp() + "] " + level + ": " + message);
}
// ╔═════╦═════╦═════╗
// ║ 🛡️  ║ ⚖️  ║ ⚡  ║
// ║  C  ║  E  ║  G  ║
// ╚═════╩═════╩═════╝
// ╔═════════════════╗
// ║ wcet [T∞] bound ║
// ╚═════════════════╝
//
// Author: Ignacio Peña Sepúlveda
// Date: June 25, 2025

// Tree Shaking Demo - Shows how Tempo only includes what you use

// Example 1: Minimal program
// This will only include println and its dependencies (~5 functions total)
func example_minimal() {
    println("Hello, World!")
}

// Example 2: Math program
// This will include math functions but no networking/IO
func example_math() {
    let x = 3.14159
    let y = sin(x)
    let z = cos(x)
    println(format!("sin({}) = {}, cos({}) = {}", x, y, x, z))
}

// Example 3: Network server
// This will include networking but no math functions
func example_network() {
    let listener = listen_tcp("0.0.0.0:8080").unwrap()
    println("Server listening on :8080")
    
    loop {
        let conn = listener.accept().unwrap()
        go handle_connection(conn)
    }
}

func handle_connection(conn: TCPConn) {
    let mut buf: [1024]u8
    let n = conn.read(&mut buf).unwrap()
    conn.write(b"HTTP/1.1 200 OK\r\n\r\nHello from Tempo!").unwrap()
    conn.close()
}

// Example 4: Data structures only
// This will include HashMap but no IO/network/math
func example_data_structures() {
    let mut map: HashMap<string, i32> = HashMap::new()
    map.insert("foo", 42)
    map.insert("bar", 123)
    
    // Note: This won't include println!
    let sum = map.get("foo").unwrap() + map.get("bar").unwrap()
}

// Compiler output comparison:
// 
// If compiling example_minimal:
//   Binary size: ~50KB
//   Included: println, format, write_stdout, memcpy, strlen
//   Excluded: All network, math, sync, time functions
//
// If compiling example_math:
//   Binary size: ~75KB  
//   Included: println, format, sin, cos, f64_to_string
//   Excluded: All network, sync, time functions
//
// If compiling example_network:
//   Binary size: ~150KB
//   Included: println, listen_tcp, accept, read, write, go
//   Excluded: All math functions, most string operations
//
// If compiling example_data_structures:
//   Binary size: ~40KB
//   Included: HashMap, hash_fnv1a, memcpy
//   Excluded: ALL I/O functions (can't even print!)

// The main function determines what actually gets compiled
func main() {
    // Uncomment one of these to see different tree-shaking results:
    
    example_minimal()
    // example_math()
    // example_network()
    // example_data_structures()
}

// Tree-shaking visualization:
// 
// The compiler analyzes the call graph starting from main():
//
//                     main()
//                       |
//                example_minimal()
//                       |
//                   println()
//                    /    \
//              format()   write_stdout()
//               /  \           |
//      StringBuilder  \     syscall()
//           /           \
//      memcpy()      strlen()
//
// Only these 6-7 functions are included in the final binary!
// The other ~200+ prelude functions are completely eliminated.
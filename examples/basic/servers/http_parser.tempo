// ╔═════╦═════╦═════╗
// ║ 🛡️  ║ ⚖️  ║ ⚡  ║
// ║  C  ║  E  ║  G  ║
// ╚═════╩═════╩═════╝
// ╔═════════════════╗
// ║ wcet [T∞] bound ║
// ╚═════════════════╝
//
// Author: Ignacio Peña Sepúlveda
// Date: June 25, 2025

// Zero-copy HTTP/1.1 and HTTP/2 Parser
// Optimized for maximum performance with zero allocations

import "std/string"
import "std/memory"
import "std/hash"

// HTTP methods
enum HttpMethod {
    GET,
    POST,
    PUT,
    DELETE,
    HEAD,
    OPTIONS,
    PATCH,
    CONNECT,
    TRACE,
}

// HTTP versions
enum HttpVersion {
    HTTP_10 = 10,
    HTTP_11 = 11,
    HTTP_20 = 20,
}

// Parser states for HTTP/1.x
enum Http1State {
    METHOD,
    PATH,
    VERSION,
    HEADER_NAME,
    HEADER_VALUE,
    BODY,
    COMPLETE,
}

// HTTP/2 frame types
enum Http2FrameType {
    DATA = 0x0,
    HEADERS = 0x1,
    PRIORITY = 0x2,
    RST_STREAM = 0x3,
    SETTINGS = 0x4,
    PUSH_PROMISE = 0x5,
    PING = 0x6,
    GOAWAY = 0x7,
    WINDOW_UPDATE = 0x8,
    CONTINUATION = 0x9,
}

// Zero-copy string view
struct StringView {
    data: *const u8,
    len: usize,
}

impl StringView {
    fn new(data: *const u8, len: usize) -> Self {
        StringView { data, len }
    }
    
    fn as_slice(&self) -> &[u8] {
        unsafe { slice::from_raw_parts(self.data, self.len) }
    }
    
    fn equals(&self, other: &str) -> bool {
        if self.len != other.len() {
            return false;
        }
        unsafe {
            memory.memcmp(self.data, other.as_ptr(), self.len) == 0
        }
    }
    
    fn to_method(&self) -> ?HttpMethod {
        // Fast method detection using perfect hash
        match self.len {
            3 => {
                if self.equals("GET") { return Some(HttpMethod.GET); }
                if self.equals("PUT") { return Some(HttpMethod.PUT); }
            }
            4 => {
                if self.equals("POST") { return Some(HttpMethod.POST); }
                if self.equals("HEAD") { return Some(HttpMethod.HEAD); }
            }
            5 => {
                if self.equals("PATCH") { return Some(HttpMethod.PATCH); }
                if self.equals("TRACE") { return Some(HttpMethod.TRACE); }
            }
            6 => {
                if self.equals("DELETE") { return Some(HttpMethod.DELETE); }
            }
            7 => {
                if self.equals("OPTIONS") { return Some(HttpMethod.OPTIONS); }
                if self.equals("CONNECT") { return Some(HttpMethod.CONNECT); }
            }
        }
        None
    }
}

// HTTP header (zero-copy)
struct HttpHeader {
    name: StringView,
    value: StringView,
}

// HTTP request (zero-copy)
struct HttpRequest {
    method: HttpMethod,
    path: StringView,
    version: HttpVersion,
    headers: [HttpHeader; 64],  // Fixed-size array to avoid allocations
    header_count: usize,
    body: StringView,
    content_length: usize,
    keep_alive: bool,
    upgrade: ?StringView,
}

// HTTP/1.x parser
struct Http1Parser {
    state: Http1State,
    method_start: usize,
    path_start: usize,
    version_start: usize,
    header_name_start: usize,
    header_value_start: usize,
    body_start: usize,
    content_length: usize,
    headers_complete: bool,
}

impl Http1Parser {
    fn new() -> Self {
        Http1Parser {
            state: Http1State.METHOD,
            method_start: 0,
            path_start: 0,
            version_start: 0,
            header_name_start: 0,
            header_value_start: 0,
            body_start: 0,
            content_length: 0,
            headers_complete: false,
        }
    }
    
    // Zero-copy parsing - returns bytes consumed
    fn parse(&mut self, buffer: &[u8], request: &mut HttpRequest) -> Result<usize, Error> {
        let mut i = 0;
        let len = buffer.len();
        let ptr = buffer.as_ptr();
        
        while i < len {
            match self.state {
                Http1State.METHOD => {
                    if buffer[i] == b' ' {
                        // End of method
                        let method_view = StringView.new(
                            unsafe { ptr.add(self.method_start) },
                            i - self.method_start
                        );
                        request.method = method_view.to_method().ok_or(Error.InvalidMethod)?;
                        self.path_start = i + 1;
                        self.state = Http1State.PATH;
                    }
                    i += 1;
                }
                
                Http1State.PATH => {
                    if buffer[i] == b' ' {
                        // End of path
                        request.path = StringView.new(
                            unsafe { ptr.add(self.path_start) },
                            i - self.path_start
                        );
                        self.version_start = i + 1;
                        self.state = Http1State.VERSION;
                    }
                    i += 1;
                }
                
                Http1State.VERSION => {
                    if buffer[i] == b'\r' && i + 1 < len && buffer[i + 1] == b'\n' {
                        // End of version
                        let version_view = StringView.new(
                            unsafe { ptr.add(self.version_start) },
                            i - self.version_start
                        );
                        
                        if version_view.equals("HTTP/1.0") {
                            request.version = HttpVersion.HTTP_10;
                            request.keep_alive = false;  // Default for HTTP/1.0
                        } else if version_view.equals("HTTP/1.1") {
                            request.version = HttpVersion.HTTP_11;
                            request.keep_alive = true;   // Default for HTTP/1.1
                        } else {
                            return Err(Error.InvalidVersion);
                        }
                        
                        i += 2;  // Skip \r\n
                        self.header_name_start = i;
                        self.state = Http1State.HEADER_NAME;
                    } else {
                        i += 1;
                    }
                }
                
                Http1State.HEADER_NAME => {
                    if buffer[i] == b':' {
                        // End of header name
                        let name_end = i;
                        i += 1;
                        
                        // Skip whitespace
                        while i < len && (buffer[i] == b' ' || buffer[i] == b'\t') {
                            i += 1;
                        }
                        
                        self.header_value_start = i;
                        self.state = Http1State.HEADER_VALUE;
                    } else if buffer[i] == b'\r' && i + 1 < len && buffer[i + 1] == b'\n' {
                        // Empty line - end of headers
                        i += 2;
                        self.headers_complete = true;
                        self.body_start = i;
                        
                        if self.content_length > 0 {
                            self.state = Http1State.BODY;
                        } else {
                            self.state = Http1State.COMPLETE;
                            return Ok(i);
                        }
                    } else {
                        i += 1;
                    }
                }
                
                Http1State.HEADER_VALUE => {
                    if buffer[i] == b'\r' && i + 1 < len && buffer[i + 1] == b'\n' {
                        // End of header value
                        if request.header_count < 64 {
                            let header = HttpHeader {
                                name: StringView.new(
                                    unsafe { ptr.add(self.header_name_start) },
                                    self.header_value_start - self.header_name_start - 2  // Exclude ": "
                                ),
                                value: StringView.new(
                                    unsafe { ptr.add(self.header_value_start) },
                                    i - self.header_value_start
                                ),
                            };
                            
                            // Check for important headers
                            if header.name.equals("Content-Length") {
                                self.content_length = parse_content_length(&header.value)?;
                                request.content_length = self.content_length;
                            } else if header.name.equals("Connection") {
                                if header.value.equals("close") {
                                    request.keep_alive = false;
                                } else if header.value.equals("keep-alive") {
                                    request.keep_alive = true;
                                }
                            } else if header.name.equals("Upgrade") {
                                request.upgrade = Some(header.value);
                            }
                            
                            request.headers[request.header_count] = header;
                            request.header_count += 1;
                        }
                        
                        i += 2;  // Skip \r\n
                        self.header_name_start = i;
                        self.state = Http1State.HEADER_NAME;
                    } else {
                        i += 1;
                    }
                }
                
                Http1State.BODY => {
                    let body_bytes_available = len - self.body_start;
                    if body_bytes_available >= self.content_length {
                        // Complete body available
                        request.body = StringView.new(
                            unsafe { ptr.add(self.body_start) },
                            self.content_length
                        );
                        self.state = Http1State.COMPLETE;
                        return Ok(self.body_start + self.content_length);
                    } else {
                        // Need more data
                        return Ok(len);
                    }
                }
                
                Http1State.COMPLETE => {
                    return Ok(i);
                }
            }
        }
        
        Ok(len)
    }
    
    fn reset(&mut self) {
        self.state = Http1State.METHOD;
        self.method_start = 0;
        self.path_start = 0;
        self.version_start = 0;
        self.header_name_start = 0;
        self.header_value_start = 0;
        self.body_start = 0;
        self.content_length = 0;
        self.headers_complete = false;
    }
}

// HTTP/2 frame header
#[repr(C, packed)]
struct Http2FrameHeader {
    length: [u8; 3],     // 24-bit length
    frame_type: u8,
    flags: u8,
    stream_id: u32,      // 31-bit stream ID (MSB reserved)
}

// HTTP/2 frame
struct Http2Frame {
    header: Http2FrameHeader,
    payload: StringView,
}

// HTTP/2 parser
struct Http2Parser {
    state: Http2State,
    settings: Http2Settings,
    hpack_decoder: HpackDecoder,
    streams: HashMap<u32, Http2Stream>,
}

enum Http2State {
    PREFACE,
    FRAME_HEADER,
    FRAME_PAYLOAD,
}

struct Http2Settings {
    header_table_size: u32,
    enable_push: bool,
    max_concurrent_streams: u32,
    initial_window_size: u32,
    max_frame_size: u32,
    max_header_list_size: u32,
}

struct Http2Stream {
    id: u32,
    state: StreamState,
    headers: [HttpHeader; 64],
    header_count: usize,
    data: Vec<u8>,
}

enum StreamState {
    IDLE,
    OPEN,
    HALF_CLOSED_LOCAL,
    HALF_CLOSED_REMOTE,
    CLOSED,
}

// HPACK decoder for HTTP/2 header compression
struct HpackDecoder {
    dynamic_table: Vec<(StringView, StringView)>,
    max_size: usize,
    current_size: usize,
}

impl Http2Parser {
    fn new() -> Self {
        Http2Parser {
            state: Http2State.PREFACE,
            settings: Http2Settings {
                header_table_size: 4096,
                enable_push: true,
                max_concurrent_streams: 100,
                initial_window_size: 65535,
                max_frame_size: 16384,
                max_header_list_size: 8192,
            },
            hpack_decoder: HpackDecoder.new(4096),
            streams: HashMap.new(),
        }
    }
    
    fn parse(&mut self, buffer: &[u8]) -> Result<Vec<Http2Frame>, Error> {
        let mut frames = Vec.new();
        let mut offset = 0;
        
        match self.state {
            Http2State.PREFACE => {
                // Check for HTTP/2 preface
                const PREFACE: &[u8] = b"PRI * HTTP/2.0\r\n\r\nSM\r\n\r\n";
                if buffer.len() >= PREFACE.len() {
                    if &buffer[..PREFACE.len()] != PREFACE {
                        return Err(Error.InvalidPreface);
                    }
                    offset = PREFACE.len();
                    self.state = Http2State.FRAME_HEADER;
                } else {
                    return Ok(frames);  // Need more data
                }
            }
            _ => {}
        }
        
        while offset + 9 <= buffer.len() {
            // Parse frame header (9 bytes)
            let length = ((buffer[offset] as u32) << 16) |
                        ((buffer[offset + 1] as u32) << 8) |
                        (buffer[offset + 2] as u32);
            
            let frame_type = buffer[offset + 3];
            let flags = buffer[offset + 4];
            let stream_id = ((buffer[offset + 5] as u32) << 24) |
                           ((buffer[offset + 6] as u32) << 16) |
                           ((buffer[offset + 7] as u32) << 8) |
                           (buffer[offset + 8] as u32) & 0x7FFFFFFF;
            
            offset += 9;
            
            // Check if we have the complete payload
            if offset + length as usize > buffer.len() {
                break;  // Need more data
            }
            
            let payload = StringView.new(
                unsafe { buffer.as_ptr().add(offset) },
                length as usize
            );
            
            let frame = Http2Frame {
                header: Http2FrameHeader {
                    length: [
                        (length >> 16) as u8,
                        (length >> 8) as u8,
                        length as u8,
                    ],
                    frame_type,
                    flags,
                    stream_id,
                },
                payload,
            };
            
            frames.push(frame);
            offset += length as usize;
        }
        
        Ok(frames)
    }
    
    fn process_frame(&mut self, frame: &Http2Frame, request: &mut HttpRequest) -> Result<bool, Error> {
        match frame.header.frame_type {
            0x1 => {  // HEADERS frame
                let stream_id = frame.header.stream_id;
                let end_headers = frame.header.flags & 0x4 != 0;
                let end_stream = frame.header.flags & 0x1 != 0;
                
                // Decode headers using HPACK
                let headers = self.hpack_decoder.decode(frame.payload.as_slice())?;
                
                // Find method, path, and other pseudo-headers
                for header in &headers {
                    if header.name.equals(":method") {
                        request.method = header.value.to_method().ok_or(Error.InvalidMethod)?;
                    } else if header.name.equals(":path") {
                        request.path = header.value;
                    } else if header.name.equals(":scheme") {
                        // Ignore for now
                    } else if header.name.equals(":authority") {
                        // Store as Host header
                        if request.header_count < 64 {
                            request.headers[request.header_count] = HttpHeader {
                                name: StringView.new(b"Host".as_ptr(), 4),
                                value: header.value,
                            };
                            request.header_count += 1;
                        }
                    } else {
                        // Regular header
                        if request.header_count < 64 {
                            request.headers[request.header_count] = *header;
                            request.header_count += 1;
                        }
                    }
                }
                
                request.version = HttpVersion.HTTP_20;
                
                if end_stream {
                    return Ok(true);  // Request complete
                }
            }
            
            0x0 => {  // DATA frame
                let stream_id = frame.header.stream_id;
                let end_stream = frame.header.flags & 0x1 != 0;
                
                request.body = frame.payload;
                
                if end_stream {
                    return Ok(true);  // Request complete
                }
            }
            
            0x4 => {  // SETTINGS frame
                if frame.header.stream_id != 0 {
                    return Err(Error.InvalidStreamId);
                }
                
                // Process settings
                let payload = frame.payload.as_slice();
                let mut i = 0;
                while i + 6 <= payload.len() {
                    let id = ((payload[i] as u16) << 8) | (payload[i + 1] as u16);
                    let value = ((payload[i + 2] as u32) << 24) |
                               ((payload[i + 3] as u32) << 16) |
                               ((payload[i + 4] as u32) << 8) |
                               (payload[i + 5] as u32);
                    
                    match id {
                        0x1 => self.settings.header_table_size = value,
                        0x2 => self.settings.enable_push = value != 0,
                        0x3 => self.settings.max_concurrent_streams = value,
                        0x4 => self.settings.initial_window_size = value,
                        0x5 => self.settings.max_frame_size = value,
                        0x6 => self.settings.max_header_list_size = value,
                        _ => {}  // Ignore unknown settings
                    }
                    
                    i += 6;
                }
            }
            
            _ => {
                // Other frame types
            }
        }
        
        Ok(false)  // Request not complete yet
    }
}

// HPACK decoder implementation
impl HpackDecoder {
    fn new(max_size: usize) -> Self {
        HpackDecoder {
            dynamic_table: Vec.new(),
            max_size,
            current_size: 0,
        }
    }
    
    fn decode(&mut self, data: &[u8]) -> Result<Vec<HttpHeader>, Error> {
        let mut headers = Vec.new();
        let mut i = 0;
        
        while i < data.len() {
            let first_byte = data[i];
            
            if first_byte & 0x80 != 0 {
                // Indexed header field
                let index = self.decode_integer(&data[i..], 7)?;
                i += self.integer_bytes(&data[i..], 7);
                
                let (name, value) = self.get_indexed(index)?;
                headers.push(HttpHeader { name, value });
            } else if first_byte & 0x40 != 0 {
                // Literal header field with incremental indexing
                i += 1;
                let (name, value, bytes) = self.decode_literal(&data[i..], true)?;
                i += bytes;
                
                headers.push(HttpHeader { name, value });
                self.add_to_table(name, value);
            } else {
                // Other encoding types...
                i += 1;
            }
        }
        
        Ok(headers)
    }
    
    fn decode_integer(&self, data: &[u8], prefix_bits: u8) -> Result<usize, Error> {
        let mask = (1 << prefix_bits) - 1;
        let mut value = (data[0] & mask) as usize;
        
        if value < mask as usize {
            return Ok(value);
        }
        
        let mut m = 0;
        let mut i = 1;
        while i < data.len() {
            let byte = data[i];
            value += ((byte & 0x7F) as usize) << m;
            m += 7;
            
            if byte & 0x80 == 0 {
                break;
            }
            i += 1;
        }
        
        Ok(value)
    }
    
    fn integer_bytes(&self, data: &[u8], prefix_bits: u8) -> usize {
        let mask = (1 << prefix_bits) - 1;
        if (data[0] & mask) < mask {
            return 1;
        }
        
        let mut i = 1;
        while i < data.len() && data[i] & 0x80 != 0 {
            i += 1;
        }
        i + 1
    }
    
    fn decode_literal(&self, data: &[u8], _indexed: bool) -> Result<(StringView, StringView, usize), Error> {
        // Simplified literal decoding
        // In real implementation, this would handle Huffman encoding, etc.
        let name_len = data[0] as usize;
        let name = StringView.new(unsafe { data.as_ptr().add(1) }, name_len);
        
        let value_offset = 1 + name_len;
        let value_len = data[value_offset] as usize;
        let value = StringView.new(unsafe { data.as_ptr().add(value_offset + 1) }, value_len);
        
        Ok((name, value, value_offset + 1 + value_len))
    }
    
    fn get_indexed(&self, index: usize) -> Result<(StringView, StringView), Error> {
        // Static table + dynamic table lookup
        // Simplified - would include full static table
        if index == 2 {
            Ok((StringView.new(b":method".as_ptr(), 7), StringView.new(b"GET".as_ptr(), 3)))
        } else if index == 3 {
            Ok((StringView.new(b":method".as_ptr(), 7), StringView.new(b"POST".as_ptr(), 4)))
        } else {
            Err(Error.InvalidIndex)
        }
    }
    
    fn add_to_table(&mut self, name: StringView, value: StringView) {
        let entry_size = 32 + name.len + value.len;
        
        // Evict entries if necessary
        while self.current_size + entry_size > self.max_size && !self.dynamic_table.is_empty() {
            let removed = self.dynamic_table.pop().unwrap();
            self.current_size -= 32 + removed.0.len + removed.1.len;
        }
        
        if entry_size <= self.max_size {
            self.dynamic_table.insert(0, (name, value));
            self.current_size += entry_size;
        }
    }
}

// Fast content-length parsing
fn parse_content_length(value: &StringView) -> Result<usize, Error> {
    let mut result = 0usize;
    let bytes = value.as_slice();
    
    for &b in bytes {
        if b >= b'0' && b <= b'9' {
            result = result * 10 + (b - b'0') as usize;
        } else {
            return Err(Error.InvalidContentLength);
        }
    }
    
    Ok(result)
}

// Response building (zero-copy where possible)
struct HttpResponse {
    version: HttpVersion,
    status: u16,
    headers: Vec<(StringView, StringView)>,
    body: Vec<u8>,
}

impl HttpResponse {
    fn new(version: HttpVersion, status: u16) -> Self {
        HttpResponse {
            version,
            status,
            headers: Vec.new(),
            body: Vec.new(),
        }
    }
    
    fn add_header(&mut self, name: &str, value: &str) {
        self.headers.push((
            StringView.new(name.as_ptr(), name.len()),
            StringView.new(value.as_ptr(), value.len()),
        ));
    }
    
    fn set_body(&mut self, body: Vec<u8>) {
        self.body = body;
        self.add_header("Content-Length", &self.body.len().to_string());
    }
    
    // Serialize to buffer (zero-copy for static parts)
    fn serialize(&self, buffer: &mut Vec<u8>) -> Result<(), Error> {
        match self.version {
            HttpVersion.HTTP_11 => {
                // Status line
                buffer.extend_from_slice(b"HTTP/1.1 ");
                buffer.extend_from_slice(self.status.to_string().as_bytes());
                buffer.extend_from_slice(b" ");
                buffer.extend_from_slice(self.status_text());
                buffer.extend_from_slice(b"\r\n");
                
                // Headers
                for (name, value) in &self.headers {
                    buffer.extend_from_slice(name.as_slice());
                    buffer.extend_from_slice(b": ");
                    buffer.extend_from_slice(value.as_slice());
                    buffer.extend_from_slice(b"\r\n");
                }
                
                // End of headers
                buffer.extend_from_slice(b"\r\n");
                
                // Body
                buffer.extend_from_slice(&self.body);
            }
            
            HttpVersion.HTTP_20 => {
                // HTTP/2 response would be encoded as frames
                // This is simplified
                self.serialize_http2_response(buffer)?;
            }
            
            _ => return Err(Error.UnsupportedVersion),
        }
        
        Ok(())
    }
    
    fn status_text(&self) -> &[u8] {
        match self.status {
            200 => b"OK",
            201 => b"Created",
            204 => b"No Content",
            301 => b"Moved Permanently",
            302 => b"Found",
            304 => b"Not Modified",
            400 => b"Bad Request",
            401 => b"Unauthorized",
            403 => b"Forbidden",
            404 => b"Not Found",
            405 => b"Method Not Allowed",
            500 => b"Internal Server Error",
            501 => b"Not Implemented",
            502 => b"Bad Gateway",
            503 => b"Service Unavailable",
            _ => b"Unknown",
        }
    }
    
    fn serialize_http2_response(&self, buffer: &mut Vec<u8>) -> Result<(), Error> {
        // Simplified HTTP/2 response encoding
        // Would need HPACK encoding for headers
        
        // HEADERS frame
        let mut headers_payload = Vec.new();
        
        // Encode :status pseudo-header
        headers_payload.push(0x88);  // Indexed :status 200
        
        // Other headers would be HPACK encoded here
        
        // Frame header
        let length = headers_payload.len();
        buffer.push((length >> 16) as u8);
        buffer.push((length >> 8) as u8);
        buffer.push(length as u8);
        buffer.push(0x01);  // HEADERS frame
        buffer.push(0x04);  // END_HEADERS flag
        buffer.extend_from_slice(&1u32.to_be_bytes());  // Stream ID 1
        buffer.extend_from_slice(&headers_payload);
        
        // DATA frame if body exists
        if !self.body.is_empty() {
            let length = self.body.len();
            buffer.push((length >> 16) as u8);
            buffer.push((length >> 8) as u8);
            buffer.push(length as u8);
            buffer.push(0x00);  // DATA frame
            buffer.push(0x01);  // END_STREAM flag
            buffer.extend_from_slice(&1u32.to_be_bytes());  // Stream ID 1
            buffer.extend_from_slice(&self.body);
        }
        
        Ok(())
    }
}

// Errors
enum Error {
    InvalidMethod,
    InvalidVersion,
    InvalidContentLength,
    InvalidPreface,
    InvalidStreamId,
    InvalidIndex,
    UnsupportedVersion,
    ConnectionClosed,
}

// Export main parsing function
pub fn parse_http_request(buffer: &[u8], parser: &mut Http1Parser) -> Result<HttpRequest, Error> {
    let mut request = HttpRequest {
        method: HttpMethod.GET,
        path: StringView.new(std::ptr::null(), 0),
        version: HttpVersion.HTTP_11,
        headers: unsafe { memory.zeroed() },
        header_count: 0,
        body: StringView.new(std::ptr::null(), 0),
        content_length: 0,
        keep_alive: true,
        upgrade: None,
    };
    
    parser.parse(buffer, &mut request)?;
    Ok(request)
}
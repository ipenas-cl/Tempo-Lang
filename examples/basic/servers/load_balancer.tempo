// ╔═════╦═════╦═════╗
// ║ 🛡️  ║ ⚖️  ║ ⚡  ║
// ║  C  ║  E  ║  G  ║
// ╚═════╩═════╩═════╝
// ╔═════════════════╗
// ║ wcet [T∞] bound ║
// ╚═════════════════╝
//
// Author: Ignacio Peña Sepúlveda
// Date: June 25, 2025

// Deterministic Load Balancer
// High-performance, lock-free load balancing with multiple algorithms

import "std/net"
import "std/atomic"
import "std/hash"
import "std/time"
import "std/sync"
import "std/math"

// Load balancing algorithms
enum LoadBalanceAlgorithm {
    ROUND_ROBIN,
    LEAST_CONNECTIONS,
    WEIGHTED_ROUND_ROBIN,
    IP_HASH,
    CONSISTENT_HASH,
    LEAST_RESPONSE_TIME,
    RANDOM,
    POWER_OF_TWO_CHOICES,
}

// Backend server state
struct Backend {
    id: u32,
    address: net.SocketAddr,
    weight: u32,
    max_connections: u32,
    
    // Atomic counters for lock-free operation
    active_connections: atomic.AtomicU32,
    total_requests: atomic.AtomicU64,
    failed_requests: atomic.AtomicU64,
    total_response_time: atomic.AtomicU64,  // in microseconds
    
    // Health check state
    healthy: atomic.AtomicBool,
    last_check: atomic.AtomicU64,
    consecutive_failures: atomic.AtomicU32,
    
    // Circuit breaker
    circuit_state: atomic.AtomicU8,  // 0=closed, 1=open, 2=half-open
    circuit_opened_at: atomic.AtomicU64,
    
    // Connection pool
    connection_pool: ConnectionPool,
}

// Connection pool for backend connections
struct ConnectionPool {
    connections: [PooledConnection; 128],
    free_list: atomic.AtomicU64,  // Bit mask for free connections
    size: u32,
}

struct PooledConnection {
    fd: atomic.AtomicI32,
    last_used: atomic.AtomicU64,
    in_use: atomic.AtomicBool,
}

// Consistent hash ring
struct ConsistentHashRing {
    ring: Vec<(u32, u32)>,  // (hash, backend_id)
    virtual_nodes: u32,
}

// Load balancer configuration
struct LoadBalancerConfig {
    algorithm: LoadBalanceAlgorithm,
    health_check_interval: u64,
    health_check_timeout: u64,
    max_failures: u32,
    circuit_breaker_timeout: u64,
    circuit_breaker_threshold: u32,
    connection_timeout: u64,
    request_timeout: u64,
    retry_attempts: u32,
    sticky_sessions: bool,
    session_timeout: u64,
}

// Main load balancer structure
struct LoadBalancer {
    config: LoadBalancerConfig,
    backends: Vec<Backend>,
    
    // Algorithm-specific state
    round_robin_counter: atomic.AtomicU32,
    weighted_round_robin_state: WeightedRoundRobinState,
    consistent_hash_ring: ConsistentHashRing,
    
    // Session affinity
    session_map: sync.RwLock<HashMap<String, u32>>,
    
    // Statistics
    total_requests: atomic.AtomicU64,
    failed_requests: atomic.AtomicU64,
    active_connections: atomic.AtomicU32,
}

// Weighted round-robin state
struct WeightedRoundRobinState {
    current_weights: Vec<atomic.AtomicI32>,
    effective_weights: Vec<atomic.AtomicI32>,
    total_weight: atomic.AtomicI32,
}

impl LoadBalancer {
    fn new(config: LoadBalancerConfig, backend_addresses: Vec<(net.SocketAddr, u32)>) -> Self {
        let mut backends = Vec::with_capacity(backend_addresses.len());
        let mut wrr_current = Vec::with_capacity(backend_addresses.len());
        let mut wrr_effective = Vec::with_capacity(backend_addresses.len());
        let mut total_weight = 0i32;
        
        for (i, (addr, weight)) in backend_addresses.iter().enumerate() {
            backends.push(Backend {
                id: i as u32,
                address: *addr,
                weight: *weight,
                max_connections: 1000,
                active_connections: atomic.AtomicU32.new(0),
                total_requests: atomic.AtomicU64.new(0),
                failed_requests: atomic.AtomicU64.new(0),
                total_response_time: atomic.AtomicU64.new(0),
                healthy: atomic.AtomicBool.new(true),
                last_check: atomic.AtomicU64.new(0),
                consecutive_failures: atomic.AtomicU32.new(0),
                circuit_state: atomic.AtomicU8.new(0),
                circuit_opened_at: atomic.AtomicU64.new(0),
                connection_pool: ConnectionPool::new(32),
            });
            
            wrr_current.push(atomic.AtomicI32.new(0));
            wrr_effective.push(atomic.AtomicI32.new(*weight as i32));
            total_weight += *weight as i32;
        }
        
        let consistent_hash_ring = ConsistentHashRing::new(&backends, 150);
        
        LoadBalancer {
            config,
            backends,
            round_robin_counter: atomic.AtomicU32.new(0),
            weighted_round_robin_state: WeightedRoundRobinState {
                current_weights: wrr_current,
                effective_weights: wrr_effective,
                total_weight: atomic.AtomicI32.new(total_weight),
            },
            consistent_hash_ring,
            session_map: sync.RwLock.new(HashMap.new()),
            total_requests: atomic.AtomicU64.new(0),
            failed_requests: atomic.AtomicU64.new(0),
            active_connections: atomic.AtomicU32.new(0),
        }
    }
    
    // Select backend based on configured algorithm
    fn select_backend(&self, client_addr: &net.SocketAddr, session_id: Option<&str>) -> Option<u32> {
        self.total_requests.fetch_add(1, atomic.Ordering.Relaxed);
        
        // Check session affinity first
        if self.config.sticky_sessions {
            if let Some(session_id) = session_id {
                if let Some(backend_id) = self.get_session_backend(session_id) {
                    if self.is_backend_available(backend_id) {
                        return Some(backend_id);
                    }
                }
            }
        }
        
        // Select based on algorithm
        let backend_id = match self.config.algorithm {
            LoadBalanceAlgorithm.ROUND_ROBIN => self.round_robin_select(),
            LoadBalanceAlgorithm.LEAST_CONNECTIONS => self.least_connections_select(),
            LoadBalanceAlgorithm.WEIGHTED_ROUND_ROBIN => self.weighted_round_robin_select(),
            LoadBalanceAlgorithm.IP_HASH => self.ip_hash_select(client_addr),
            LoadBalanceAlgorithm.CONSISTENT_HASH => self.consistent_hash_select(client_addr),
            LoadBalanceAlgorithm.LEAST_RESPONSE_TIME => self.least_response_time_select(),
            LoadBalanceAlgorithm.RANDOM => self.random_select(),
            LoadBalanceAlgorithm.POWER_OF_TWO_CHOICES => self.power_of_two_select(),
        };
        
        // Update session affinity
        if let (Some(backend_id), Some(session_id)) = (backend_id, session_id) {
            if self.config.sticky_sessions {
                self.update_session_backend(session_id, backend_id);
            }
        }
        
        backend_id
    }
    
    // Round-robin selection (lock-free)
    fn round_robin_select(&self) -> Option<u32> {
        let n = self.backends.len() as u32;
        if n == 0 {
            return None;
        }
        
        let mut attempts = 0;
        loop {
            let current = self.round_robin_counter.fetch_add(1, atomic.Ordering.Relaxed);
            let idx = current % n;
            
            if self.is_backend_available(idx) {
                return Some(idx);
            }
            
            attempts += 1;
            if attempts >= n * 2 {
                // All backends might be down
                return None;
            }
        }
    }
    
    // Least connections selection
    fn least_connections_select(&self) -> Option<u32> {
        let mut best_idx = None;
        let mut min_connections = u32::MAX;
        
        for (idx, backend) in self.backends.iter().enumerate() {
            if !self.is_backend_available(idx as u32) {
                continue;
            }
            
            let connections = backend.active_connections.load(atomic.Ordering.Relaxed);
            if connections < min_connections {
                min_connections = connections;
                best_idx = Some(idx as u32);
            }
        }
        
        best_idx
    }
    
    // Weighted round-robin selection (smooth weighted round-robin)
    fn weighted_round_robin_select(&self) -> Option<u32> {
        let n = self.backends.len();
        if n == 0 {
            return None;
        }
        
        let wrr = &self.weighted_round_robin_state;
        let total = wrr.total_weight.load(atomic.Ordering.Relaxed);
        if total <= 0 {
            return None;
        }
        
        let mut best_idx = None;
        let mut best_weight = i32::MIN;
        
        for i in 0..n {
            if !self.is_backend_available(i as u32) {
                continue;
            }
            
            let effective = wrr.effective_weights[i].load(atomic.Ordering.Relaxed);
            let current = wrr.current_weights[i].fetch_add(effective, atomic.Ordering.Relaxed) + effective;
            
            if current > best_weight {
                best_weight = current;
                best_idx = Some(i);
            }
        }
        
        if let Some(idx) = best_idx {
            wrr.current_weights[idx].fetch_sub(total, atomic.Ordering.Relaxed);
            return Some(idx as u32);
        }
        
        None
    }
    
    // IP hash selection
    fn ip_hash_select(&self, client_addr: &net.SocketAddr) -> Option<u32> {
        let n = self.backends.len() as u32;
        if n == 0 {
            return None;
        }
        
        let hash = match client_addr {
            net.SocketAddr::V4(addr) => {
                let octets = addr.ip().octets();
                hash::fnv1a_32(&octets)
            }
            net.SocketAddr::V6(addr) => {
                let octets = addr.ip().octets();
                hash::fnv1a_32(&octets)
            }
        };
        
        // Linear probing to find available backend
        for i in 0..n {
            let idx = (hash + i) % n;
            if self.is_backend_available(idx) {
                return Some(idx);
            }
        }
        
        None
    }
    
    // Consistent hash selection
    fn consistent_hash_select(&self, client_addr: &net.SocketAddr) -> Option<u32> {
        let key_hash = match client_addr {
            net.SocketAddr::V4(addr) => hash::fnv1a_32(&addr.ip().octets()),
            net.SocketAddr::V6(addr) => hash::fnv1a_32(&addr.ip().octets()),
        };
        
        self.consistent_hash_ring.get_backend(key_hash, |id| self.is_backend_available(id))
    }
    
    // Least response time selection
    fn least_response_time_select(&self) -> Option<u32> {
        let mut best_idx = None;
        let mut best_score = f64::MAX;
        
        for (idx, backend) in self.backends.iter().enumerate() {
            if !self.is_backend_available(idx as u32) {
                continue;
            }
            
            let total_requests = backend.total_requests.load(atomic.Ordering.Relaxed);
            let total_time = backend.total_response_time.load(atomic.Ordering.Relaxed);
            let active_conns = backend.active_connections.load(atomic.Ordering.Relaxed);
            
            // Calculate average response time
            let avg_response_time = if total_requests > 0 {
                total_time as f64 / total_requests as f64
            } else {
                0.0
            };
            
            // Score = avg_response_time * (1 + active_connections)
            let score = avg_response_time * (1.0 + active_conns as f64);
            
            if score < best_score {
                best_score = score;
                best_idx = Some(idx as u32);
            }
        }
        
        best_idx
    }
    
    // Random selection
    fn random_select(&self) -> Option<u32> {
        let available: Vec<u32> = (0..self.backends.len() as u32)
            .filter(|&idx| self.is_backend_available(idx))
            .collect();
        
        if available.is_empty() {
            None
        } else {
            let idx = (time::now().as_nanos() as usize) % available.len();
            Some(available[idx])
        }
    }
    
    // Power of two choices
    fn power_of_two_select(&self) -> Option<u32> {
        let n = self.backends.len();
        if n == 0 {
            return None;
        }
        
        // Pick two random backends
        let r = time::now().as_nanos() as usize;
        let idx1 = r % n;
        let idx2 = (r >> 32) % n;
        
        // Choose the one with fewer connections
        let backend1_available = self.is_backend_available(idx1 as u32);
        let backend2_available = self.is_backend_available(idx2 as u32);
        
        match (backend1_available, backend2_available) {
            (true, true) => {
                let conn1 = self.backends[idx1].active_connections.load(atomic.Ordering.Relaxed);
                let conn2 = self.backends[idx2].active_connections.load(atomic.Ordering.Relaxed);
                Some(if conn1 <= conn2 { idx1 as u32 } else { idx2 as u32 })
            }
            (true, false) => Some(idx1 as u32),
            (false, true) => Some(idx2 as u32),
            (false, false) => None,
        }
    }
    
    // Check if backend is available (healthy and not circuit broken)
    fn is_backend_available(&self, backend_id: u32) -> bool {
        if backend_id >= self.backends.len() as u32 {
            return false;
        }
        
        let backend = &self.backends[backend_id as usize];
        
        // Check health
        if !backend.healthy.load(atomic.Ordering.Relaxed) {
            return false;
        }
        
        // Check circuit breaker
        let circuit_state = backend.circuit_state.load(atomic.Ordering.Relaxed);
        match circuit_state {
            0 => true,  // Closed - available
            1 => {      // Open - check if timeout expired
                let opened_at = backend.circuit_opened_at.load(atomic.Ordering.Relaxed);
                let now = time::now().as_secs();
                if now - opened_at > self.config.circuit_breaker_timeout {
                    // Transition to half-open
                    backend.circuit_state.store(2, atomic.Ordering.Relaxed);
                    true
                } else {
                    false
                }
            }
            2 => true,  // Half-open - allow limited traffic
            _ => false,
        }
    }
    
    // Get connection to backend
    fn get_backend_connection(&self, backend_id: u32) -> Result<i32, Error> {
        let backend = &self.backends[backend_id as usize];
        
        // Try to get from pool first
        if let Some(fd) = backend.connection_pool.get() {
            return Ok(fd);
        }
        
        // Create new connection
        let fd = self.create_backend_connection(backend)?;
        Ok(fd)
    }
    
    // Create new connection to backend
    fn create_backend_connection(&self, backend: &Backend) -> Result<i32, Error> {
        let socket = net::TcpStream::connect_timeout(
            &backend.address,
            time::Duration::from_millis(self.config.connection_timeout),
        )?;
        
        // Set socket options
        socket.set_nodelay(true)?;
        socket.set_keepalive(Some(time::Duration::from_secs(60)))?;
        
        Ok(socket.as_raw_fd())
    }
    
    // Return connection to pool
    fn return_backend_connection(&self, backend_id: u32, fd: i32) {
        let backend = &self.backends[backend_id as usize];
        backend.connection_pool.put(fd);
    }
    
    // Handle request completion
    fn on_request_complete(&self, backend_id: u32, response_time: u64, success: bool) {
        let backend = &self.backends[backend_id as usize];
        
        backend.active_connections.fetch_sub(1, atomic.Ordering.Relaxed);
        self.active_connections.fetch_sub(1, atomic.Ordering.Relaxed);
        
        if success {
            backend.total_response_time.fetch_add(response_time, atomic.Ordering.Relaxed);
            backend.consecutive_failures.store(0, atomic.Ordering.Relaxed);
            
            // Reset circuit breaker if in half-open state
            if backend.circuit_state.load(atomic.Ordering.Relaxed) == 2 {
                backend.circuit_state.store(0, atomic.Ordering.Relaxed);
            }
        } else {
            backend.failed_requests.fetch_add(1, atomic.Ordering.Relaxed);
            self.failed_requests.fetch_add(1, atomic.Ordering.Relaxed);
            
            let failures = backend.consecutive_failures.fetch_add(1, atomic.Ordering.Relaxed) + 1;
            
            // Check circuit breaker threshold
            if failures >= self.config.circuit_breaker_threshold {
                backend.circuit_state.store(1, atomic.Ordering.Relaxed);  // Open
                backend.circuit_opened_at.store(time::now().as_secs(), atomic.Ordering.Relaxed);
            }
        }
    }
    
    // Health check task
    fn health_check_loop(&self) {
        loop {
            for backend in &self.backends {
                let last_check = backend.last_check.load(atomic.Ordering.Relaxed);
                let now = time::now().as_millis();
                
                if now - last_check >= self.config.health_check_interval {
                    self.check_backend_health(backend);
                    backend.last_check.store(now, atomic.Ordering.Relaxed);
                }
            }
            
            thread::sleep(time::Duration::from_millis(100));
        }
    }
    
    fn check_backend_health(&self, backend: &Backend) {
        match net::TcpStream::connect_timeout(
            &backend.address,
            time::Duration::from_millis(self.config.health_check_timeout),
        ) {
            Ok(stream) => {
                // Send health check request
                let request = b"GET /health HTTP/1.1\r\nHost: localhost\r\n\r\n";
                if stream.write_all(request).is_ok() {
                    let mut response = [0u8; 128];
                    if stream.read(&mut response).is_ok() {
                        // Check for 200 OK
                        if response.starts_with(b"HTTP/1.1 200") {
                            backend.healthy.store(true, atomic.Ordering.Relaxed);
                            backend.consecutive_failures.store(0, atomic.Ordering.Relaxed);
                            return;
                        }
                    }
                }
            }
            Err(_) => {}
        }
        
        // Health check failed
        let failures = backend.consecutive_failures.fetch_add(1, atomic.Ordering.Relaxed) + 1;
        if failures >= self.config.max_failures {
            backend.healthy.store(false, atomic.Ordering.Relaxed);
        }
    }
    
    // Session affinity management
    fn get_session_backend(&self, session_id: &str) -> Option<u32> {
        let sessions = self.session_map.read();
        sessions.get(session_id).copied()
    }
    
    fn update_session_backend(&self, session_id: &str, backend_id: u32) {
        let mut sessions = self.session_map.write();
        sessions.insert(session_id.to_string(), backend_id);
        
        // TODO: Implement session expiration
    }
    
    // Statistics
    fn stats(&self) -> LoadBalancerStats {
        let mut backend_stats = Vec::new();
        
        for backend in &self.backends {
            let total_requests = backend.total_requests.load(atomic.Ordering.Relaxed);
            let failed_requests = backend.failed_requests.load(atomic.Ordering.Relaxed);
            let total_time = backend.total_response_time.load(atomic.Ordering.Relaxed);
            
            backend_stats.push(BackendStats {
                id: backend.id,
                address: backend.address,
                healthy: backend.healthy.load(atomic.Ordering.Relaxed),
                active_connections: backend.active_connections.load(atomic.Ordering.Relaxed),
                total_requests,
                failed_requests,
                success_rate: if total_requests > 0 {
                    (total_requests - failed_requests) as f64 / total_requests as f64
                } else {
                    0.0
                },
                avg_response_time: if total_requests > 0 {
                    total_time as f64 / total_requests as f64
                } else {
                    0.0
                },
                circuit_state: backend.circuit_state.load(atomic.Ordering.Relaxed),
            });
        }
        
        LoadBalancerStats {
            total_requests: self.total_requests.load(atomic.Ordering.Relaxed),
            failed_requests: self.failed_requests.load(atomic.Ordering.Relaxed),
            active_connections: self.active_connections.load(atomic.Ordering.Relaxed),
            backend_stats,
        }
    }
}

// Connection pool implementation
impl ConnectionPool {
    fn new(size: u32) -> Self {
        let mut connections = Vec::with_capacity(size as usize);
        for _ in 0..size {
            connections.push(PooledConnection {
                fd: atomic.AtomicI32.new(-1),
                last_used: atomic.AtomicU64.new(0),
                in_use: atomic.AtomicBool.new(false),
            });
        }
        
        ConnectionPool {
            connections: connections.try_into().unwrap(),
            free_list: atomic.AtomicU64.new((1u64 << size) - 1),
            size,
        }
    }
    
    fn get(&self) -> Option<i32> {
        // Find free connection using atomic operations
        loop {
            let free_mask = self.free_list.load(atomic.Ordering::Relaxed);
            if free_mask == 0 {
                return None;
            }
            
            let idx = free_mask.trailing_zeros() as usize;
            let new_mask = free_mask & !(1u64 << idx);
            
            if self.free_list.compare_exchange(
                free_mask,
                new_mask,
                atomic.Ordering.SeqCst,
                atomic.Ordering.Relaxed,
            ).is_ok() {
                let conn = &self.connections[idx];
                conn.in_use.store(true, atomic.Ordering.Relaxed);
                let fd = conn.fd.load(atomic.Ordering.Relaxed);
                
                if fd >= 0 {
                    // Check if connection is still valid
                    if self.is_connection_alive(fd) {
                        conn.last_used.store(time::now().as_millis(), atomic.Ordering.Relaxed);
                        return Some(fd);
                    } else {
                        // Connection dead, close it
                        sys::close(fd);
                        conn.fd.store(-1, atomic.Ordering.Relaxed);
                    }
                }
                
                // Return slot to free list
                conn.in_use.store(false, atomic.Ordering.Relaxed);
                self.free_list.fetch_or(1u64 << idx, atomic.Ordering.Relaxed);
            }
        }
    }
    
    fn put(&self, fd: i32) {
        // Find an empty slot
        for (idx, conn) in self.connections.iter().enumerate() {
            if conn.fd.compare_exchange(
                -1,
                fd,
                atomic.Ordering.SeqCst,
                atomic.Ordering.Relaxed,
            ).is_ok() {
                conn.last_used.store(time::now().as_millis(), atomic.Ordering.Relaxed);
                conn.in_use.store(false, atomic.Ordering.Relaxed);
                self.free_list.fetch_or(1u64 << idx, atomic.Ordering.Relaxed);
                return;
            }
        }
        
        // No free slots, close the connection
        sys::close(fd);
    }
    
    fn is_connection_alive(&self, fd: i32) -> bool {
        // Use TCP keepalive or send a dummy packet
        let mut buf = [0u8; 1];
        match sys::recv(fd, &mut buf, sys::MSG_PEEK | sys::MSG_DONTWAIT) {
            Ok(0) => false,  // Connection closed
            Ok(_) => true,   // Data available
            Err(e) if e.would_block() => true,  // No data, but alive
            Err(_) => false, // Error
        }
    }
}

// Consistent hash ring implementation
impl ConsistentHashRing {
    fn new(backends: &[Backend], virtual_nodes: u32) -> Self {
        let mut ring = Vec::new();
        
        for backend in backends {
            for i in 0..virtual_nodes {
                let key = format!("{}:{}", backend.id, i);
                let hash = hash::fnv1a_32(key.as_bytes());
                ring.push((hash, backend.id));
            }
        }
        
        ring.sort_by_key(|&(hash, _)| hash);
        
        ConsistentHashRing { ring, virtual_nodes }
    }
    
    fn get_backend(&self, key_hash: u32, is_available: impl Fn(u32) -> bool) -> Option<u32> {
        if self.ring.is_empty() {
            return None;
        }
        
        // Binary search for the first node >= key_hash
        let idx = match self.ring.binary_search_by_key(&key_hash, |&(hash, _)| hash) {
            Ok(idx) => idx,
            Err(idx) => idx % self.ring.len(),
        };
        
        // Try backends in order around the ring
        let n = self.ring.len();
        for i in 0..n {
            let backend_id = self.ring[(idx + i) % n].1;
            if is_available(backend_id) {
                return Some(backend_id);
            }
        }
        
        None
    }
}

// Statistics structures
struct LoadBalancerStats {
    total_requests: u64,
    failed_requests: u64,
    active_connections: u32,
    backend_stats: Vec<BackendStats>,
}

struct BackendStats {
    id: u32,
    address: net.SocketAddr,
    healthy: bool,
    active_connections: u32,
    total_requests: u64,
    failed_requests: u64,
    success_rate: f64,
    avg_response_time: f64,
    circuit_state: u8,
}

// Public API
pub fn create_load_balancer(
    algorithm: LoadBalanceAlgorithm,
    backends: Vec<(net.SocketAddr, u32)>,
) -> LoadBalancer {
    let config = LoadBalancerConfig {
        algorithm,
        health_check_interval: 5000,       // 5 seconds
        health_check_timeout: 2000,        // 2 seconds
        max_failures: 3,
        circuit_breaker_timeout: 30,       // 30 seconds
        circuit_breaker_threshold: 5,
        connection_timeout: 5000,          // 5 seconds
        request_timeout: 30000,            // 30 seconds
        retry_attempts: 2,
        sticky_sessions: false,
        session_timeout: 3600,             // 1 hour
    };
    
    LoadBalancer::new(config, backends)
}

// Hash functions
mod hash {
    pub fn fnv1a_32(data: &[u8]) -> u32 {
        let mut hash = 2166136261u32;
        for &byte in data {
            hash ^= byte as u32;
            hash = hash.wrapping_mul(16777619);
        }
        hash
    }
}
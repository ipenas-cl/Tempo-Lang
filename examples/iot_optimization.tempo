// ╔═════╦═════╦═════╗
// ║ 🛡️  ║ ⚖️  ║ ⚡  ║
// ║  C  ║  E  ║  G  ║
// ╚═════╩═════╩═════╝
// ╔═════════════════╗
// ║ wcet [T∞] bound ║
// ╚═════════════════╝
//
// Author: Ignacio Peña Sepúlveda
// Date: June 25, 2025

// IoT/Embedded optimization examples
// Demonstrates ultra-granular tree-shaking for resource-constrained environments

import "../function_analyzer"
import "../dependency_resolver"
import "../code_eliminator"

// Example IoT device firmware
struct SensorDevice {
    id: u32
    sensor_type: SensorType
    battery_level: u8
    is_active: bool
}

enum SensorType {
    Temperature,
    Humidity,
    Motion,
    Light,
    Pressure
}

impl SensorDevice {
    // Core functionality - always needed
    fn new(id: u32, sensor_type: SensorType) -> SensorDevice {
        return SensorDevice{
            id: id,
            sensor_type: sensor_type,
            battery_level: 100,
            is_active: true
        }
    }

    // Basic reading - needed for all sensor types
    fn read_raw_value() -> u16 {
        return self.read_sensor_register(0x00)
    }

    // Temperature-specific methods - only needed for temperature sensors
    fn read_temperature() -> f32 {
        if self.sensor_type != SensorType::Temperature {
            panic("Invalid sensor type for temperature reading")
        }
        let raw = self.read_raw_value()
        return self.convert_to_celsius(raw)
    }

    fn convert_to_celsius(raw: u16) -> f32 {
        return (raw as f32 * 0.0625) - 40.0
    }

    fn convert_to_fahrenheit(celsius: f32) -> f32 {
        return celsius * 1.8 + 32.0
    }

    // Humidity-specific methods
    fn read_humidity() -> f32 {
        if self.sensor_type != SensorType::Humidity {
            panic("Invalid sensor type for humidity reading")
        }
        let raw = self.read_raw_value()
        return self.convert_to_relative_humidity(raw)
    }

    fn convert_to_relative_humidity(raw: u16) -> f32 {
        return (raw as f32 / 65535.0) * 100.0
    }

    // Motion detection - only for motion sensors
    fn detect_motion() -> bool {
        if self.sensor_type != SensorType::Motion {
            return false
        }
        let raw = self.read_raw_value()
        return raw > self.get_motion_threshold()
    }

    fn get_motion_threshold() -> u16 {
        return 1000  // Configurable threshold
    }

    fn calibrate_motion_sensor() {
        // Complex calibration routine - rarely used
        for i in 0..100 {
            let _ = self.read_raw_value()
            self.sleep_ms(10)
        }
    }

    // Light sensor methods
    fn read_light_level() -> f32 {
        if self.sensor_type != SensorType::Light {
            return 0.0
        }
        let raw = self.read_raw_value()
        return self.convert_to_lux(raw)
    }

    fn convert_to_lux(raw: u16) -> f32 {
        return raw as f32 * 0.25
    }

    // Pressure sensor methods
    fn read_pressure() -> f32 {
        if self.sensor_type != SensorType::Pressure {
            return 0.0
        }
        let raw = self.read_raw_value()
        return self.convert_to_hpa(raw)
    }

    fn convert_to_hpa(raw: u16) -> f32 {
        return 300.0 + (raw as f32 * 1100.0 / 65535.0)
    }

    // Debug and diagnostic functions - only needed in development
    fn print_debug_info() {
        #[cfg(debug)]
        {
            println("Sensor ID: ${self.id}")
            println("Type: ${self.sensor_type}")
            println("Battery: ${self.battery_level}%")
        }
    }

    fn run_diagnostics() -> DiagnosticResult {
        #[cfg(debug)]
        {
            return DiagnosticResult{
                sensor_ok: self.test_sensor_communication(),
                battery_ok: self.battery_level > 10,
                calibration_ok: self.test_calibration()
            }
        }
        #[cfg(not(debug))]
        {
            return DiagnosticResult::default()
        }
    }

    // Low-level hardware interface
    fn read_sensor_register(reg: u8) -> u16 {
        // Platform-specific implementation
        #[cfg(target = "atmega328")]
        {
            return atmega328_read_adc(reg)
        }
        #[cfg(target = "esp32")]
        {
            return esp32_read_adc(reg)
        }
        #[cfg(target = "stm32")]
        {
            return stm32_read_adc(reg)
        }
    }

    fn sleep_ms(ms: u32) {
        #[cfg(target = "atmega328")]
        {
            atmega328_sleep(ms)
        }
        #[cfg(target = "esp32")]
        {
            esp32_delay(ms)
        }
        #[cfg(target = "stm32")]
        {
            stm32_delay(ms)
        }
    }
}

struct DiagnosticResult {
    sensor_ok: bool
    battery_ok: bool
    calibration_ok: bool
}

// Platform-specific implementations that can be eliminated
#[cfg(target = "atmega328")]
fn atmega328_read_adc(channel: u8) -> u16 {
    // ATmega328 ADC implementation
    unsafe {
        let admux = 0x40 | (channel & 0x0F)
        write_register(0x7C, admux)
        write_register(0x7A, 0xC7)  // Start conversion
        
        while (read_register(0x7A) & 0x40) != 0 {
            // Wait for conversion
        }
        
        return (read_register(0x78) as u16) | ((read_register(0x79) as u16) << 8)
    }
}

#[cfg(target = "esp32")]
fn esp32_read_adc(channel: u8) -> u16 {
    // ESP32 ADC implementation
    unsafe {
        let adc_config = 0x80000000 | (channel as u32)
        write_register32(0x3FF48800, adc_config)
        
        while (read_register32(0x3FF48800) & 0x80000000) != 0 {
            // Wait for conversion
        }
        
        return (read_register32(0x3FF48804) & 0xFFF) as u16
    }
}

#[cfg(target = "stm32")]
fn stm32_read_adc(channel: u8) -> u16 {
    // STM32 ADC implementation
    unsafe {
        write_register32(0x40012400, 0x00000001)  // Enable ADC
        write_register32(0x40012408, channel as u32)  // Set channel
        write_register32(0x40012408, 0x40000000)  // Start conversion
        
        while (read_register32(0x40012400) & 0x00000002) == 0 {
            // Wait for conversion
        }
        
        return (read_register32(0x4001240C) & 0xFFF) as u16
    }
}

// Example application - Temperature monitoring only
fn temperature_monitor_main() {
    let mut sensor = SensorDevice::new(1, SensorType::Temperature)
    
    loop {
        let temp_c = sensor.read_temperature()
        
        if temp_c > 30.0 {
            // Send alert - simplified for embedded
            transmit_alert(temp_c)
        }
        
        sensor.sleep_ms(5000)  // Read every 5 seconds
    }
}

// Humidity monitoring application
fn humidity_monitor_main() {
    let mut sensor = SensorDevice::new(2, SensorType::Humidity)
    
    loop {
        let humidity = sensor.read_humidity()
        
        if humidity > 80.0 {
            transmit_alert(humidity)
        }
        
        sensor.sleep_ms(10000)  // Read every 10 seconds
    }
}

// Multi-sensor application (needs more functions)
fn multi_sensor_main() {
    let mut temp_sensor = SensorDevice::new(1, SensorType::Temperature)
    let mut humidity_sensor = SensorDevice::new(2, SensorType::Humidity)
    let mut motion_sensor = SensorDevice::new(3, SensorType::Motion)
    
    loop {
        let temp = temp_sensor.read_temperature()
        let humidity = humidity_sensor.read_humidity()
        let motion = motion_sensor.detect_motion()
        
        transmit_sensor_data(temp, humidity, motion)
        
        // Sleep for 30 seconds
        temp_sensor.sleep_ms(30000)
    }
}

fn transmit_alert(value: f32) {
    // Simplified transmission
    println("ALERT: ${value}")
}

fn transmit_sensor_data(temp: f32, humidity: f32, motion: bool) {
    println("Data: T=${temp}, H=${humidity}, M=${motion}")
}

// Demonstrate tree-shaking analysis
fn demonstrate_tree_shaking() {
    println("=== IoT Tree-Shaking Optimization Demo ===")
    
    // Analyze temperature-only application
    println("\n1. Temperature Monitor Application:")
    let temp_ast = parse_file("temperature_monitor_main")
    let temp_analyzer = analyze_program(temp_ast)
    let temp_resolver = resolve_dependencies(temp_analyzer)
    
    let temp_report = temp_analyzer.get_report()
    println("  Original functions: ${temp_report.total_functions}")
    println("  Reachable functions: ${temp_report.reachable_functions}")
    println("  Dead functions: ${temp_report.dead_functions}")
    
    // Show eliminated functions for temperature app
    println("\n  Functions eliminated for temperature-only:")
    for func in temp_analyzer.dead_functions {
        if func.contains("humidity") || func.contains("motion") || 
           func.contains("light") || func.contains("pressure") {
            println("    - ${func}")
        }
    }
    
    // Platform-specific elimination
    println("\n2. Platform-Specific Optimization (ATmega328):")
    let atmega_eliminator = optimize_for_platform(temp_resolver, "atmega328")
    let atmega_report = atmega_eliminator.generate_report()
    
    println("  Eliminated ESP32 functions: ${count_platform_functions(atmega_report, "esp32")}")
    println("  Eliminated STM32 functions: ${count_platform_functions(atmega_report, "stm32")}")
    println("  Size reduction: ${atmega_report.size_reduction_percent}%")
    
    // Debug vs Release comparison
    println("\n3. Debug vs Release Optimization:")
    let debug_size = estimate_binary_size(temp_ast, BuildMode::Debug)
    let release_size = estimate_binary_size(temp_ast, BuildMode::Release)
    
    println("  Debug build size: ${debug_size} bytes")
    println("  Release build size: ${release_size} bytes")
    println("  Debug code eliminated: ${debug_size - release_size} bytes")
    
    // Method-level analysis
    println("\n4. Method-Level Analysis:")
    show_method_usage_stats(temp_analyzer)
}

fn show_method_usage_stats(analyzer: FunctionAnalyzer) {
    println("  SensorDevice method usage:")
    
    let methods = [
        "SensorDevice.new",
        "SensorDevice.read_temperature",
        "SensorDevice.convert_to_celsius", 
        "SensorDevice.convert_to_fahrenheit",
        "SensorDevice.read_humidity",
        "SensorDevice.read_motion",
        "SensorDevice.calibrate_motion_sensor",
        "SensorDevice.print_debug_info",
        "SensorDevice.run_diagnostics"
    ]
    
    for method in methods {
        if let usage = analyzer.method_usage[method] {
            let status = if usage.is_reachable { "USED" } else { "ELIMINATED" }
            println("    ${method}: ${status} (${usage.call_count} calls)")
        }
    }
}

fn estimate_binary_size(ast: AST, build_mode: BuildMode) -> int {
    let analyzer = analyze_program(ast)
    let resolver = resolve_dependencies(analyzer)
    
    let options = EliminationOptions{
        strategy: EliminationStrategy::Remove,
        max_risk_level: RiskLevel::Medium,
        remove_call_sites: true,
        preserve_exports: false,
        target_platform: null
    }
    
    // Adjust for build mode
    match build_mode {
        BuildMode::Debug => {
            options.max_risk_level = RiskLevel::Low  // Keep debug functions
        }
        BuildMode::Release => {
            options.max_risk_level = RiskLevel::High  // Aggressive optimization
        }
    }
    
    let eliminator = CodeEliminator::new(analyzer, resolver)
    let result = eliminator.execute_elimination(ast, options)
    
    return result.final_size
}

// Size comparison for different sensor configurations
fn compare_sensor_configurations() {
    println("\n=== Sensor Configuration Size Comparison ===")
    
    let configurations = [
        ("Temperature Only", "temperature_monitor_main"),
        ("Humidity Only", "humidity_monitor_main"), 
        ("Multi-Sensor", "multi_sensor_main")
    ]
    
    for (name, entry_point) in configurations {
        let ast = parse_with_entry_point(entry_point)
        let size = estimate_binary_size(ast, BuildMode::Release)
        println("  ${name}: ${size} bytes")
    }
    
    // Show detailed breakdown for temperature-only
    println("\n  Temperature-only detailed breakdown:")
    let temp_ast = parse_with_entry_point("temperature_monitor_main")
    let analyzer = analyze_program(temp_ast)
    
    let core_size = estimate_function_group_size(analyzer, [
        "SensorDevice.new",
        "SensorDevice.read_raw_value", 
        "SensorDevice.read_temperature",
        "SensorDevice.convert_to_celsius"
    ])
    
    let platform_size = estimate_function_group_size(analyzer, [
        "atmega328_read_adc",
        "atmega328_sleep"
    ])
    
    let eliminated_size = estimate_function_group_size(analyzer, [
        "SensorDevice.read_humidity",
        "SensorDevice.read_motion",
        "SensorDevice.read_light_level",
        "SensorDevice.read_pressure",
        "esp32_read_adc",
        "stm32_read_adc"
    ])
    
    println("    Core functions: ${core_size} bytes")
    println("    Platform-specific: ${platform_size} bytes")
    println("    Eliminated functions: ${eliminated_size} bytes saved")
}

enum BuildMode {
    Debug,
    Release
}

// Helper functions for analysis
fn count_platform_functions(report: EliminationReport, platform: string) -> int {
    return report.eliminated_functions
        .filter(|f| f.contains(platform))
        .count()
}

fn estimate_function_group_size(analyzer: FunctionAnalyzer, functions: []string) -> int {
    let mut total_size = 0
    for func in functions {
        if let info = analyzer.function_info[func] {
            total_size += info.estimated_size
        }
    }
    return total_size
}

// Entry point for demonstration
fn main() {
    demonstrate_tree_shaking()
    compare_sensor_configurations()
}
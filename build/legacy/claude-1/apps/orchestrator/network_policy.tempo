// ╔═════╦═════╦═════╗
// ║ 🛡️  ║ ⚖️  ║ ⚡  ║
// ║  C  ║  E  ║  G  ║
// ╚═════╩═════╩═════╝
// ╔═════════════════╗
// ║ wcet [T∞] bound ║
// ╚═════════════════╝
//
// Author: Ignacio Peña Sepúlveda
// Date: June 25, 2025

// Deterministic Network Policies
// Provides predictable network isolation and traffic control

namespace network_policy {
    using orchestrator::{Pod, Node};
    
    // Network policy constants
    const MAX_POLICIES_PER_POD = 32;
    const MAX_RULES_PER_POLICY = 64;
    const MAX_CIDR_BLOCKS = 16;
    const MAX_PORTS_PER_RULE = 32;
    const MAX_SELECTORS = 16;
    const POLICY_CACHE_SIZE = 10000;
    const FLOW_TABLE_SIZE = 100000;
    const CONNECTION_TIMEOUT = 300s;  // 5 minutes
    
    // Network controller manages all network policies
    struct NetworkController {
        policies: hashmap<u64, NetworkPolicy>;  // policy_id -> NetworkPolicy
        pod_policies: hashmap<u64, array<u64, MAX_POLICIES_PER_POD>>;  // pod_id -> policy_ids
        flow_table: FlowTable;
        policy_cache: PolicyCache;
        virtual_networks: hashmap<string<64>, VirtualNetwork>;  // namespace -> VNet
        bandwidth_limiter: BandwidthLimiter;
        metrics: NetworkMetrics;
    }
    
    // Network policy definition
    struct NetworkPolicy {
        id: u64;
        name: string<128>;
        namespace: string<64>;
        pod_selector: LabelSelector;
        policy_types: PolicyTypes;
        ingress_rules: array<IngressRule, MAX_RULES_PER_POLICY>;
        ingress_rule_count: u8;
        egress_rules: array<EgressRule, MAX_RULES_PER_POLICY>;
        egress_rule_count: u8;
        priority: u16;  // Higher priority policies override lower ones
        creation_time: timestamp;
        enabled: bool;
    }
    
    struct PolicyTypes {
        ingress: bool;
        egress: bool;
    }
    
    struct IngressRule {
        from_selectors: array<NetworkPolicyPeer, MAX_SELECTORS>;
        from_count: u8;
        ports: array<NetworkPolicyPort, MAX_PORTS_PER_RULE>;
        port_count: u8;
        action: RuleAction;
    }
    
    struct EgressRule {
        to_selectors: array<NetworkPolicyPeer, MAX_SELECTORS>;
        to_count: u8;
        ports: array<NetworkPolicyPort, MAX_PORTS_PER_RULE>;
        port_count: u8;
        action: RuleAction;
    }
    
    enum RuleAction {
        Allow,
        Deny,
        Log,
        RateLimit(u32)  // bytes per second
    }
    
    struct NetworkPolicyPeer {
        pod_selector: LabelSelector?;
        namespace_selector: LabelSelector?;
        ip_blocks: array<IPBlock, MAX_CIDR_BLOCKS>;
        ip_block_count: u8;
    }
    
    struct IPBlock {
        cidr: CIDR;
        except: array<CIDR, 8>;
        except_count: u8;
    }
    
    struct CIDR {
        ip: u32;      // IPv4 address
        prefix_len: u8;
    }
    
    struct NetworkPolicyPort {
        protocol: Protocol;
        port: u16?;
        port_range: PortRange?;
    }
    
    struct PortRange {
        start: u16;
        end: u16;
    }
    
    struct LabelSelector {
        match_labels: hashmap<string<64>, string<64>>;
        match_expressions: array<LabelSelectorRequirement, 8>;
        expression_count: u8;
    }
    
    struct LabelSelectorRequirement {
        key: string<64>;
        operator: SelectorOperator;
        values: array<string<64>, 8>;
        value_count: u8;
    }
    
    enum SelectorOperator {
        In,
        NotIn,
        Exists,
        DoesNotExist
    }
    
    // Flow tracking for stateful policies
    struct FlowTable {
        entries: array<FlowEntry, FLOW_TABLE_SIZE>;
        entry_count: u32;
        hash_buckets: array<u32, 1024>;  // Hash table for quick lookups
    }
    
    struct FlowEntry {
        src_ip: u32;
        dst_ip: u32;
        src_port: u16;
        dst_port: u16;
        protocol: Protocol;
        state: ConnectionState;
        action: RuleAction;
        packets: u64;
        bytes: u64;
        creation_time: timestamp;
        last_seen: timestamp;
        pod_id: u64;
        policy_id: u64;
    }
    
    enum ConnectionState {
        New,
        Established,
        Related,
        Invalid,
        Closed
    }
    
    enum Protocol {
        TCP,
        UDP,
        ICMP,
        SCTP,
        Any
    }
    
    // Virtual network for namespace isolation
    struct VirtualNetwork {
        id: u32;
        namespace: string<64>;
        subnet: CIDR;
        gateway_ip: u32;
        dns_servers: array<u32, 4>;
        dns_count: u8;
        vxlan_id: u32;  // VXLAN network identifier
        isolation_mode: IsolationMode;
    }
    
    enum IsolationMode {
        None,          // No isolation
        Namespace,     // Namespace level isolation
        Strict         // Complete isolation
    }
    
    // Bandwidth limiting
    struct BandwidthLimiter {
        pod_limits: hashmap<u64, BandwidthLimit>;  // pod_id -> limits
        interface_shapers: hashmap<u32, InterfaceShaper>;  // interface_id -> shaper
    }
    
    struct BandwidthLimit {
        ingress_rate_mbps: u16;
        egress_rate_mbps: u16;
        burst_size_kb: u32;
    }
    
    struct InterfaceShaper {
        interface_name: string<32>;
        total_bandwidth_mbps: u16;
        allocated_bandwidth_mbps: u16;
        queue_discipline: QueueDiscipline;
        classes: array<TrafficClass, 16>;
        class_count: u8;
    }
    
    enum QueueDiscipline {
        FIFO,
        PriorityQueue,
        FairQueue,
        TokenBucket,
        HTB  // Hierarchical Token Bucket
    }
    
    struct TrafficClass {
        class_id: u16;
        priority: u8;
        guaranteed_rate_mbps: u16;
        max_rate_mbps: u16;
        pods: array<u64, 32>;
        pod_count: u8;
    }
    
    // Policy cache for fast lookups
    struct PolicyCache {
        entries: hashmap<PolicyCacheKey, PolicyDecision>;
        hit_count: u64;
        miss_count: u64;
        last_cleanup: timestamp;
    }
    
    struct PolicyCacheKey {
        src_pod_id: u64;
        dst_pod_id: u64;
        dst_port: u16;
        protocol: Protocol;
    }
    
    struct PolicyDecision {
        allowed: bool;
        action: RuleAction;
        policy_id: u64;
        cached_time: timestamp;
    }
    
    struct NetworkMetrics {
        total_flows: u64;
        active_flows: u32;
        allowed_connections: u64;
        denied_connections: u64;
        policy_violations: u64;
        bandwidth_exceeded: u64;
        cache_hit_rate: f32;
    }
    
    // Network policy operations
    operation create_network_policy(controller: &mut NetworkController,
                                   spec: NetworkPolicySpec) -> Result<u64, NetworkError> {
        // Validate policy spec
        validate_policy_spec(&spec)?;
        
        let policy_id = generate_policy_id();
        
        // Create policy object
        let policy = NetworkPolicy {
            id: policy_id,
            name: spec.name,
            namespace: spec.namespace,
            pod_selector: spec.pod_selector,
            policy_types: spec.policy_types,
            ingress_rules: spec.ingress_rules,
            ingress_rule_count: spec.ingress_rules.len() as u8,
            egress_rules: spec.egress_rules,
            egress_rule_count: spec.egress_rules.len() as u8,
            priority: spec.priority,
            creation_time: current_time(),
            enabled: true
        };
        
        // Store policy
        controller.policies.insert(policy_id, policy);
        
        // Apply policy to matching pods
        apply_policy_to_pods(controller, policy_id)?;
        
        Ok(policy_id)
    }
    
    operation setup_pod_network(controller: &mut NetworkController,
                               pod_id: u64,
                               node_id: u32) -> Result<(), NetworkError> {
        // Get or create virtual network for pod's namespace
        let vnet = get_or_create_vnet(controller, get_pod_namespace(pod_id))?;
        
        // Allocate IP address for pod
        let pod_ip = allocate_pod_ip(vnet, pod_id)?;
        
        // Create virtual interface
        create_pod_interface(pod_id, pod_ip, vnet)?;
        
        // Apply network policies
        let policies = find_policies_for_pod(controller, pod_id);
        for policy_id in policies {
            apply_policy_to_pod(controller, policy_id, pod_id)?;
        }
        
        // Setup bandwidth limits if configured
        if let Some(limits) = get_pod_bandwidth_limits(pod_id) {
            setup_bandwidth_limits(controller, pod_id, limits)?;
        }
        
        Ok(())
    }
    
    operation check_network_policy(controller: &NetworkController,
                                  src_pod: u64,
                                  dst_pod: u64,
                                  port: u16,
                                  protocol: Protocol) -> PolicyDecision {
        // Check cache first
        let cache_key = PolicyCacheKey {
            src_pod_id: src_pod,
            dst_pod_id: dst_pod,
            dst_port: port,
            protocol
        };
        
        if let Some(cached) = controller.policy_cache.entries.get(&cache_key) {
            if current_time() - cached.cached_time < 60s {
                return *cached;
            }
        }
        
        // Evaluate policies
        let decision = evaluate_policies(controller, src_pod, dst_pod, port, protocol);
        
        // Cache decision
        controller.policy_cache.entries.insert(cache_key, decision);
        
        decision
    }
    
    operation add_flow(controller: &mut NetworkController,
                      flow: FlowInfo) -> Result<(), NetworkError> {
        // Check if flow is allowed by policy
        let decision = check_network_policy(
            controller,
            flow.src_pod_id,
            flow.dst_pod_id,
            flow.dst_port,
            flow.protocol
        );
        
        if !decision.allowed {
            controller.metrics.denied_connections += 1;
            return Err(NetworkError::PolicyDenied);
        }
        
        // Create flow entry
        let entry = FlowEntry {
            src_ip: flow.src_ip,
            dst_ip: flow.dst_ip,
            src_port: flow.src_port,
            dst_port: flow.dst_port,
            protocol: flow.protocol,
            state: ConnectionState::New,
            action: decision.action,
            packets: 0,
            bytes: 0,
            creation_time: current_time(),
            last_seen: current_time(),
            pod_id: flow.src_pod_id,
            policy_id: decision.policy_id
        };
        
        // Add to flow table
        add_flow_entry(&mut controller.flow_table, entry)?;
        
        controller.metrics.allowed_connections += 1;
        controller.metrics.total_flows += 1;
        
        Ok(())
    }
    
    operation update_flow_state(controller: &mut NetworkController,
                               flow_id: u32,
                               state: ConnectionState) -> Result<(), NetworkError> {
        let flow = get_flow_entry_mut(&mut controller.flow_table, flow_id)?;
        flow.state = state;
        flow.last_seen = current_time();
        
        if state == ConnectionState::Closed {
            controller.metrics.active_flows -= 1;
        }
        
        Ok(())
    }
    
    operation enforce_bandwidth_limits(controller: &mut NetworkController,
                                      pod_id: u64) -> Result<(), NetworkError> {
        let limits = controller.bandwidth_limiter.pod_limits.get(&pod_id)
            .ok_or(NetworkError::NoLimitsConfigured)?;
        
        // Get current usage
        let usage = get_pod_bandwidth_usage(pod_id)?;
        
        // Check if exceeding limits
        if usage.ingress_mbps > limits.ingress_rate_mbps ||
           usage.egress_mbps > limits.egress_rate_mbps {
            controller.metrics.bandwidth_exceeded += 1;
            
            // Apply traffic shaping
            apply_traffic_shaping(pod_id, limits)?;
        }
        
        Ok(())
    }
    
    operation remove_pod_policies(controller: &mut NetworkController,
                                 pod_id: u64) -> Result<(), NetworkError> {
        // Remove all flows for this pod
        cleanup_pod_flows(&mut controller.flow_table, pod_id);
        
        // Remove from policy mappings
        controller.pod_policies.remove(&pod_id);
        
        // Remove bandwidth limits
        controller.bandwidth_limiter.pod_limits.remove(&pod_id);
        
        // Clear cache entries
        invalidate_pod_cache_entries(&mut controller.policy_cache, pod_id);
        
        Ok(())
    }
    
    // Policy evaluation
    fn evaluate_policies(controller: &NetworkController,
                        src_pod: u64,
                        dst_pod: u64,
                        port: u16,
                        protocol: Protocol) -> PolicyDecision {
        let mut decision = PolicyDecision {
            allowed: true,  // Default allow if no policies
            action: RuleAction::Allow,
            policy_id: 0,
            cached_time: current_time()
        };
        
        // Get policies for destination pod
        if let Some(policy_ids) = controller.pod_policies.get(&dst_pod) {
            for i in 0..MAX_POLICIES_PER_POD {
                let policy_id = policy_ids[i];
                if policy_id == 0 {
                    break;
                }
                
                if let Some(policy) = controller.policies.get(&policy_id) {
                    if policy.enabled && policy.policy_types.ingress {
                        let result = evaluate_ingress_policy(
                            policy,
                            src_pod,
                            dst_pod,
                            port,
                            protocol
                        );
                        
                        if !result.allowed {
                            decision = result;
                            break;  // First deny wins
                        }
                    }
                }
            }
        }
        
        // Check egress policies for source pod
        if decision.allowed {
            if let Some(policy_ids) = controller.pod_policies.get(&src_pod) {
                for i in 0..MAX_POLICIES_PER_POD {
                    let policy_id = policy_ids[i];
                    if policy_id == 0 {
                        break;
                    }
                    
                    if let Some(policy) = controller.policies.get(&policy_id) {
                        if policy.enabled && policy.policy_types.egress {
                            let result = evaluate_egress_policy(
                                policy,
                                src_pod,
                                dst_pod,
                                port,
                                protocol
                            );
                            
                            if !result.allowed {
                                decision = result;
                                break;
                            }
                        }
                    }
                }
            }
        }
        
        decision
    }
    
    fn evaluate_ingress_policy(policy: &NetworkPolicy,
                              src_pod: u64,
                              dst_pod: u64,
                              port: u16,
                              protocol: Protocol) -> PolicyDecision {
        let mut decision = PolicyDecision {
            allowed: false,  // Default deny for policies
            action: RuleAction::Deny,
            policy_id: policy.id,
            cached_time: current_time()
        };
        
        // Check each ingress rule
        for i in 0..policy.ingress_rule_count {
            let rule = &policy.ingress_rules[i as usize];
            
            // Check if source matches
            let source_matches = check_peer_match(&rule.from_selectors[0..rule.from_count as usize], src_pod);
            
            // Check if port matches
            let port_matches = check_port_match(&rule.ports[0..rule.port_count as usize], port, protocol);
            
            if source_matches && port_matches {
                decision.allowed = true;
                decision.action = rule.action;
                break;
            }
        }
        
        decision
    }
    
    fn evaluate_egress_policy(policy: &NetworkPolicy,
                             src_pod: u64,
                             dst_pod: u64,
                             port: u16,
                             protocol: Protocol) -> PolicyDecision {
        let mut decision = PolicyDecision {
            allowed: false,
            action: RuleAction::Deny,
            policy_id: policy.id,
            cached_time: current_time()
        };
        
        // Check each egress rule
        for i in 0..policy.egress_rule_count {
            let rule = &policy.egress_rules[i as usize];
            
            // Check if destination matches
            let dest_matches = check_peer_match(&rule.to_selectors[0..rule.to_count as usize], dst_pod);
            
            // Check if port matches
            let port_matches = check_port_match(&rule.ports[0..rule.port_count as usize], port, protocol);
            
            if dest_matches && port_matches {
                decision.allowed = true;
                decision.action = rule.action;
                break;
            }
        }
        
        decision
    }
    
    // Flow management
    fn add_flow_entry(table: &mut FlowTable, entry: FlowEntry) -> Result<(), NetworkError> {
        if table.entry_count >= FLOW_TABLE_SIZE {
            // Clean up old flows
            cleanup_expired_flows(table);
            
            if table.entry_count >= FLOW_TABLE_SIZE {
                return Err(NetworkError::FlowTableFull);
            }
        }
        
        // Add to table
        let index = table.entry_count;
        table.entries[index as usize] = entry;
        table.entry_count += 1;
        
        // Update hash bucket
        let hash = hash_flow(&entry) % 1024;
        table.hash_buckets[hash as usize] = index;
        
        Ok(())
    }
    
    fn cleanup_expired_flows(table: &mut FlowTable) {
        let current_ts = current_time();
        let mut write_index = 0;
        
        for read_index in 0..table.entry_count {
            let flow = &table.entries[read_index as usize];
            
            // Keep flow if not expired
            if current_ts - flow.last_seen < CONNECTION_TIMEOUT &&
               flow.state != ConnectionState::Closed {
                if write_index != read_index {
                    table.entries[write_index as usize] = table.entries[read_index as usize];
                }
                write_index += 1;
            }
        }
        
        table.entry_count = write_index;
    }
    
    // Helper functions
    fn validate_policy_spec(spec: &NetworkPolicySpec) -> Result<(), NetworkError> {
        if spec.name.is_empty() {
            return Err(NetworkError::InvalidPolicySpec("Name required"));
        }
        
        if spec.namespace.is_empty() {
            return Err(NetworkError::InvalidPolicySpec("Namespace required"));
        }
        
        if !spec.policy_types.ingress && !spec.policy_types.egress {
            return Err(NetworkError::InvalidPolicySpec("At least one policy type required"));
        }
        
        Ok(())
    }
    
    fn hash_flow(entry: &FlowEntry) -> u32 {
        // Simple hash function for flow lookup
        let mut hash = entry.src_ip;
        hash ^= entry.dst_ip;
        hash ^= (entry.src_port as u32) << 16;
        hash ^= entry.dst_port as u32;
        hash ^= (entry.protocol as u32) << 24;
        hash
    }
    
    struct NetworkPolicySpec {
        name: string<128>;
        namespace: string<64>;
        pod_selector: LabelSelector;
        policy_types: PolicyTypes;
        ingress_rules: Vec<IngressRule>;
        egress_rules: Vec<EgressRule>;
        priority: u16;
    }
    
    struct FlowInfo {
        src_ip: u32;
        dst_ip: u32;
        src_port: u16;
        dst_port: u16;
        protocol: Protocol;
        src_pod_id: u64;
        dst_pod_id: u64;
    }
    
    enum NetworkError {
        InvalidPolicySpec(&'static str),
        PolicyNotFound,
        FlowTableFull,
        PolicyDenied,
        NoLimitsConfigured,
        IPAllocationFailed,
        InterfaceCreationFailed,
        BandwidthExceeded
    }
}
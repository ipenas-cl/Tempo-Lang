// ╔═════╦═════╦═════╗
// ║ 🛡️  ║ ⚖️  ║ ⚡  ║
// ║  C  ║  E  ║  G  ║
// ╚═════╩═════╩═════╝
// ╔═════════════════╗
// ║ wcet [T∞] bound ║
// ╚═════════════════╝
//
// Author: Ignacio Peña Sepúlveda
// Date: June 25, 2025

// DOOM Game Logic - Deterministic physics and game rules

// All standard library functions are globally available in Tempo
// No imports needed - everything built-in for offline programming

const FRACBITS: u32 = 16;
const FRACUNIT: i32 = 1 << FRACBITS;

// Fixed-point math for determinism
fn fixed_mul(a: i32, b: i32) -> i32 {
    ((a as i64 * b as i64) >> FRACBITS) as i32
}

fn fixed_div(a: i32, b: i32) -> i32 {
    if b == 0 { return 0; }
    ((a as i64) << FRACBITS / b as i64) as i32
}

struct GameLogic {
    // Game state
    map_data: MapData,
    players: Vec<Player>,
    monsters: Vec<Monster>,
    projectiles: Vec<Projectile>,
    items: Vec<Item>,
    
    // Game rules
    skill_level: u32,
    map_number: u32,
    game_tic: u32,
    
    // Collision detection
    blockmap: BlockMap,
    
    // State tables
    state_table: Vec<State>,
    mobj_info: Vec<MobjInfo>,
}

struct Player {
    // Position (fixed-point)
    x: i32,
    y: i32,
    z: i32,
    
    // Velocity (fixed-point)
    momx: i32,
    momy: i32,
    momz: i32,
    
    // Angles (BAM - Binary Angle Measurement)
    angle: u32,
    pitch: i32,
    
    // Stats
    health: u32,
    armor: u32,
    ammo: [u32; 6],
    max_ammo: [u32; 6],
    weapons: u32,
    current_weapon: u32,
    keys: u32,
    
    // Movement
    forward_move: i32,
    side_move: i32,
    turn_speed: i32,
    
    // State
    player_state: PlayerState,
    refire: u32,
    damagecount: u32,
    bonuscount: u32,
    
    // Collision
    radius: i32,
    height: i32,
}

struct Monster {
    // Position and movement
    x: i32,
    y: i32,
    z: i32,
    momx: i32,
    momy: i32,
    momz: i32,
    angle: u32,
    
    // Type and state
    mobj_type: u32,
    state: u32,
    tics: u32,
    health: i32,
    
    // AI
    target: Option<usize>,
    move_dir: u32,
    move_count: u32,
    reaction_time: u32,
    threshold: u32,
    
    // Physics
    radius: i32,
    height: i32,
    mass: i32,
    flags: u32,
}

struct Projectile {
    x: i32,
    y: i32,
    z: i32,
    momx: i32,
    momy: i32,
    momz: i32,
    
    proj_type: u32,
    damage: u32,
    owner: usize,
    
    radius: i32,
    height: i32,
}

struct Item {
    x: i32,
    y: i32,
    z: i32,
    
    item_type: u32,
    respawn_time: u32,
    flags: u32,
}

struct BlockMap {
    origin_x: i32,
    origin_y: i32,
    width: u32,
    height: u32,
    blocks: Vec<Vec<usize>>, // Lists of thing indices per block
}

struct State {
    sprite: u32,
    frame: u32,
    tics: u32,
    action: Option<fn(&mut GameLogic, usize)>,
    next_state: u32,
}

struct MobjInfo {
    spawn_state: u32,
    spawn_health: i32,
    see_state: u32,
    see_sound: u32,
    reaction_time: u32,
    attack_sound: u32,
    pain_state: u32,
    pain_chance: u32,
    pain_sound: u32,
    melee_state: u32,
    missile_state: u32,
    death_state: u32,
    xdeath_state: u32,
    death_sound: u32,
    speed: i32,
    radius: i32,
    height: i32,
    mass: i32,
    damage: u32,
    active_sound: u32,
    flags: u32,
}

enum PlayerState {
    Alive,
    Dead,
    Reborn,
}

struct ViewState {
    x: f32,
    y: f32,
    z: f32,
    angle: i32,
    pitch: i32,
}

struct PlayerStats {
    health: u32,
    armor: u32,
    ammo: [u32; 6],
    current_weapon: u32,
    keys: u32,
}

// Physics constants
const GRAVITY: i32 = FRACUNIT;
const MAXMOVE: i32 = 30 * FRACUNIT;
const STOPSPEED: i32 = 0x1000;
const FRICTION: i32 = 0xe800;

// Player constants
const PLAYER_RADIUS: i32 = 16 * FRACUNIT;
const PLAYER_HEIGHT: i32 = 56 * FRACUNIT;
const VIEWHEIGHT: i32 = 41 * FRACUNIT;

impl GameLogic {
    fn new() -> GameLogic {
        GameLogic {
            map_data: MapData::new(),
            players: Vec::new(),
            monsters: Vec::new(),
            projectiles: Vec::new(),
            items: Vec::new(),
            skill_level: 2,
            map_number: 1,
            game_tic: 0,
            blockmap: BlockMap::new(),
            state_table: Self::init_states(),
            mobj_info: Self::init_mobj_info(),
        }
    }
    
    fn init(&mut self, wad: &WadLoader) {
        // Initialize game tables
        self.state_table = Self::init_states();
        self.mobj_info = Self::init_mobj_info();
    }
    
    fn start_map(&mut self, map_num: u32, skill: u32) {
        self.map_number = map_num;
        self.skill_level = skill;
        self.game_tic = 0;
        
        // Clear entities
        self.players.clear();
        self.monsters.clear();
        self.projectiles.clear();
        self.items.clear();
        
        // Load map data (would be from WAD)
        // self.map_data = wad.load_map(&format!("E{}M{}", episode, map));
        
        // Spawn player
        self.spawn_player(0, 0, 0);
        
        // Spawn things based on skill level
        self.spawn_map_things();
        
        // Build blockmap
        self.build_blockmap();
    }
    
    fn update_tic(&mut self, tic: u32, input: &InputState, rng_index: &mut u32) {
        self.game_tic = tic;
        
        // Update players
        for i in 0..self.players.len() {
            self.update_player(i, input, rng_index);
        }
        
        // Update monsters
        for i in 0..self.monsters.len() {
            self.update_monster(i, rng_index);
        }
        
        // Update projectiles
        self.update_projectiles();
        
        // Check collisions
        self.check_collisions();
        
        // Respawn items
        self.update_items();
    }
    
    fn update_player(&mut self, player_idx: usize, input: &InputState, rng_index: &mut u32) {
        let player = &mut self.players[player_idx];
        
        // Dead player?
        if let PlayerState::Dead = player.player_state {
            player.damagecount = (player.damagecount.saturating_sub(1)).max(1);
            return;
        }
        
        // Movement
        player.forward_move = (input.forward_move as i32) << FRACBITS;
        player.side_move = (input.side_move as i32) << FRACBITS;
        player.angle = player.angle.wrapping_add((input.angle_turn as i32 * 256) as u32);
        
        // Apply movement forces
        let angle_rad = player.angle >> 19; // Convert BAM to table index
        let move_angle = player.angle;
        
        if input.buttons & 0x08 != 0 {
            // Strafe
            player.momx += fixed_mul(player.side_move, finecosine(move_angle));
            player.momy += fixed_mul(player.side_move, finesine(move_angle));
        } else {
            // Turn
            player.angle = player.angle.wrapping_add(input.angle_turn as u32);
        }
        
        // Forward/backward
        player.momx += fixed_mul(player.forward_move, finecosine(move_angle));
        player.momy += fixed_mul(player.forward_move, finesine(move_angle));
        
        // Speed limit
        let speed = fixed_mul(player.momx, player.momx) + fixed_mul(player.momy, player.momy);
        if speed > MAXMOVE * MAXMOVE {
            let scale = fixed_div(MAXMOVE, isqrt(speed));
            player.momx = fixed_mul(player.momx, scale);
            player.momy = fixed_mul(player.momy, scale);
        }
        
        // Move player
        self.try_move(player_idx, player.x + player.momx, player.y + player.momy);
        
        // Apply friction
        if player.z <= self.get_floor_z(player.x, player.y) {
            if player.momx > -STOPSPEED && player.momx < STOPSPEED {
                player.momx = 0;
            } else {
                player.momx = fixed_mul(player.momx, FRICTION);
            }
            
            if player.momy > -STOPSPEED && player.momy < STOPSPEED {
                player.momy = 0;
            } else {
                player.momy = fixed_mul(player.momy, FRICTION);
            }
        }
        
        // Gravity
        if player.z > self.get_floor_z(player.x, player.y) {
            player.momz -= GRAVITY;
        }
        
        // Move vertically
        player.z += player.momz;
        let floor_z = self.get_floor_z(player.x, player.y);
        if player.z <= floor_z {
            player.z = floor_z;
            player.momz = 0;
        }
        
        // Weapon actions
        if input.buttons & 0x01 != 0 {
            self.fire_weapon(player_idx, rng_index);
        }
        
        // Use button
        if input.buttons & 0x02 != 0 {
            self.use_lines(player_idx);
        }
        
        // Damage flash
        if player.damagecount > 0 {
            player.damagecount -= 1;
        }
        
        // Bonus flash
        if player.bonuscount > 0 {
            player.bonuscount -= 1;
        }
    }
    
    fn update_monster(&mut self, monster_idx: usize, rng_index: &mut u32) {
        let monster = &mut self.monsters[monster_idx];
        
        // Update state
        if monster.tics > 0 {
            monster.tics -= 1;
            if monster.tics == 0 {
                // Advance to next state
                let next_state = self.state_table[monster.state as usize].next_state;
                self.set_mobj_state(monster_idx, next_state);
            }
        }
        
        // AI think
        if monster.move_count > 0 {
            monster.move_count -= 1;
        } else {
            self.monster_think(monster_idx, rng_index);
        }
        
        // Movement
        if monster.momx != 0 || monster.momy != 0 {
            let new_x = monster.x + monster.momx;
            let new_y = monster.y + monster.momy;
            
            if self.check_position(new_x, new_y, monster.radius, monster.height) {
                monster.x = new_x;
                monster.y = new_y;
            } else {
                // Hit wall, choose new direction
                self.new_chase_dir(monster_idx);
            }
        }
        
        // Apply friction
        monster.momx = fixed_mul(monster.momx, FRICTION);
        monster.momy = fixed_mul(monster.momy, FRICTION);
        
        // Gravity
        if monster.z > self.get_floor_z(monster.x, monster.y) {
            monster.momz -= GRAVITY / 4; // Monsters fall slower
        }
        
        monster.z += monster.momz;
        let floor_z = self.get_floor_z(monster.x, monster.y);
        if monster.z <= floor_z {
            monster.z = floor_z;
            monster.momz = 0;
        }
    }
    
    fn monster_think(&mut self, monster_idx: usize, rng_index: &mut u32) {
        let monster = &self.monsters[monster_idx];
        
        // Look for targets
        if monster.target.is_none() {
            if self.look_for_players(monster_idx) {
                // Found target, go to see state
                let see_state = self.mobj_info[monster.mobj_type as usize].see_state;
                self.set_mobj_state(monster_idx, see_state);
                return;
            }
        }
        
        // Chase target
        if let Some(target_idx) = monster.target {
            // Check if target is still alive
            if self.players[target_idx].health == 0 {
                self.monsters[monster_idx].target = None;
                return;
            }
            
            // Move towards target
            self.chase_move(monster_idx);
            
            // Try to attack
            if p_random(rng_index) < 128 {
                if self.check_melee_range(monster_idx) {
                    let melee_state = self.mobj_info[monster.mobj_type as usize].melee_state;
                    if melee_state != 0 {
                        self.set_mobj_state(monster_idx, melee_state);
                        return;
                    }
                }
                
                if self.check_missile_range(monster_idx) {
                    let missile_state = self.mobj_info[monster.mobj_type as usize].missile_state;
                    if missile_state != 0 {
                        self.set_mobj_state(monster_idx, missile_state);
                        return;
                    }
                }
            }
        }
    }
    
    fn update_projectiles(&mut self) {
        let mut i = 0;
        while i < self.projectiles.len() {
            let proj = &mut self.projectiles[i];
            
            // Move projectile
            proj.x += proj.momx;
            proj.y += proj.momy;
            proj.z += proj.momz;
            
            // Check for impact
            if self.check_projectile_impact(i) {
                self.projectiles.remove(i);
            } else {
                i += 1;
            }
        }
    }
    
    fn check_collisions(&mut self) {
        // Player-monster collisions
        for p in 0..self.players.len() {
            for m in 0..self.monsters.len() {
                if self.check_thing_collision(
                    self.players[p].x, self.players[p].y,
                    self.players[p].radius, self.players[p].height,
                    self.monsters[m].x, self.monsters[m].y,
                    self.monsters[m].radius, self.monsters[m].height
                ) {
                    // Monster touches player - damage
                    let damage = self.mobj_info[self.monsters[m].mobj_type as usize].damage;
                    self.damage_player(p, damage as i32);
                }
            }
        }
        
        // Player-item collisions
        let mut i = 0;
        while i < self.items.len() {
            let mut picked_up = false;
            
            for p in 0..self.players.len() {
                if self.check_thing_collision(
                    self.players[p].x, self.players[p].y,
                    self.players[p].radius, self.players[p].height,
                    self.items[i].x, self.items[i].y,
                    FRACUNIT * 16, FRACUNIT * 16
                ) {
                    if self.give_item(p, self.items[i].item_type) {
                        picked_up = true;
                        break;
                    }
                }
            }
            
            if picked_up {
                self.items[i].respawn_time = 30 * 35; // 30 seconds
                self.items[i].flags |= 0x0001; // Hidden
            }
            
            i += 1;
        }
    }
    
    fn check_thing_collision(&self, x1: i32, y1: i32, r1: i32, h1: i32,
                            x2: i32, y2: i32, r2: i32, h2: i32) -> bool {
        let dx = (x1 - x2).abs();
        let dy = (y1 - y2).abs();
        let dist = r1 + r2;
        
        dx < dist && dy < dist
    }
    
    fn try_move(&mut self, thing_idx: usize, x: i32, y: i32) -> bool {
        let player = &self.players[thing_idx];
        
        if !self.check_position(x, y, player.radius, player.height) {
            return false;
        }
        
        self.players[thing_idx].x = x;
        self.players[thing_idx].y = y;
        
        true
    }
    
    fn check_position(&self, x: i32, y: i32, radius: i32, height: i32) -> bool {
        // Check walls
        // Simplified - would check against linedefs
        
        // Check things
        for monster in &self.monsters {
            if self.check_thing_collision(x, y, radius, height,
                                        monster.x, monster.y, 
                                        monster.radius, monster.height) {
                return false;
            }
        }
        
        true
    }
    
    fn fire_weapon(&mut self, player_idx: usize, rng_index: &mut u32) {
        let player = &mut self.players[player_idx];
        
        if player.refire > 0 {
            return;
        }
        
        // Check ammo
        let weapon = player.current_weapon;
        let ammo_type = self.get_weapon_ammo_type(weapon);
        if ammo_type < 6 && player.ammo[ammo_type] == 0 {
            return;
        }
        
        // Use ammo
        if ammo_type < 6 {
            player.ammo[ammo_type] -= 1;
        }
        
        // Fire based on weapon type
        match weapon {
            1 => { // Pistol
                self.fire_hitscan(player_idx, 5 + p_random(rng_index) % 10, rng_index);
                player.refire = 6;
            },
            2 => { // Shotgun
                for _ in 0..7 {
                    self.fire_hitscan(player_idx, 5 + p_random(rng_index) % 10, rng_index);
                }
                player.refire = 20;
            },
            3 => { // Chaingun
                self.fire_hitscan(player_idx, 5 + p_random(rng_index) % 10, rng_index);
                player.refire = 4;
            },
            4 => { // Rocket launcher
                self.fire_projectile(player_idx, ProjectileType::Rocket);
                player.refire = 25;
            },
            5 => { // Plasma gun
                self.fire_projectile(player_idx, ProjectileType::Plasma);
                player.refire = 3;
            },
            6 => { // BFG
                self.fire_projectile(player_idx, ProjectileType::BFG);
                player.refire = 35;
            },
            _ => {}
        }
    }
    
    fn fire_hitscan(&mut self, player_idx: usize, damage: u32, rng_index: &mut u32) {
        let player = &self.players[player_idx];
        
        // Add spread
        let spread = ((p_random(rng_index) - p_random(rng_index)) as i32) << 18;
        let angle = player.angle.wrapping_add(spread as u32);
        
        // Trace line
        let cos = finecosine(angle);
        let sin = finesine(angle);
        
        let mut x = player.x;
        let mut y = player.y;
        let z = player.z + VIEWHEIGHT;
        
        // Simplified line trace
        for _ in 0..100 {
            x += cos * (FRACUNIT * 16);
            y += sin * (FRACUNIT * 16);
            
            // Check for monster hit
            for (i, monster) in self.monsters.iter().enumerate() {
                if self.check_thing_collision(x, y, 0, 0,
                                            monster.x, monster.y,
                                            monster.radius, monster.height) {
                    self.damage_monster(i, damage as i32);
                    return;
                }
            }
        }
    }
    
    fn fire_projectile(&mut self, player_idx: usize, proj_type: ProjectileType) {
        let player = &self.players[player_idx];
        
        let speed = match proj_type {
            ProjectileType::Rocket => 20 * FRACUNIT,
            ProjectileType::Plasma => 25 * FRACUNIT,
            ProjectileType::BFG => 30 * FRACUNIT,
        };
        
        let damage = match proj_type {
            ProjectileType::Rocket => 100,
            ProjectileType::Plasma => 20,
            ProjectileType::BFG => 200,
        };
        
        self.projectiles.push(Projectile {
            x: player.x,
            y: player.y,
            z: player.z + VIEWHEIGHT,
            momx: fixed_mul(speed, finecosine(player.angle)),
            momy: fixed_mul(speed, finesine(player.angle)),
            momz: 0,
            proj_type: proj_type as u32,
            damage,
            owner: player_idx,
            radius: 8 * FRACUNIT,
            height: 8 * FRACUNIT,
        });
    }
    
    fn check_projectile_impact(&mut self, proj_idx: usize) -> bool {
        let proj = &self.projectiles[proj_idx];
        
        // Check monster hits
        for i in 0..self.monsters.len() {
            if self.check_thing_collision(
                proj.x, proj.y, proj.radius, proj.height,
                self.monsters[i].x, self.monsters[i].y,
                self.monsters[i].radius, self.monsters[i].height
            ) {
                self.damage_monster(i, proj.damage as i32);
                return true;
            }
        }
        
        // Check wall hit (simplified)
        if !self.check_position(proj.x, proj.y, proj.radius, proj.height) {
            // Explosion for rockets
            if proj.proj_type == ProjectileType::Rocket as u32 {
                self.explosion_damage(proj.x, proj.y, 128 * FRACUNIT, 100);
            }
            return true;
        }
        
        false
    }
    
    fn explosion_damage(&mut self, x: i32, y: i32, radius: i32, max_damage: i32) {
        // Damage all things in radius
        for i in 0..self.monsters.len() {
            let dx = self.monsters[i].x - x;
            let dy = self.monsters[i].y - y;
            let dist = isqrt(fixed_mul(dx, dx) + fixed_mul(dy, dy));
            
            if dist < radius {
                let damage = max_damage - (max_damage * dist / radius);
                self.damage_monster(i, damage);
            }
        }
        
        for i in 0..self.players.len() {
            let dx = self.players[i].x - x;
            let dy = self.players[i].y - y;
            let dist = isqrt(fixed_mul(dx, dx) + fixed_mul(dy, dy));
            
            if dist < radius {
                let damage = max_damage - (max_damage * dist / radius);
                self.damage_player(i, damage);
            }
        }
    }
    
    fn damage_player(&mut self, player_idx: usize, damage: i32) {
        let player = &mut self.players[player_idx];
        
        // Apply armor
        let absorbed = damage.min(player.armor as i32);
        player.armor = player.armor.saturating_sub(absorbed as u32);
        let actual_damage = damage - absorbed / 2;
        
        player.health = player.health.saturating_sub(actual_damage.max(0) as u32);
        player.damagecount = 16; // Flash screen
        
        if player.health == 0 {
            player.player_state = PlayerState::Dead;
            // Play death sound
        }
    }
    
    fn damage_monster(&mut self, monster_idx: usize, damage: i32) {
        let monster = &mut self.monsters[monster_idx];
        
        monster.health -= damage;
        
        if monster.health <= 0 {
            // Go to death state
            let death_state = self.mobj_info[monster.mobj_type as usize].death_state;
            self.set_mobj_state(monster_idx, death_state);
            monster.flags &= !0x0002; // Clear solid flag
        } else {
            // Pain chance
            let pain_chance = self.mobj_info[monster.mobj_type as usize].pain_chance;
            if p_random(&mut 0) < pain_chance as u8 {
                let pain_state = self.mobj_info[monster.mobj_type as usize].pain_state;
                if pain_state != 0 {
                    self.set_mobj_state(monster_idx, pain_state);
                }
            }
        }
    }
    
    fn give_item(&mut self, player_idx: usize, item_type: u32) -> bool {
        let player = &mut self.players[player_idx];
        
        match item_type {
            // Health
            1 => { // Stimpack
                if player.health < 100 {
                    player.health = (player.health + 10).min(100);
                    return true;
                }
            },
            2 => { // Medikit
                if player.health < 100 {
                    player.health = (player.health + 25).min(100);
                    return true;
                }
            },
            // Armor
            3 => { // Armor bonus
                if player.armor < 200 {
                    player.armor = (player.armor + 1).min(200);
                    return true;
                }
            },
            4 => { // Green armor
                if player.armor < 100 {
                    player.armor = 100;
                    return true;
                }
            },
            // Ammo
            10 => { // Clip
                if player.ammo[0] < player.max_ammo[0] {
                    player.ammo[0] = (player.ammo[0] + 10).min(player.max_ammo[0]);
                    return true;
                }
            },
            11 => { // Box of bullets
                if player.ammo[0] < player.max_ammo[0] {
                    player.ammo[0] = (player.ammo[0] + 50).min(player.max_ammo[0]);
                    return true;
                }
            },
            // Keys
            20 => { // Red key
                player.keys |= 0x01;
                return true;
            },
            21 => { // Blue key
                player.keys |= 0x02;
                return true;
            },
            22 => { // Yellow key
                player.keys |= 0x04;
                return true;
            },
            _ => {}
        }
        
        false
    }
    
    fn update_items(&mut self) {
        for item in &mut self.items {
            if item.flags & 0x0001 != 0 && item.respawn_time > 0 {
                item.respawn_time -= 1;
                if item.respawn_time == 0 {
                    item.flags &= !0x0001; // Make visible again
                }
            }
        }
    }
    
    fn get_floor_z(&self, x: i32, y: i32) -> i32 {
        // Simplified - would check actual sector
        0
    }
    
    fn get_ceiling_z(&self, x: i32, y: i32) -> i32 {
        // Simplified - would check actual sector
        128 * FRACUNIT
    }
    
    fn get_weapon_ammo_type(&self, weapon: u32) -> usize {
        match weapon {
            0 => 6, // Fist - no ammo
            1 => 0, // Pistol - bullets
            2 => 1, // Shotgun - shells
            3 => 0, // Chaingun - bullets
            4 => 2, // Rocket launcher - rockets
            5 => 3, // Plasma gun - cells
            6 => 3, // BFG - cells
            7 => 6, // Chainsaw - no ammo
            _ => 6,
        }
    }
    
    fn spawn_player(&mut self, x: i32, y: i32, angle: u32) {
        self.players.push(Player {
            x: x * FRACUNIT,
            y: y * FRACUNIT,
            z: 0,
            momx: 0,
            momy: 0,
            momz: 0,
            angle,
            pitch: 0,
            health: 100,
            armor: 0,
            ammo: [50, 0, 0, 0, 0, 0],
            max_ammo: [200, 50, 50, 300, 0, 0],
            weapons: 0x03, // Fist and pistol
            current_weapon: 1,
            keys: 0,
            forward_move: 0,
            side_move: 0,
            turn_speed: 0,
            player_state: PlayerState::Alive,
            refire: 0,
            damagecount: 0,
            bonuscount: 0,
            radius: PLAYER_RADIUS,
            height: PLAYER_HEIGHT,
        });
    }
    
    fn spawn_map_things(&mut self) {
        // Spawn based on things in map and skill level
        // Simplified version
    }
    
    fn build_blockmap(&mut self) {
        // Build spatial index for collision detection
        // Simplified version
        self.blockmap = BlockMap::new();
    }
    
    fn look_for_players(&mut self, monster_idx: usize) -> bool {
        // Check if monster can see any players
        let monster = &self.monsters[monster_idx];
        
        for i in 0..self.players.len() {
            if self.check_sight(monster.x, monster.y, 
                              self.players[i].x, self.players[i].y) {
                self.monsters[monster_idx].target = Some(i);
                return true;
            }
        }
        
        false
    }
    
    fn check_sight(&self, x1: i32, y1: i32, x2: i32, y2: i32) -> bool {
        // Simplified LOS check
        true
    }
    
    fn chase_move(&mut self, monster_idx: usize) {
        let monster = &self.monsters[monster_idx];
        let target_idx = monster.target.unwrap();
        let target = &self.players[target_idx];
        
        let dx = target.x - monster.x;
        let dy = target.y - monster.y;
        
        let speed = self.mobj_info[monster.mobj_type as usize].speed;
        
        // Simple 8-directional movement
        let move_x = if dx > 0 { speed } else if dx < 0 { -speed } else { 0 };
        let move_y = if dy > 0 { speed } else if dy < 0 { -speed } else { 0 };
        
        self.monsters[monster_idx].momx = move_x;
        self.monsters[monster_idx].momy = move_y;
        self.monsters[monster_idx].move_count = 10;
    }
    
    fn new_chase_dir(&mut self, monster_idx: usize) {
        // Choose new movement direction
        let monster = &mut self.monsters[monster_idx];
        monster.move_dir = (monster.move_dir + 1) % 8;
        monster.move_count = 10;
    }
    
    fn check_melee_range(&self, monster_idx: usize) -> bool {
        let monster = &self.monsters[monster_idx];
        if let Some(target_idx) = monster.target {
            let target = &self.players[target_idx];
            let dx = (monster.x - target.x).abs();
            let dy = (monster.y - target.y).abs();
            let range = monster.radius + target.radius + 20 * FRACUNIT;
            
            dx < range && dy < range
        } else {
            false
        }
    }
    
    fn check_missile_range(&self, monster_idx: usize) -> bool {
        // Check if monster has clear shot at target
        let monster = &self.monsters[monster_idx];
        if let Some(target_idx) = monster.target {
            let target = &self.players[target_idx];
            self.check_sight(monster.x, monster.y, target.x, target.y)
        } else {
            false
        }
    }
    
    fn set_mobj_state(&mut self, monster_idx: usize, state: u32) {
        let monster = &mut self.monsters[monster_idx];
        monster.state = state;
        monster.tics = self.state_table[state as usize].tics;
        
        // Execute state action if any
        if let Some(action) = self.state_table[state as usize].action {
            action(self, monster_idx);
        }
    }
    
    fn use_lines(&mut self, player_idx: usize) {
        // Check for usable lines in front of player
        // Simplified - would check actual linedefs
    }
    
    fn get_view_state(&self, interpolation: f32) -> ViewState {
        if self.players.is_empty() {
            return ViewState {
                x: 0.0,
                y: 0.0,
                z: 0.0,
                angle: 0,
                pitch: 0,
            };
        }
        
        let player = &self.players[0];
        
        ViewState {
            x: (player.x as f32) / FRACUNIT as f32,
            y: (player.y as f32) / FRACUNIT as f32,
            z: (player.z as f32 + VIEWHEIGHT as f32) / FRACUNIT as f32,
            angle: player.angle as i32,
            pitch: player.pitch,
        }
    }
    
    fn get_player_state(&self) -> PlayerStats {
        if self.players.is_empty() {
            return PlayerStats {
                health: 0,
                armor: 0,
                ammo: [0; 6],
                current_weapon: 0,
                keys: 0,
            };
        }
        
        let player = &self.players[0];
        
        PlayerStats {
            health: player.health,
            armor: player.armor,
            ammo: player.ammo,
            current_weapon: player.current_weapon,
            keys: player.keys,
        }
    }
    
    fn get_map_data(&self) -> &MapData {
        &self.map_data
    }
    
    fn get_map_number(&self) -> u32 {
        self.map_number
    }
    
    fn get_skill(&self) -> u32 {
        self.skill_level
    }
    
    fn init_states() -> Vec<State> {
        // Initialize state table
        // Simplified - would have full state definitions
        vec![
            State { sprite: 0, frame: 0, tics: 0, action: None, next_state: 0 },
            // ... many more states
        ]
    }
    
    fn init_mobj_info() -> Vec<MobjInfo> {
        // Initialize monster/thing definitions
        // Simplified - would have full definitions
        vec![
            // Player
            MobjInfo {
                spawn_state: 0,
                spawn_health: 100,
                see_state: 0,
                see_sound: 0,
                reaction_time: 0,
                attack_sound: 0,
                pain_state: 0,
                pain_chance: 0,
                pain_sound: 0,
                melee_state: 0,
                missile_state: 0,
                death_state: 0,
                xdeath_state: 0,
                death_sound: 0,
                speed: 0,
                radius: PLAYER_RADIUS,
                height: PLAYER_HEIGHT,
                mass: 100,
                damage: 0,
                active_sound: 0,
                flags: 0x0002, // Solid
            },
            // ... more definitions
        ]
    }
}

impl BlockMap {
    fn new() -> BlockMap {
        BlockMap {
            origin_x: 0,
            origin_y: 0,
            width: 128,
            height: 128,
            blocks: vec![Vec::new(); 128 * 128],
        }
    }
}

enum ProjectileType {
    Rocket,
    Plasma,
    BFG,
}

// Fixed-point trig tables
fn finecosine(angle: u32) -> i32 {
    let index = (angle >> 19) & 0x1FFF;
    FINETABLE[index as usize]
}

fn finesine(angle: u32) -> i32 {
    let index = ((angle >> 19) + 2048) & 0x1FFF;
    FINETABLE[index as usize]
}

// Integer square root for fixed-point
fn isqrt(x: i32) -> i32 {
    if x <= 0 {
        return 0;
    }
    
    let mut result = x;
    let mut last = 0;
    
    while result != last {
        last = result;
        result = (result + x / result) / 2;
    }
    
    result
}

// Deterministic random (from main.tempo)
fn p_random(index: &mut u32) -> u8 {
    const RNDTABLE: [u8; 256] = [
        0,   8,  109, 220, 222, 241, 149, 107,  75, 248, 254, 140,  16,  66,
        74,  21, 211,  47,  80, 242, 154,  27, 205, 128, 161,  89,  77,  36,
        95, 110,  85,  48, 212, 140, 211, 249,  22,  79, 200,  50,  28, 188,
        52, 140, 202, 120,  68, 145,  62,  70, 184, 190,  91, 197, 152, 224,
        149, 104,  25, 178, 252, 182, 202, 182, 141, 197,   4,  81, 181, 242,
        145,  42,  39, 227, 156, 198, 225, 193, 219,  93, 122, 175, 249,   0,
        175, 143,  70, 239,  46, 246, 163,  53, 163, 109, 168, 135,   2, 235,
        25,  92,  20, 145, 138,  77,  69, 166,  78, 176, 173, 212, 166, 113,
        94, 161,  41,  50, 239,  49, 111, 164,  70,  60,   2,  37, 171,  75,
        136, 156,  11,  56,  42, 146, 138, 229,  73, 146,  77,  61,  98, 196,
        135, 106,  63, 197, 195,  86,  96, 203, 113, 101, 170, 247, 181, 113,
        80, 250, 108,   7, 255, 237, 129, 226,  79, 107, 112, 166, 103, 241,
        24, 223, 239, 120, 198,  58,  60,  82, 128,   3, 184,  66, 143, 224,
        145, 224,  81, 206, 163,  45,  63,  90, 168, 114,  59,  33, 159,  95,
        28, 139, 123,  98, 125, 196,  15,  70, 194, 253,  54,  14, 109, 226,
        71,  17, 161,  93, 186,  87, 244, 138,  20,  52, 123, 251,  26,  36,
        17,  46,  52, 231, 232,  76,  31, 221,  84,  37, 216, 165, 212, 106,
        197, 242,  98,  43,  39, 175, 254, 145, 190,  84, 118, 222, 187, 136,
        120, 163, 236, 249
    ];
    
    *index = (*index + 1) & 0xFF;
    RNDTABLE[*index as usize]
}

// Trig lookup table (simplified)
const FINETABLE: [i32; 8192] = [0; 8192]; // Would be populated with actual values
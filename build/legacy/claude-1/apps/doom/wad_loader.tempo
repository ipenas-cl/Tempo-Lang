// ╔═════╦═════╦═════╗
// ║ 🛡️  ║ ⚖️  ║ ⚡  ║
// ║  C  ║  E  ║  G  ║
// ╚═════╩═════╩═════╝
// ╔═════════════════╗
// ║ wcet [T∞] bound ║
// ╚═════════════════╝
//
// Author: Ignacio Peña Sepúlveda
// Date: June 25, 2025

// DOOM WAD File Loader - Parses WAD archives

// All standard library functions are globally available in Tempo
// No imports needed - everything built-in for offline programming

const WAD_HEADER_SIZE: usize = 12;
const DIRECTORY_ENTRY_SIZE: usize = 16;

struct WadLoader {
    wad_data: Vec<u8>,
    lumps: HashMap<String, LumpInfo>,
    
    // Cached data
    palettes: Vec<Palette>,
    colormaps: Vec<ColorMap>,
}

struct LumpInfo {
    offset: u32,
    size: u32,
}

struct Palette {
    colors: [(u8, u8, u8); 256],
}

struct ColorMap {
    map: [u8; 256],
}

#[repr(C, packed)]
struct WadHeader {
    identification: [u8; 4], // "IWAD" or "PWAD"
    num_lumps: u32,
    info_table_offset: u32,
}

#[repr(C, packed)]
struct DirectoryEntry {
    file_pos: u32,
    size: u32,
    name: [u8; 8],
}

impl WadLoader {
    fn new() -> WadLoader {
        WadLoader {
            wad_data: Vec::new(),
            lumps: HashMap::new(),
            palettes: Vec::new(),
            colormaps: Vec::new(),
        }
    }
    
    fn load(&mut self, path: &str) -> Result<(), String> {
        // Load WAD file
        self.wad_data = std::fs::read(path)
            .map_err(|e| format!("Failed to read WAD file: {}", e))?;
        
        // Parse header
        if self.wad_data.len() < WAD_HEADER_SIZE {
            return Err("WAD file too small".to_string());
        }
        
        let header = unsafe {
            &*(self.wad_data.as_ptr() as *const WadHeader)
        };
        
        // Verify magic
        let magic = std::str::from_utf8(&header.identification)
            .map_err(|_| "Invalid WAD magic")?;
        if magic != "IWAD" && magic != "PWAD" {
            return Err("Not a valid WAD file".to_string());
        }
        
        // Parse directory
        let num_lumps = u32::from_le(header.num_lumps) as usize;
        let dir_offset = u32::from_le(header.info_table_offset) as usize;
        
        if dir_offset + num_lumps * DIRECTORY_ENTRY_SIZE > self.wad_data.len() {
            return Err("Invalid directory offset".to_string());
        }
        
        // Read all lumps
        for i in 0..num_lumps {
            let entry_offset = dir_offset + i * DIRECTORY_ENTRY_SIZE;
            let entry = unsafe {
                &*(self.wad_data[entry_offset..].as_ptr() as *const DirectoryEntry)
            };
            
            // Get lump name (null-terminated)
            let name_bytes = &entry.name;
            let name_len = name_bytes.iter().position(|&b| b == 0).unwrap_or(8);
            let name = std::str::from_utf8(&name_bytes[..name_len])
                .unwrap_or("")
                .to_string();
            
            if !name.is_empty() {
                self.lumps.insert(name.clone(), LumpInfo {
                    offset: u32::from_le(entry.file_pos),
                    size: u32::from_le(entry.size),
                });
            }
        }
        
        // Load essential lumps
        self.load_palettes()?;
        self.load_colormaps()?;
        
        Ok(())
    }
    
    fn get_lump(&self, name: &str) -> Option<&[u8]> {
        self.lumps.get(name).map(|info| {
            let start = info.offset as usize;
            let end = start + info.size as usize;
            &self.wad_data[start..end]
        })
    }
    
    fn load_palettes(&mut self) -> Result<(), String> {
        let playpal = self.get_lump("PLAYPAL")
            .ok_or("PLAYPAL lump not found")?;
        
        // PLAYPAL contains 14 palettes of 256 RGB triplets each
        const PALETTE_SIZE: usize = 256 * 3;
        const NUM_PALETTES: usize = 14;
        
        if playpal.len() < PALETTE_SIZE * NUM_PALETTES {
            return Err("PLAYPAL lump too small".to_string());
        }
        
        for i in 0..NUM_PALETTES {
            let offset = i * PALETTE_SIZE;
            let mut palette = Palette {
                colors: [(0, 0, 0); 256],
            };
            
            for j in 0..256 {
                let idx = offset + j * 3;
                palette.colors[j] = (
                    playpal[idx],
                    playpal[idx + 1],
                    playpal[idx + 2],
                );
            }
            
            self.palettes.push(palette);
        }
        
        Ok(())
    }
    
    fn load_colormaps(&mut self) -> Result<(), String> {
        let colormap_data = self.get_lump("COLORMAP")
            .ok_or("COLORMAP lump not found")?;
        
        // COLORMAP contains 34 light levels
        const COLORMAP_SIZE: usize = 256;
        const NUM_COLORMAPS: usize = 34;
        
        if colormap_data.len() < COLORMAP_SIZE * NUM_COLORMAPS {
            return Err("COLORMAP lump too small".to_string());
        }
        
        for i in 0..NUM_COLORMAPS {
            let offset = i * COLORMAP_SIZE;
            let mut colormap = ColorMap {
                map: [0; 256],
            };
            
            colormap.map.copy_from_slice(&colormap_data[offset..offset + COLORMAP_SIZE]);
            self.colormaps.push(colormap);
        }
        
        Ok(())
    }
    
    fn load_map(&self, map_name: &str) -> Result<MapData, String> {
        let mut map_data = MapData::new();
        
        // Map lumps follow a specific order after the map marker
        let map_lumps = [
            "THINGS", "LINEDEFS", "SIDEDEFS", "VERTEXES", "SEGS",
            "SSECTORS", "NODES", "SECTORS", "REJECT", "BLOCKMAP"
        ];
        
        // Find map marker
        if self.lumps.get(map_name).is_none() {
            return Err(format!("Map {} not found", map_name));
        }
        
        // Load vertices
        if let Some(vertexes) = self.get_lump(&format!("{}_VERTEXES", map_name)) {
            map_data.load_vertices(vertexes)?;
        }
        
        // Load sectors
        if let Some(sectors) = self.get_lump(&format!("{}_SECTORS", map_name)) {
            map_data.load_sectors(sectors)?;
        }
        
        // Load linedefs
        if let Some(linedefs) = self.get_lump(&format!("{}_LINEDEFS", map_name)) {
            map_data.load_linedefs(linedefs)?;
        }
        
        // Load sidedefs
        if let Some(sidedefs) = self.get_lump(&format!("{}_SIDEDEFS", map_name)) {
            map_data.load_sidedefs(sidedefs)?;
        }
        
        // Load things
        if let Some(things) = self.get_lump(&format!("{}_THINGS", map_name)) {
            map_data.load_things(things)?;
        }
        
        // Load BSP data
        if let Some(nodes) = self.get_lump(&format!("{}_NODES", map_name)) {
            map_data.load_nodes(nodes)?;
        }
        
        if let Some(segs) = self.get_lump(&format!("{}_SEGS", map_name)) {
            map_data.load_segs(segs)?;
        }
        
        if let Some(ssectors) = self.get_lump(&format!("{}_SSECTORS", map_name)) {
            map_data.load_subsectors(ssectors)?;
        }
        
        Ok(map_data)
    }
    
    fn load_texture(&self, name: &str) -> Option<Texture> {
        let data = self.get_lump(name)?;
        
        if data.len() < 8 {
            return None;
        }
        
        // Parse picture format
        let width = u16::from_le_bytes([data[0], data[1]]) as u32;
        let height = u16::from_le_bytes([data[2], data[3]]) as u32;
        let left_offset = i16::from_le_bytes([data[4], data[5]]) as i32;
        let top_offset = i16::from_le_bytes([data[6], data[7]]) as i32;
        
        // Read column offsets
        let mut column_offsets = Vec::with_capacity(width as usize);
        for i in 0..width {
            let offset_idx = 8 + (i * 4) as usize;
            if offset_idx + 3 < data.len() {
                let offset = u32::from_le_bytes([
                    data[offset_idx],
                    data[offset_idx + 1],
                    data[offset_idx + 2],
                    data[offset_idx + 3],
                ]);
                column_offsets.push(offset);
            }
        }
        
        // Decode columns
        let mut pixels = vec![0u8; (width * height) as usize];
        
        for (col, &offset) in column_offsets.iter().enumerate() {
            let mut pos = offset as usize;
            
            while pos < data.len() {
                let row_start = data[pos];
                if row_start == 0xFF {
                    break; // End of column
                }
                
                pos += 1;
                if pos >= data.len() {
                    break;
                }
                
                let pixel_count = data[pos];
                pos += 2; // Skip dummy byte
                
                for i in 0..pixel_count {
                    if pos >= data.len() {
                        break;
                    }
                    
                    let row = row_start + i;
                    if row < height as u8 {
                        let pixel_idx = (row as u32 * width + col as u32) as usize;
                        if pixel_idx < pixels.len() {
                            pixels[pixel_idx] = data[pos];
                        }
                    }
                    pos += 1;
                }
                
                pos += 1; // Skip dummy byte
            }
        }
        
        Some(Texture {
            width,
            height,
            left_offset,
            top_offset,
            pixels,
        })
    }
    
    fn load_flat(&self, name: &str) -> Option<Flat> {
        let data = self.get_lump(name)?;
        
        // Flats are always 64x64 raw pixels
        const FLAT_SIZE: usize = 64 * 64;
        
        if data.len() != FLAT_SIZE {
            return None;
        }
        
        let mut pixels = [0u8; FLAT_SIZE];
        pixels.copy_from_slice(data);
        
        Some(Flat {
            pixels,
        })
    }
    
    fn load_sound(&self, name: &str) -> Option<Sound> {
        let data = self.get_lump(name)?;
        
        if data.len() < 8 {
            return None;
        }
        
        // Parse sound header
        let format_num = u16::from_le_bytes([data[0], data[1]]);
        let sample_rate = u16::from_le_bytes([data[2], data[3]]);
        let sample_count = u32::from_le_bytes([data[4], data[5], data[6], data[7]]);
        
        if format_num != 3 {
            return None; // Only support format 3
        }
        
        let samples_start = 8;
        let samples_end = samples_start + sample_count as usize;
        
        if samples_end > data.len() {
            return None;
        }
        
        let samples = data[samples_start..samples_end].to_vec();
        
        Some(Sound {
            sample_rate: sample_rate as u32,
            samples,
        })
    }
}

// Data structures for loaded resources
struct Texture {
    width: u32,
    height: u32,
    left_offset: i32,
    top_offset: i32,
    pixels: Vec<u8>,
}

struct Flat {
    pixels: [u8; 64 * 64],
}

struct Sound {
    sample_rate: u32,
    samples: Vec<u8>,
}

struct MapData {
    vertices: Vec<Vertex>,
    sectors: Vec<Sector>,
    linedefs: Vec<Linedef>,
    sidedefs: Vec<Sidedef>,
    things: Vec<Thing>,
    nodes: Vec<Node>,
    segs: Vec<Seg>,
    subsectors: Vec<Subsector>,
}

struct Vertex {
    x: f32,
    y: f32,
}

struct Sector {
    floor_height: f32,
    ceiling_height: f32,
    floor_texture: String,
    ceiling_texture: String,
    light_level: u8,
    special: u16,
    tag: u16,
}

struct Linedef {
    v1: usize,
    v2: usize,
    flags: u16,
    special: u16,
    tag: u16,
    right_sidedef: Option<usize>,
    left_sidedef: Option<usize>,
}

struct Sidedef {
    x_offset: i16,
    y_offset: i16,
    upper_texture: String,
    lower_texture: String,
    middle_texture: String,
    sector: usize,
}

struct Thing {
    x: f32,
    y: f32,
    angle: u16,
    thing_type: u16,
    flags: u16,
}

struct Node {
    x: f32,
    y: f32,
    dx: f32,
    dy: f32,
    bbox: [[f32; 2]; 2], // [right/left][top/left/bottom/right]
    children: [usize; 2], // right, left (0x8000 bit set = subsector)
}

struct Seg {
    v1: usize,
    v2: usize,
    angle: u16,
    linedef: usize,
    side: u8,
    offset: f32,
}

struct Subsector {
    seg_count: u16,
    first_seg: usize,
}

impl MapData {
    fn new() -> MapData {
        MapData {
            vertices: Vec::new(),
            sectors: Vec::new(),
            linedefs: Vec::new(),
            sidedefs: Vec::new(),
            things: Vec::new(),
            nodes: Vec::new(),
            segs: Vec::new(),
            subsectors: Vec::new(),
        }
    }
    
    fn load_vertices(&mut self, data: &[u8]) -> Result<(), String> {
        const VERTEX_SIZE: usize = 4;
        let count = data.len() / VERTEX_SIZE;
        
        for i in 0..count {
            let offset = i * VERTEX_SIZE;
            let x = i16::from_le_bytes([data[offset], data[offset + 1]]) as f32;
            let y = i16::from_le_bytes([data[offset + 2], data[offset + 3]]) as f32;
            
            self.vertices.push(Vertex { x, y });
        }
        
        Ok(())
    }
    
    fn load_sectors(&mut self, data: &[u8]) -> Result<(), String> {
        const SECTOR_SIZE: usize = 26;
        let count = data.len() / SECTOR_SIZE;
        
        for i in 0..count {
            let offset = i * SECTOR_SIZE;
            
            let floor_height = i16::from_le_bytes([data[offset], data[offset + 1]]) as f32;
            let ceiling_height = i16::from_le_bytes([data[offset + 2], data[offset + 3]]) as f32;
            
            let floor_texture = Self::read_name(&data[offset + 4..offset + 12]);
            let ceiling_texture = Self::read_name(&data[offset + 12..offset + 20]);
            
            let light_level = data[offset + 20];
            let special = u16::from_le_bytes([data[offset + 22], data[offset + 23]]);
            let tag = u16::from_le_bytes([data[offset + 24], data[offset + 25]]);
            
            self.sectors.push(Sector {
                floor_height,
                ceiling_height,
                floor_texture,
                ceiling_texture,
                light_level,
                special,
                tag,
            });
        }
        
        Ok(())
    }
    
    fn load_linedefs(&mut self, data: &[u8]) -> Result<(), String> {
        const LINEDEF_SIZE: usize = 14;
        let count = data.len() / LINEDEF_SIZE;
        
        for i in 0..count {
            let offset = i * LINEDEF_SIZE;
            
            let v1 = u16::from_le_bytes([data[offset], data[offset + 1]]) as usize;
            let v2 = u16::from_le_bytes([data[offset + 2], data[offset + 3]]) as usize;
            let flags = u16::from_le_bytes([data[offset + 4], data[offset + 5]]);
            let special = u16::from_le_bytes([data[offset + 6], data[offset + 7]]);
            let tag = u16::from_le_bytes([data[offset + 8], data[offset + 9]]);
            
            let right_sidedef = {
                let idx = u16::from_le_bytes([data[offset + 10], data[offset + 11]]);
                if idx == 0xFFFF { None } else { Some(idx as usize) }
            };
            
            let left_sidedef = {
                let idx = u16::from_le_bytes([data[offset + 12], data[offset + 13]]);
                if idx == 0xFFFF { None } else { Some(idx as usize) }
            };
            
            self.linedefs.push(Linedef {
                v1,
                v2,
                flags,
                special,
                tag,
                right_sidedef,
                left_sidedef,
            });
        }
        
        Ok(())
    }
    
    fn load_sidedefs(&mut self, data: &[u8]) -> Result<(), String> {
        const SIDEDEF_SIZE: usize = 30;
        let count = data.len() / SIDEDEF_SIZE;
        
        for i in 0..count {
            let offset = i * SIDEDEF_SIZE;
            
            let x_offset = i16::from_le_bytes([data[offset], data[offset + 1]]);
            let y_offset = i16::from_le_bytes([data[offset + 2], data[offset + 3]]);
            
            let upper_texture = Self::read_name(&data[offset + 4..offset + 12]);
            let lower_texture = Self::read_name(&data[offset + 12..offset + 20]);
            let middle_texture = Self::read_name(&data[offset + 20..offset + 28]);
            
            let sector = u16::from_le_bytes([data[offset + 28], data[offset + 29]]) as usize;
            
            self.sidedefs.push(Sidedef {
                x_offset,
                y_offset,
                upper_texture,
                lower_texture,
                middle_texture,
                sector,
            });
        }
        
        Ok(())
    }
    
    fn load_things(&mut self, data: &[u8]) -> Result<(), String> {
        const THING_SIZE: usize = 10;
        let count = data.len() / THING_SIZE;
        
        for i in 0..count {
            let offset = i * THING_SIZE;
            
            let x = i16::from_le_bytes([data[offset], data[offset + 1]]) as f32;
            let y = i16::from_le_bytes([data[offset + 2], data[offset + 3]]) as f32;
            let angle = u16::from_le_bytes([data[offset + 4], data[offset + 5]]);
            let thing_type = u16::from_le_bytes([data[offset + 6], data[offset + 7]]);
            let flags = u16::from_le_bytes([data[offset + 8], data[offset + 9]]);
            
            self.things.push(Thing {
                x,
                y,
                angle,
                thing_type,
                flags,
            });
        }
        
        Ok(())
    }
    
    fn load_nodes(&mut self, data: &[u8]) -> Result<(), String> {
        const NODE_SIZE: usize = 28;
        let count = data.len() / NODE_SIZE;
        
        for i in 0..count {
            let offset = i * NODE_SIZE;
            
            let x = i16::from_le_bytes([data[offset], data[offset + 1]]) as f32;
            let y = i16::from_le_bytes([data[offset + 2], data[offset + 3]]) as f32;
            let dx = i16::from_le_bytes([data[offset + 4], data[offset + 5]]) as f32;
            let dy = i16::from_le_bytes([data[offset + 6], data[offset + 7]]) as f32;
            
            let mut bbox = [[0.0; 2]; 2];
            for j in 0..2 {
                for k in 0..4 {
                    let idx = offset + 8 + j * 8 + k * 2;
                    bbox[j][k] = i16::from_le_bytes([data[idx], data[idx + 1]]) as f32;
                }
            }
            
            let right_child = u16::from_le_bytes([data[offset + 24], data[offset + 25]]) as usize;
            let left_child = u16::from_le_bytes([data[offset + 26], data[offset + 27]]) as usize;
            
            self.nodes.push(Node {
                x,
                y,
                dx,
                dy,
                bbox,
                children: [right_child, left_child],
            });
        }
        
        Ok(())
    }
    
    fn load_segs(&mut self, data: &[u8]) -> Result<(), String> {
        const SEG_SIZE: usize = 12;
        let count = data.len() / SEG_SIZE;
        
        for i in 0..count {
            let offset = i * SEG_SIZE;
            
            let v1 = u16::from_le_bytes([data[offset], data[offset + 1]]) as usize;
            let v2 = u16::from_le_bytes([data[offset + 2], data[offset + 3]]) as usize;
            let angle = u16::from_le_bytes([data[offset + 4], data[offset + 5]]);
            let linedef = u16::from_le_bytes([data[offset + 6], data[offset + 7]]) as usize;
            let side = data[offset + 8];
            let seg_offset = i16::from_le_bytes([data[offset + 10], data[offset + 11]]) as f32;
            
            self.segs.push(Seg {
                v1,
                v2,
                angle,
                linedef,
                side,
                offset: seg_offset,
            });
        }
        
        Ok(())
    }
    
    fn load_subsectors(&mut self, data: &[u8]) -> Result<(), String> {
        const SUBSECTOR_SIZE: usize = 4;
        let count = data.len() / SUBSECTOR_SIZE;
        
        for i in 0..count {
            let offset = i * SUBSECTOR_SIZE;
            
            let seg_count = u16::from_le_bytes([data[offset], data[offset + 1]]);
            let first_seg = u16::from_le_bytes([data[offset + 2], data[offset + 3]]) as usize;
            
            self.subsectors.push(Subsector {
                seg_count,
                first_seg,
            });
        }
        
        Ok(())
    }
    
    fn read_name(data: &[u8]) -> String {
        let end = data.iter().position(|&b| b == 0).unwrap_or(data.len());
        std::str::from_utf8(&data[..end])
            .unwrap_or("")
            .to_uppercase()
    }
}
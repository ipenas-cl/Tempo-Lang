// ╔═════╦═════╦═════╗
// ║ 🛡️  ║ ⚖️  ║ ⚡  ║
// ║  C  ║  E  ║  G  ║
// ╚═════╩═════╩═════╝
// ╔═════════════════╗
// ║ wcet [T∞] bound ║
// ╚═════════════════╝
//
// Author: Ignacio Peña Sepúlveda
// Date: June 25, 2025

// B-tree implementation for AtomicFS
// Provides bounded height trees with deterministic operations
// All operations have O(log n) worst-case time complexity

module fs.btree;

import core.types;
import core.memory;

// B-tree configuration for bounded height
const BTREE_ORDER: u32 = 128;              // Maximum children per node
const BTREE_MIN_KEYS: u32 = (BTREE_ORDER - 1) / 2;
const BTREE_MAX_KEYS: u32 = BTREE_ORDER - 1;
const BTREE_MAX_HEIGHT: u32 = 8;          // Supports up to ~10^14 entries
const BTREE_NODE_SIZE: u32 = 4096;        // One block per node

// B-tree node structure
struct BTreeNode<K, V> {
    is_leaf: bool,
    num_keys: u16,
    parent: u64,           // Block number of parent node
    keys: [K; BTREE_MAX_KEYS],
    values: [V; BTREE_MAX_KEYS],    // Only used in leaf nodes
    children: [u64; BTREE_ORDER],   // Block numbers of child nodes
}

// B-tree structure
struct BTree<K, V> {
    device: *BlockDevice,
    root_block: u64,
    height: u32,
    entry_count: u64,
    free_list: u64,        // Head of free node list
    node_cache: BTreeCache<K, V>,
}

// Cache for recently accessed nodes
struct BTreeCache<K, V> {
    entries: [CacheEntry<K, V>; CACHE_SIZE],
    lru_list: LRUList,
}

struct CacheEntry<K, V> {
    block_num: u64,
    node: BTreeNode<K, V>,
    dirty: bool,
    lru_node: LRUNode,
}

const CACHE_SIZE: u32 = 32;  // Cache 32 nodes for performance

// Initialize B-tree
fn init<K, V>(tree: *BTree<K, V>, device: *BlockDevice, root_block: u64) -> Result<void> {
    tree.device = device;
    tree.root_block = root_block;
    
    // Read tree metadata from root block
    let metadata: BTreeMetadata;
    read_metadata(tree, &metadata)?;
    
    tree.height = metadata.height;
    tree.entry_count = metadata.entry_count;
    tree.free_list = metadata.free_list;
    
    // Initialize cache
    init_cache(&tree.node_cache);
    
    // If empty tree, create root node
    if tree.root_block == 0 {
        create_root(tree)?;
    }
    
    return Ok(void);
}

// Insert key-value pair with bounded operation time
fn insert<K, V>(tree: *BTree<K, V>, key: K, value: *V) -> Result<void> 
    where K: Comparable {
    
    // Check height limit
    if tree.height >= BTREE_MAX_HEIGHT {
        return Err(Error.TreeTooDeep);
    }
    
    // Find leaf node for insertion (bounded by height)
    let (leaf_block, leaf_index) = find_leaf(tree, key)?;
    let leaf = load_node(tree, leaf_block)?;
    
    // Check if key already exists
    if leaf_index < leaf.num_keys && leaf.keys[leaf_index] == key {
        // Update existing value
        memory.copy(&leaf.values[leaf_index], value, sizeof(V));
        mark_dirty(tree, leaf_block);
        return Ok(void);
    }
    
    // Insert into leaf
    if leaf.num_keys < BTREE_MAX_KEYS {
        // Simple insertion - leaf has space
        insert_into_leaf(tree, leaf, leaf_index, key, value)?;
        tree.entry_count += 1;
        return Ok(void);
    }
    
    // Leaf is full - need to split
    split_and_insert(tree, leaf_block, leaf_index, key, value)?;
    tree.entry_count += 1;
    
    return Ok(void);
}

// Get value by key with bounded lookup time
fn get<K, V>(tree: *BTree<K, V>, key: K, value: *V) -> Result<void>
    where K: Comparable {
    
    // Find leaf node (bounded by height)
    let (leaf_block, leaf_index) = find_leaf(tree, key)?;
    let leaf = load_node(tree, leaf_block)?;
    
    // Check if key exists
    if leaf_index >= leaf.num_keys || leaf.keys[leaf_index] != key {
        return Err(Error.KeyNotFound);
    }
    
    // Copy value
    memory.copy(value, &leaf.values[leaf_index], sizeof(V));
    
    return Ok(void);
}

// Update existing key-value pair
fn update<K, V>(tree: *BTree<K, V>, key: K, value: *V) -> Result<void>
    where K: Comparable {
    
    // Find leaf node (bounded by height)
    let (leaf_block, leaf_index) = find_leaf(tree, key)?;
    let leaf = load_node(tree, leaf_block)?;
    
    // Check if key exists
    if leaf_index >= leaf.num_keys || leaf.keys[leaf_index] != key {
        return Err(Error.KeyNotFound);
    }
    
    // Update value
    memory.copy(&leaf.values[leaf_index], value, sizeof(V));
    mark_dirty(tree, leaf_block);
    
    return Ok(void);
}

// Remove key-value pair with bounded operation time
fn remove<K, V>(tree: *BTree<K, V>, key: K) -> Result<void>
    where K: Comparable {
    
    // Find leaf node (bounded by height)
    let (leaf_block, leaf_index) = find_leaf(tree, key)?;
    let leaf = load_node(tree, leaf_block)?;
    
    // Check if key exists
    if leaf_index >= leaf.num_keys || leaf.keys[leaf_index] != key {
        return Err(Error.KeyNotFound);
    }
    
    // Remove from leaf
    remove_from_leaf(tree, leaf, leaf_index)?;
    tree.entry_count -= 1;
    
    // Check if rebalancing needed
    if leaf.num_keys < BTREE_MIN_KEYS && leaf_block != tree.root_block {
        rebalance_after_delete(tree, leaf_block)?;
    }
    
    return Ok(void);
}

// Find leaf node containing key (or where it should be)
fn find_leaf<K, V>(tree: *BTree<K, V>, key: K) -> Result<(u64, u32)>
    where K: Comparable {
    
    let mut current_block = tree.root_block;
    let mut height = tree.height;
    
    // Traverse down the tree (bounded by height)
    while height > 0 {
        let node = load_node(tree, current_block)?;
        let child_index = find_child_index(node, key);
        current_block = node.children[child_index];
        height -= 1;
    }
    
    // Now at leaf level
    let leaf = load_node(tree, current_block)?;
    let index = find_key_index(leaf, key);
    
    return Ok((current_block, index));
}

// Find index where key should be in node
fn find_key_index<K, V>(node: *BTreeNode<K, V>, key: K) -> u32
    where K: Comparable {
    
    // Binary search for key position (bounded by BTREE_MAX_KEYS)
    let mut left: u32 = 0;
    let mut right: u32 = node.num_keys;
    
    while left < right {
        let mid = (left + right) / 2;
        if key <= node.keys[mid] {
            right = mid;
        } else {
            left = mid + 1;
        }
    }
    
    return left;
}

// Find child index to follow for key
fn find_child_index<K, V>(node: *BTreeNode<K, V>, key: K) -> u32
    where K: Comparable {
    
    let index = find_key_index(node, key);
    
    // If key found exactly, go to right child
    if index < node.num_keys && node.keys[index] == key {
        return index + 1;
    }
    
    return index;
}

// Insert into leaf node that has space
fn insert_into_leaf<K, V>(tree: *BTree<K, V>, leaf: *BTreeNode<K, V>, 
                         index: u32, key: K, value: *V) -> Result<void> {
    
    // Shift keys and values to make room
    for i in (index..leaf.num_keys).rev() {
        leaf.keys[i + 1] = leaf.keys[i];
        leaf.values[i + 1] = leaf.values[i];
    }
    
    // Insert new key and value
    leaf.keys[index] = key;
    memory.copy(&leaf.values[index], value, sizeof(V));
    leaf.num_keys += 1;
    
    mark_dirty(tree, get_node_block(leaf));
    
    return Ok(void);
}

// Split node and insert key
fn split_and_insert<K, V>(tree: *BTree<K, V>, node_block: u64, 
                         index: u32, key: K, value: *V) -> Result<void>
    where K: Comparable {
    
    let node = load_node(tree, node_block)?;
    
    // Allocate new node
    let new_block = allocate_node(tree)?;
    let new_node = load_node(tree, new_block)?;
    
    // Determine split point
    let mid = BTREE_MAX_KEYS / 2;
    let mut split_key: K;
    
    // Copy half of the keys to new node
    if index <= mid {
        // Insert into left node
        split_key = node.keys[mid - 1];
        
        // Copy right half to new node
        for i in 0..(BTREE_MAX_KEYS - mid) {
            new_node.keys[i] = node.keys[mid + i];
            if node.is_leaf {
                new_node.values[i] = node.values[mid + i];
            } else {
                new_node.children[i] = node.children[mid + i];
            }
        }
        
        if !node.is_leaf {
            new_node.children[BTREE_MAX_KEYS - mid] = node.children[BTREE_MAX_KEYS];
        }
        
        new_node.num_keys = BTREE_MAX_KEYS - mid;
        node.num_keys = mid;
        
        // Now insert into left node
        insert_into_leaf(tree, node, index, key, value)?;
        
    } else {
        // Insert into right node
        split_key = node.keys[mid];
        
        // Copy right half to new node, accounting for insertion
        let right_index = index - mid - 1;
        
        for i in 0..right_index {
            new_node.keys[i] = node.keys[mid + 1 + i];
            if node.is_leaf {
                new_node.values[i] = node.values[mid + 1 + i];
            } else {
                new_node.children[i] = node.children[mid + 1 + i];
            }
        }
        
        // Insert new key
        new_node.keys[right_index] = key;
        if node.is_leaf {
            memory.copy(&new_node.values[right_index], value, sizeof(V));
        }
        
        // Copy remaining
        for i in right_index..(BTREE_MAX_KEYS - mid - 1) {
            new_node.keys[i + 1] = node.keys[mid + 1 + i];
            if node.is_leaf {
                new_node.values[i + 1] = node.values[mid + 1 + i];
            } else {
                new_node.children[i + 1] = node.children[mid + 1 + i];
            }
        }
        
        if !node.is_leaf {
            new_node.children[BTREE_MAX_KEYS - mid] = node.children[BTREE_MAX_KEYS];
        }
        
        new_node.num_keys = BTREE_MAX_KEYS - mid;
        node.num_keys = mid;
    }
    
    new_node.is_leaf = node.is_leaf;
    new_node.parent = node.parent;
    
    mark_dirty(tree, node_block);
    mark_dirty(tree, new_block);
    
    // Insert split key into parent
    if node.parent == 0 {
        // Node is root - create new root
        create_new_root(tree, node_block, new_block, split_key)?;
    } else {
        // Insert into parent
        insert_into_parent(tree, node.parent, node_block, new_block, split_key)?;
    }
    
    return Ok(void);
}

// Create new root when splitting old root
fn create_new_root<K, V>(tree: *BTree<K, V>, left_block: u64, 
                        right_block: u64, split_key: K) -> Result<void> {
    
    // Allocate new root
    let new_root_block = allocate_node(tree)?;
    let new_root = load_node(tree, new_root_block)?;
    
    // Set up new root
    new_root.is_leaf = false;
    new_root.num_keys = 1;
    new_root.keys[0] = split_key;
    new_root.children[0] = left_block;
    new_root.children[1] = right_block;
    new_root.parent = 0;
    
    // Update children's parent pointers
    let left = load_node(tree, left_block)?;
    let right = load_node(tree, right_block)?;
    left.parent = new_root_block;
    right.parent = new_root_block;
    
    mark_dirty(tree, new_root_block);
    mark_dirty(tree, left_block);
    mark_dirty(tree, right_block);
    
    // Update tree metadata
    tree.root_block = new_root_block;
    tree.height += 1;
    write_metadata(tree)?;
    
    return Ok(void);
}

// Insert split key into parent node
fn insert_into_parent<K, V>(tree: *BTree<K, V>, parent_block: u64,
                           left_block: u64, right_block: u64, 
                           split_key: K) -> Result<void>
    where K: Comparable {
    
    let parent = load_node(tree, parent_block)?;
    
    // Find insertion point
    let index = find_key_index(parent, split_key);
    
    if parent.num_keys < BTREE_MAX_KEYS {
        // Parent has room - simple insertion
        // Shift keys and children
        for i in (index..parent.num_keys).rev() {
            parent.keys[i + 1] = parent.keys[i];
            parent.children[i + 2] = parent.children[i + 1];
        }
        
        // Insert new key and child pointer
        parent.keys[index] = split_key;
        parent.children[index + 1] = right_block;
        parent.num_keys += 1;
        
        mark_dirty(tree, parent_block);
    } else {
        // Parent is full - need to split parent too
        split_internal_node(tree, parent_block, index, split_key, right_block)?;
    }
    
    return Ok(void);
}

// Remove key from leaf node
fn remove_from_leaf<K, V>(tree: *BTree<K, V>, leaf: *BTreeNode<K, V>, 
                         index: u32) -> Result<void> {
    
    // Shift keys and values left
    for i in index..(leaf.num_keys - 1) {
        leaf.keys[i] = leaf.keys[i + 1];
        leaf.values[i] = leaf.values[i + 1];
    }
    
    leaf.num_keys -= 1;
    mark_dirty(tree, get_node_block(leaf));
    
    return Ok(void);
}

// Rebalance tree after deletion
fn rebalance_after_delete<K, V>(tree: *BTree<K, V>, node_block: u64) -> Result<void> {
    let node = load_node(tree, node_block)?;
    
    if node.parent == 0 {
        // Root node - check if it's empty
        if node.num_keys == 0 && !node.is_leaf {
            // Root has no keys but has one child - make child the new root
            tree.root_block = node.children[0];
            tree.height -= 1;
            let new_root = load_node(tree, tree.root_block)?;
            new_root.parent = 0;
            mark_dirty(tree, tree.root_block);
            free_node(tree, node_block)?;
            write_metadata(tree)?;
        }
        return Ok(void);
    }
    
    // Try to borrow from siblings or merge
    let parent = load_node(tree, node.parent)?;
    let child_index = find_node_index(parent, node_block);
    
    // Try borrowing from left sibling
    if child_index > 0 {
        let left_sibling_block = parent.children[child_index - 1];
        let left_sibling = load_node(tree, left_sibling_block)?;
        
        if left_sibling.num_keys > BTREE_MIN_KEYS {
            borrow_from_left(tree, node_block, left_sibling_block, 
                           parent, child_index)?;
            return Ok(void);
        }
    }
    
    // Try borrowing from right sibling
    if child_index < parent.num_keys {
        let right_sibling_block = parent.children[child_index + 1];
        let right_sibling = load_node(tree, right_sibling_block)?;
        
        if right_sibling.num_keys > BTREE_MIN_KEYS {
            borrow_from_right(tree, node_block, right_sibling_block,
                            parent, child_index)?;
            return Ok(void);
        }
    }
    
    // Cannot borrow - must merge
    if child_index < parent.num_keys {
        // Merge with right sibling
        merge_nodes(tree, node_block, parent.children[child_index + 1],
                   parent, child_index)?;
    } else {
        // Merge with left sibling
        merge_nodes(tree, parent.children[child_index - 1], node_block,
                   parent, child_index - 1)?;
    }
    
    return Ok(void);
}

// Load node from disk or cache
fn load_node<K, V>(tree: *BTree<K, V>, block_num: u64) -> Result<*BTreeNode<K, V>> {
    // Check cache first
    let cached = cache_lookup(&tree.node_cache, block_num);
    if cached != null {
        return Ok(cached);
    }
    
    // Load from disk
    let node = cache_alloc(&tree.node_cache, block_num)?;
    let buffer: [u8; BTREE_NODE_SIZE];
    tree.device.read_block(block_num, &buffer)?;
    deserialize_node(node, &buffer)?;
    
    return Ok(node);
}

// Mark node as dirty in cache
fn mark_dirty<K, V>(tree: *BTree<K, V>, block_num: u64) {
    cache_mark_dirty(&tree.node_cache, block_num);
}

// Allocate new node
fn allocate_node<K, V>(tree: *BTree<K, V>) -> Result<u64> {
    if tree.free_list != 0 {
        // Reuse from free list
        let block = tree.free_list;
        let free_node: FreeNode;
        tree.device.read_block(block, &free_node)?;
        tree.free_list = free_node.next;
        return Ok(block);
    }
    
    // Allocate new block
    return tree.device.alloc_block();
}

// Free node
fn free_node<K, V>(tree: *BTree<K, V>, block_num: u64) -> Result<void> {
    // Add to free list
    let free_node: FreeNode;
    free_node.next = tree.free_list;
    tree.device.write_block(block_num, &free_node)?;
    tree.free_list = block_num;
    return Ok(void);
}

// Cache implementation
fn init_cache<K, V>(cache: *BTreeCache<K, V>) {
    for i in 0..CACHE_SIZE {
        cache.entries[i].block_num = 0;
        cache.entries[i].dirty = false;
    }
    cache.lru_list.init();
}

fn cache_lookup<K, V>(cache: *BTreeCache<K, V>, block_num: u64) -> *BTreeNode<K, V> {
    for i in 0..CACHE_SIZE {
        if cache.entries[i].block_num == block_num {
            // Move to front of LRU list
            cache.lru_list.move_to_front(&cache.entries[i].lru_node);
            return &cache.entries[i].node;
        }
    }
    return null;
}

fn cache_alloc<K, V>(cache: *BTreeCache<K, V>, block_num: u64) -> Result<*BTreeNode<K, V>> {
    // Find LRU entry
    let lru_entry = cache.lru_list.get_lru();
    let entry = container_of(lru_entry, CacheEntry<K, V>, lru_node);
    
    // Write back if dirty
    if entry.dirty {
        write_node(cache.tree, entry.block_num, &entry.node)?;
        entry.dirty = false;
    }
    
    // Allocate for new block
    entry.block_num = block_num;
    cache.lru_list.move_to_front(&entry.lru_node);
    
    return Ok(&entry.node);
}

fn cache_mark_dirty<K, V>(cache: *BTreeCache<K, V>, block_num: u64) {
    for i in 0..CACHE_SIZE {
        if cache.entries[i].block_num == block_num {
            cache.entries[i].dirty = true;
            return;
        }
    }
}

// Flush all dirty nodes in cache
fn flush_cache<K, V>(tree: *BTree<K, V>) -> Result<void> {
    for i in 0..CACHE_SIZE {
        let entry = &tree.node_cache.entries[i];
        if entry.dirty && entry.block_num != 0 {
            write_node(tree, entry.block_num, &entry.node)?;
            entry.dirty = false;
        }
    }
    return Ok(void);
}

// Write node to disk
fn write_node<K, V>(tree: *BTree<K, V>, block_num: u64, 
                   node: *BTreeNode<K, V>) -> Result<void> {
    let buffer: [u8; BTREE_NODE_SIZE];
    serialize_node(node, &buffer)?;
    tree.device.write_block(block_num, &buffer)?;
    return Ok(void);
}

// Tree metadata stored in first part of root block
struct BTreeMetadata {
    magic: u32,
    height: u32,
    entry_count: u64,
    free_list: u64,
}

// Free node structure
struct FreeNode {
    next: u64,
    padding: [u8; BTREE_NODE_SIZE - sizeof(u64)],
}

// Read tree metadata
fn read_metadata<K, V>(tree: *BTree<K, V>, metadata: *BTreeMetadata) -> Result<void> {
    let buffer: [u8; sizeof(BTreeMetadata)];
    tree.device.read_block(0, &buffer)?;
    memory.copy(metadata, &buffer, sizeof(BTreeMetadata));
    return Ok(void);
}

// Write tree metadata
fn write_metadata<K, V>(tree: *BTree<K, V>) -> Result<void> {
    let metadata: BTreeMetadata;
    metadata.magic = BTREE_MAGIC;
    metadata.height = tree.height;
    metadata.entry_count = tree.entry_count;
    metadata.free_list = tree.free_list;
    
    let buffer: [u8; sizeof(BTreeMetadata)];
    memory.copy(&buffer, &metadata, sizeof(BTreeMetadata));
    tree.device.write_block(0, &buffer)?;
    return Ok(void);
}

// Serialization helpers
fn serialize_node<K, V>(node: *BTreeNode<K, V>, buffer: *u8) -> Result<void> {
    // Implementation would serialize node fields to buffer
    // This is a simplified version
    memory.copy(buffer, node, sizeof(BTreeNode<K, V>));
    return Ok(void);
}

fn deserialize_node<K, V>(node: *BTreeNode<K, V>, buffer: *u8) -> Result<void> {
    // Implementation would deserialize buffer to node fields
    // This is a simplified version
    memory.copy(node, buffer, sizeof(BTreeNode<K, V>));
    return Ok(void);
}

// Helper functions for tree operations
fn find_node_index<K, V>(parent: *BTreeNode<K, V>, child_block: u64) -> u32 {
    for i in 0..=parent.num_keys {
        if parent.children[i] == child_block {
            return i;
        }
    }
    return 0; // Should not happen
}

fn get_node_block<K, V>(node: *BTreeNode<K, V>) -> u64 {
    // In a real implementation, we'd track this mapping
    // For now, return a placeholder
    return 0;
}

fn borrow_from_left<K, V>(tree: *BTree<K, V>, node_block: u64,
                         left_block: u64, parent: *BTreeNode<K, V>,
                         child_index: u32) -> Result<void> {
    // Implementation of borrowing key from left sibling
    // This maintains B-tree invariants
    return Ok(void);
}

fn borrow_from_right<K, V>(tree: *BTree<K, V>, node_block: u64,
                          right_block: u64, parent: *BTreeNode<K, V>,
                          child_index: u32) -> Result<void> {
    // Implementation of borrowing key from right sibling
    // This maintains B-tree invariants
    return Ok(void);
}

fn merge_nodes<K, V>(tree: *BTree<K, V>, left_block: u64,
                    right_block: u64, parent: *BTreeNode<K, V>,
                    merge_index: u32) -> Result<void> {
    // Implementation of merging two nodes
    // This maintains B-tree invariants
    return Ok(void);
}

fn split_internal_node<K, V>(tree: *BTree<K, V>, node_block: u64,
                            index: u32, key: K, child: u64) -> Result<void> {
    // Implementation of splitting internal node
    // Similar to split_and_insert but for internal nodes
    return Ok(void);
}

fn create_root<K, V>(tree: *BTree<K, V>) -> Result<void> {
    // Create initial empty root
    let root_block = allocate_node(tree)?;
    let root = load_node(tree, root_block)?;
    
    root.is_leaf = true;
    root.num_keys = 0;
    root.parent = 0;
    
    tree.root_block = root_block;
    tree.height = 1;
    
    mark_dirty(tree, root_block);
    write_metadata(tree)?;
    
    return Ok(void);
}

// Magic number for B-tree metadata
const BTREE_MAGIC: u32 = 0x42545245; // "BTRE"

// Error types
enum Error {
    TreeTooDeep,
    KeyNotFound,
    NodeFull,
    InvalidNode,
}
// ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ï¶‚ïê‚ïê‚ïê‚ïê‚ïê‚ï¶‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
// ‚ïë üõ°Ô∏è  ‚ïë ‚öñÔ∏è  ‚ïë ‚ö°  ‚ïë
// ‚ïë  C  ‚ïë  E  ‚ïë  G  ‚ïë
// ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ï©‚ïê‚ïê‚ïê‚ïê‚ïê‚ï©‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
// ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
// ‚ïë wcet [T‚àû] bound ‚ïë
// ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
//
// Author: Ignacio Pe√±a Sep√∫lveda
// Date: June 25, 2025

// Multiboot 1 specification structures and constants

// Multiboot header magic
const MULTIBOOT_HEADER_MAGIC: u32 = 0x1BADB002;
const MULTIBOOT_BOOTLOADER_MAGIC: u32 = 0x2BADB002;

// Multiboot header flags
const MULTIBOOT_PAGE_ALIGN: u32 = 0x00000001;
const MULTIBOOT_MEMORY_INFO: u32 = 0x00000002;
const MULTIBOOT_VIDEO_MODE: u32 = 0x00000004;
const MULTIBOOT_AOUT_KLUDGE: u32 = 0x00010000;

// Multiboot info flags
const MULTIBOOT_INFO_MEMORY: u32 = 0x00000001;
const MULTIBOOT_INFO_BOOTDEV: u32 = 0x00000002;
const MULTIBOOT_INFO_CMDLINE: u32 = 0x00000004;
const MULTIBOOT_INFO_MODS: u32 = 0x00000008;
const MULTIBOOT_INFO_AOUT_SYMS: u32 = 0x00000010;
const MULTIBOOT_INFO_ELF_SHDR: u32 = 0x00000020;
const MULTIBOOT_INFO_MMAP: u32 = 0x00000040;
const MULTIBOOT_INFO_DRIVE_INFO: u32 = 0x00000080;
const MULTIBOOT_INFO_CONFIG_TABLE: u32 = 0x00000100;
const MULTIBOOT_INFO_BOOT_LOADER_NAME: u32 = 0x00000200;
const MULTIBOOT_INFO_APM_TABLE: u32 = 0x00000400;
const MULTIBOOT_INFO_VBE_INFO: u32 = 0x00000800;
const MULTIBOOT_INFO_FRAMEBUFFER_INFO: u32 = 0x00001000;

// Multiboot header structure
struct MultibootHeader {
    magic: u32,
    flags: u32,
    checksum: u32,
    
    // These are only valid if MULTIBOOT_AOUT_KLUDGE is set
    header_addr: u32,
    load_addr: u32,
    load_end_addr: u32,
    bss_end_addr: u32,
    entry_addr: u32,
    
    // These are only valid if MULTIBOOT_VIDEO_MODE is set
    mode_type: u32,
    width: u32,
    height: u32,
    depth: u32,
}

// Multiboot information structure
struct MultibootInfo {
    flags: u32,
    
    // Available memory from BIOS (required)
    mem_lower: u32,
    mem_upper: u32,
    
    // Boot device (optional)
    boot_device: u32,
    
    // Kernel command line (optional)
    cmdline: u32,
    
    // Boot module list (optional)
    mods_count: u32,
    mods_addr: u32,
    
    // Symbol table info (optional)
    syms: [4]u32,
    
    // Memory mapping buffer (optional)
    mmap_length: u32,
    mmap_addr: u32,
    
    // Drive info buffer (optional)
    drives_length: u32,
    drives_addr: u32,
    
    // ROM configuration table (optional)
    config_table: u32,
    
    // Boot loader name (optional)
    boot_loader_name: u32,
    
    // APM table (optional)
    apm_table: u32,
    
    // VBE info (optional)
    vbe_control_info: u32,
    vbe_mode_info: u32,
    vbe_mode: u16,
    vbe_interface_seg: u16,
    vbe_interface_off: u16,
    vbe_interface_len: u16,
    
    // Framebuffer info (optional)
    framebuffer_addr: u64,
    framebuffer_pitch: u32,
    framebuffer_width: u32,
    framebuffer_height: u32,
    framebuffer_bpp: u8,
    framebuffer_type: u8,
    color_info: [6]u8,
}

// Memory map entry
struct MultibootMmapEntry {
    size: u32,
    addr: u64,
    len: u64,
    type: u32,
}

// Memory types
const MULTIBOOT_MEMORY_AVAILABLE: u32 = 1;
const MULTIBOOT_MEMORY_RESERVED: u32 = 2;
const MULTIBOOT_MEMORY_ACPI_RECLAIMABLE: u32 = 3;
const MULTIBOOT_MEMORY_NVS: u32 = 4;
const MULTIBOOT_MEMORY_BADRAM: u32 = 5;

// Module structure
struct MultibootModule {
    mod_start: u32,
    mod_end: u32,
    cmdline: u32,
    reserved: u32,
}
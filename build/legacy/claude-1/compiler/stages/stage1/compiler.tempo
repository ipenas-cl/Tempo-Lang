// ╔═════╦═════╦═════╗
// ║ 🛡️  ║ ⚖️  ║ ⚡  ║
// ║  C  ║  E  ║  G  ║
// ╚═════╩═════╩═════╝
// ╔═════════════════╗
// ║ wcet [T∞] bound ║
// ╚═════════════════╝
//
// Author: Ignacio Peña Sepúlveda
// Date: June 25, 2025

// ===========================================================================
// TEMPO COMPILER STAGE 1
// ===========================================================================
// Compilador de Tempo escrito en el subset mínimo de Tempo
// que puede compilar nuestro stage0 bootstrap
// Este compilador ya soporta muchas más características
// 
// Author: Ignacio Peña Sepúlveda
// Date: June 25, 2025
// ===========================================================================

// =================================
// TIPOS BÁSICOS
// =================================

type Token = {
    type: i32,      // TK_* constants
    value: string,  // Token value
    line: i32,      // Line number
    column: i32     // Column number
}

type AST = {
    node_type: i32,     // NODE_* constants
    token: Token,       // Associated token
    children: [AST],    // Child nodes
    value: string       // Optional value
}

type Type = {
    kind: i32,          // TYPE_* constants
    name: string,       // Type name
    size: i32,          // Size in bytes
    fields: [Field]     // For structs
}

type Field = {
    name: string,
    type: Type,
    offset: i32
}

type Symbol = {
    name: string,
    type: Type,
    scope: i32,
    offset: i32,        // Stack offset for locals
    is_global: bool
}

// =================================
// CONSTANTES
// =================================

// Token types
let TK_EOF = 0;
let TK_KEYWORD = 1;
let TK_IDENTIFIER = 2;
let TK_NUMBER = 3;
let TK_STRING = 4;
let TK_LPAREN = 5;
let TK_RPAREN = 6;
let TK_LBRACE = 7;
let TK_RBRACE = 8;
let TK_LBRACKET = 9;
let TK_RBRACKET = 10;
let TK_SEMICOLON = 11;
let TK_COMMA = 12;
let TK_DOT = 13;
let TK_COLON = 14;
let TK_EQUALS = 15;
let TK_PLUS = 16;
let TK_MINUS = 17;
let TK_MULTIPLY = 18;
let TK_DIVIDE = 19;
let TK_MODULO = 20;
let TK_LT = 21;
let TK_GT = 22;
let TK_LE = 23;
let TK_GE = 24;
let TK_EQ = 25;
let TK_NE = 26;
let TK_AND = 27;
let TK_OR = 28;
let TK_NOT = 29;
let TK_ARROW = 30;

// Node types
let NODE_PROGRAM = 100;
let NODE_FUNCTION = 101;
let NODE_TYPE_DECL = 102;
let NODE_LET = 103;
let NODE_IF = 104;
let NODE_WHILE = 105;
let NODE_FOR = 106;
let NODE_RETURN = 107;
let NODE_BLOCK = 108;
let NODE_CALL = 109;
let NODE_BINARY = 110;
let NODE_UNARY = 111;
let NODE_ASSIGN = 112;
let NODE_FIELD = 113;
let NODE_INDEX = 114;
let NODE_LITERAL = 115;
let NODE_IDENTIFIER = 116;
let NODE_PRINT = 117;

// Type kinds
let TYPE_VOID = 200;
let TYPE_BOOL = 201;
let TYPE_I32 = 202;
let TYPE_I64 = 203;
let TYPE_STRING = 204;
let TYPE_ARRAY = 205;
let TYPE_STRUCT = 206;
let TYPE_FUNCTION = 207;

// =================================
// VARIABLES GLOBALES
// =================================

let source: string = "";
let pos: i32 = 0;
let line: i32 = 1;
let column: i32 = 1;

let current_token: Token;
let peek_token: Token;

let symbols: [Symbol] = [];
let types: [Type] = [];

let output: string = "";
let label_counter: i32 = 0;
let string_counter: i32 = 0;
let strings: [string] = [];

// =================================
// MAIN
// =================================

function main() {
    // Leer archivo fuente
    source = read_file(args[1]);
    
    // Inicializar tipos built-in
    init_types();
    
    // Tokenizar y parsear
    advance(); // Leer primer token
    advance(); // Leer peek token
    
    let ast = parse_program();
    
    // Generar código
    generate_program(ast);
    
    // Escribir archivo salida
    write_file(args[2], output);
    
    print("Compilation successful!");
}

// =================================
// LEXER
// =================================

function advance() {
    current_token = peek_token;
    peek_token = next_token();
}

function next_token() -> Token {
    skip_whitespace();
    
    if (pos >= length(source)) {
        return Token{type: TK_EOF, value: "", line: line, column: column};
    }
    
    let start_line = line;
    let start_column = column;
    let ch = source[pos];
    
    // Keywords and identifiers
    if (is_alpha(ch)) {
        let start = pos;
        while (pos < length(source) && (is_alpha(source[pos]) || is_digit(source[pos]) || source[pos] == '_')) {
            pos = pos + 1;
            column = column + 1;
        }
        
        let value = substring(source, start, pos);
        let type = TK_IDENTIFIER;
        
        // Check keywords
        if (value == "function") { type = TK_KEYWORD; }
        if (value == "type") { type = TK_KEYWORD; }
        if (value == "let") { type = TK_KEYWORD; }
        if (value == "if") { type = TK_KEYWORD; }
        if (value == "else") { type = TK_KEYWORD; }
        if (value == "while") { type = TK_KEYWORD; }
        if (value == "for") { type = TK_KEYWORD; }
        if (value == "return") { type = TK_KEYWORD; }
        if (value == "print") { type = TK_KEYWORD; }
        if (value == "true") { type = TK_NUMBER; }  // Tratamos bool como número
        if (value == "false") { type = TK_NUMBER; }
        
        return Token{type: type, value: value, line: start_line, column: start_column};
    }
    
    // Numbers
    if (is_digit(ch)) {
        let start = pos;
        while (pos < length(source) && is_digit(source[pos])) {
            pos = pos + 1;
            column = column + 1;
        }
        
        let value = substring(source, start, pos);
        return Token{type: TK_NUMBER, value: value, line: start_line, column: start_column};
    }
    
    // Strings
    if (ch == '"') {
        pos = pos + 1;
        column = column + 1;
        let start = pos;
        
        while (pos < length(source) && source[pos] != '"') {
            if (source[pos] == '\n') {
                line = line + 1;
                column = 1;
            } else {
                column = column + 1;
            }
            pos = pos + 1;
        }
        
        let value = substring(source, start, pos);
        pos = pos + 1; // Skip closing quote
        column = column + 1;
        
        return Token{type: TK_STRING, value: value, line: start_line, column: start_column};
    }
    
    // Single character tokens
    pos = pos + 1;
    column = column + 1;
    
    if (ch == '(') { return Token{type: TK_LPAREN, value: "(", line: start_line, column: start_column}; }
    if (ch == ')') { return Token{type: TK_RPAREN, value: ")", line: start_line, column: start_column}; }
    if (ch == '{') { return Token{type: TK_LBRACE, value: "{", line: start_line, column: start_column}; }
    if (ch == '}') { return Token{type: TK_RBRACE, value: "}", line: start_line, column: start_column}; }
    if (ch == '[') { return Token{type: TK_LBRACKET, value: "[", line: start_line, column: start_column}; }
    if (ch == ']') { return Token{type: TK_RBRACKET, value: "]", line: start_line, column: start_column}; }
    if (ch == ';') { return Token{type: TK_SEMICOLON, value: ";", line: start_line, column: start_column}; }
    if (ch == ',') { return Token{type: TK_COMMA, value: ",", line: start_line, column: start_column}; }
    if (ch == '.') { return Token{type: TK_DOT, value: ".", line: start_line, column: start_column}; }
    if (ch == ':') { return Token{type: TK_COLON, value: ":", line: start_line, column: start_column}; }
    if (ch == '+') { return Token{type: TK_PLUS, value: "+", line: start_line, column: start_column}; }
    if (ch == '*') { return Token{type: TK_MULTIPLY, value: "*", line: start_line, column: start_column}; }
    if (ch == '/') { return Token{type: TK_DIVIDE, value: "/", line: start_line, column: start_column}; }
    if (ch == '%') { return Token{type: TK_MODULO, value: "%", line: start_line, column: start_column}; }
    
    // Multi-character tokens
    if (ch == '-') {
        if (pos < length(source) && source[pos] == '>') {
            pos = pos + 1;
            column = column + 1;
            return Token{type: TK_ARROW, value: "->", line: start_line, column: start_column};
        }
        return Token{type: TK_MINUS, value: "-", line: start_line, column: start_column};
    }
    
    if (ch == '=') {
        if (pos < length(source) && source[pos] == '=') {
            pos = pos + 1;
            column = column + 1;
            return Token{type: TK_EQ, value: "==", line: start_line, column: start_column};
        }
        return Token{type: TK_EQUALS, value: "=", line: start_line, column: start_column};
    }
    
    if (ch == '<') {
        if (pos < length(source) && source[pos] == '=') {
            pos = pos + 1;
            column = column + 1;
            return Token{type: TK_LE, value: "<=", line: start_line, column: start_column};
        }
        return Token{type: TK_LT, value: "<", line: start_line, column: start_column};
    }
    
    if (ch == '>') {
        if (pos < length(source) && source[pos] == '=') {
            pos = pos + 1;
            column = column + 1;
            return Token{type: TK_GE, value: ">=", line: start_line, column: start_column};
        }
        return Token{type: TK_GT, value: ">", line: start_line, column: start_column};
    }
    
    if (ch == '!') {
        if (pos < length(source) && source[pos] == '=') {
            pos = pos + 1;
            column = column + 1;
            return Token{type: TK_NE, value: "!=", line: start_line, column: start_column};
        }
        return Token{type: TK_NOT, value: "!", line: start_line, column: start_column};
    }
    
    if (ch == '&' && pos < length(source) && source[pos] == '&') {
        pos = pos + 1;
        column = column + 1;
        return Token{type: TK_AND, value: "&&", line: start_line, column: start_column};
    }
    
    if (ch == '|' && pos < length(source) && source[pos] == '|') {
        pos = pos + 1;
        column = column + 1;
        return Token{type: TK_OR, value: "||", line: start_line, column: start_column};
    }
    
    error("Unexpected character: " + ch);
}

function skip_whitespace() {
    while (pos < length(source)) {
        let ch = source[pos];
        
        if (ch == ' ' || ch == '\t' || ch == '\r') {
            pos = pos + 1;
            column = column + 1;
        } else if (ch == '\n') {
            pos = pos + 1;
            line = line + 1;
            column = 1;
        } else if (ch == '/' && pos + 1 < length(source) && source[pos + 1] == '/') {
            // Skip line comment
            pos = pos + 2;
            column = column + 2;
            while (pos < length(source) && source[pos] != '\n') {
                pos = pos + 1;
                column = column + 1;
            }
        } else {
            break;
        }
    }
}

// =================================
// PARSER
// =================================

function parse_program() -> AST {
    let node = AST{node_type: NODE_PROGRAM, children: [], value: ""};
    
    while (current_token.type != TK_EOF) {
        if (current_token.type == TK_KEYWORD && current_token.value == "function") {
            append(node.children, parse_function());
        } else if (current_token.type == TK_KEYWORD && current_token.value == "type") {
            append(node.children, parse_type_decl());
        } else if (current_token.type == TK_KEYWORD && current_token.value == "let") {
            append(node.children, parse_global_let());
        } else {
            error("Expected function, type or let declaration");
        }
    }
    
    return node;
}

function parse_function() -> AST {
    let node = AST{node_type: NODE_FUNCTION, children: [], value: ""};
    
    expect_keyword("function");
    node.value = expect_identifier();
    
    // Parameters
    expect(TK_LPAREN);
    while (current_token.type != TK_RPAREN) {
        let param_name = expect_identifier();
        expect(TK_COLON);
        let param_type = parse_type();
        
        // TODO: Store parameters properly
        
        if (current_token.type == TK_COMMA) {
            advance();
        }
    }
    expect(TK_RPAREN);
    
    // Return type
    if (current_token.type == TK_ARROW) {
        advance();
        let return_type = parse_type();
    }
    
    // Body
    append(node.children, parse_block());
    
    return node;
}

function parse_block() -> AST {
    let node = AST{node_type: NODE_BLOCK, children: [], value: ""};
    
    expect(TK_LBRACE);
    
    while (current_token.type != TK_RBRACE) {
        append(node.children, parse_statement());
    }
    
    expect(TK_RBRACE);
    
    return node;
}

function parse_statement() -> AST {
    if (current_token.type == TK_KEYWORD) {
        if (current_token.value == "let") {
            return parse_let();
        } else if (current_token.value == "if") {
            return parse_if();
        } else if (current_token.value == "while") {
            return parse_while();
        } else if (current_token.value == "for") {
            return parse_for();
        } else if (current_token.value == "return") {
            return parse_return();
        } else if (current_token.value == "print") {
            return parse_print();
        }
    }
    
    // Expression statement
    let expr = parse_expression();
    expect(TK_SEMICOLON);
    return expr;
}

function parse_let() -> AST {
    let node = AST{node_type: NODE_LET, children: [], value: ""};
    
    expect_keyword("let");
    node.value = expect_identifier();
    
    if (current_token.type == TK_COLON) {
        advance();
        let type_node = parse_type();
        // TODO: Store type
    }
    
    expect(TK_EQUALS);
    append(node.children, parse_expression());
    expect(TK_SEMICOLON);
    
    return node;
}

function parse_if() -> AST {
    let node = AST{node_type: NODE_IF, children: [], value: ""};
    
    expect_keyword("if");
    expect(TK_LPAREN);
    append(node.children, parse_expression()); // condition
    expect(TK_RPAREN);
    
    append(node.children, parse_block()); // then block
    
    if (current_token.type == TK_KEYWORD && current_token.value == "else") {
        advance();
        if (current_token.type == TK_KEYWORD && current_token.value == "if") {
            append(node.children, parse_if()); // else if
        } else {
            append(node.children, parse_block()); // else block
        }
    }
    
    return node;
}

function parse_while() -> AST {
    let node = AST{node_type: NODE_WHILE, children: [], value: ""};
    
    expect_keyword("while");
    expect(TK_LPAREN);
    append(node.children, parse_expression()); // condition
    expect(TK_RPAREN);
    append(node.children, parse_block()); // body
    
    return node;
}

function parse_return() -> AST {
    let node = AST{node_type: NODE_RETURN, children: [], value: ""};
    
    expect_keyword("return");
    
    if (current_token.type != TK_SEMICOLON) {
        append(node.children, parse_expression());
    }
    
    expect(TK_SEMICOLON);
    
    return node;
}

function parse_print() -> AST {
    let node = AST{node_type: NODE_PRINT, children: [], value: ""};
    
    expect_keyword("print");
    expect(TK_LPAREN);
    append(node.children, parse_expression());
    expect(TK_RPAREN);
    expect(TK_SEMICOLON);
    
    return node;
}

function parse_expression() -> AST {
    return parse_assignment();
}

function parse_assignment() -> AST {
    let left = parse_or();
    
    if (current_token.type == TK_EQUALS) {
        advance();
        let right = parse_assignment();
        let node = AST{node_type: NODE_ASSIGN, children: [], value: ""};
        append(node.children, left);
        append(node.children, right);
        return node;
    }
    
    return left;
}

function parse_or() -> AST {
    let left = parse_and();
    
    while (current_token.type == TK_OR) {
        let op = current_token.value;
        advance();
        let right = parse_and();
        let node = AST{node_type: NODE_BINARY, children: [], value: op};
        append(node.children, left);
        append(node.children, right);
        left = node;
    }
    
    return left;
}

function parse_and() -> AST {
    let left = parse_equality();
    
    while (current_token.type == TK_AND) {
        let op = current_token.value;
        advance();
        let right = parse_equality();
        let node = AST{node_type: NODE_BINARY, children: [], value: op};
        append(node.children, left);
        append(node.children, right);
        left = node;
    }
    
    return left;
}

function parse_equality() -> AST {
    let left = parse_comparison();
    
    while (current_token.type == TK_EQ || current_token.type == TK_NE) {
        let op = current_token.value;
        advance();
        let right = parse_comparison();
        let node = AST{node_type: NODE_BINARY, children: [], value: op};
        append(node.children, left);
        append(node.children, right);
        left = node;
    }
    
    return left;
}

function parse_comparison() -> AST {
    let left = parse_addition();
    
    while (current_token.type == TK_LT || current_token.type == TK_GT ||
           current_token.type == TK_LE || current_token.type == TK_GE) {
        let op = current_token.value;
        advance();
        let right = parse_addition();
        let node = AST{node_type: NODE_BINARY, children: [], value: op};
        append(node.children, left);
        append(node.children, right);
        left = node;
    }
    
    return left;
}

function parse_addition() -> AST {
    let left = parse_multiplication();
    
    while (current_token.type == TK_PLUS || current_token.type == TK_MINUS) {
        let op = current_token.value;
        advance();
        let right = parse_multiplication();
        let node = AST{node_type: NODE_BINARY, children: [], value: op};
        append(node.children, left);
        append(node.children, right);
        left = node;
    }
    
    return left;
}

function parse_multiplication() -> AST {
    let left = parse_unary();
    
    while (current_token.type == TK_MULTIPLY || current_token.type == TK_DIVIDE || 
           current_token.type == TK_MODULO) {
        let op = current_token.value;
        advance();
        let right = parse_unary();
        let node = AST{node_type: NODE_BINARY, children: [], value: op};
        append(node.children, left);
        append(node.children, right);
        left = node;
    }
    
    return left;
}

function parse_unary() -> AST {
    if (current_token.type == TK_MINUS || current_token.type == TK_NOT) {
        let op = current_token.value;
        advance();
        let node = AST{node_type: NODE_UNARY, children: [], value: op};
        append(node.children, parse_unary());
        return node;
    }
    
    return parse_postfix();
}

function parse_postfix() -> AST {
    let left = parse_primary();
    
    while (true) {
        if (current_token.type == TK_LPAREN) {
            // Function call
            advance();
            let node = AST{node_type: NODE_CALL, children: [], value: ""};
            append(node.children, left);
            
            while (current_token.type != TK_RPAREN) {
                append(node.children, parse_expression());
                if (current_token.type == TK_COMMA) {
                    advance();
                }
            }
            
            expect(TK_RPAREN);
            left = node;
        } else if (current_token.type == TK_DOT) {
            // Field access
            advance();
            let field = expect_identifier();
            let node = AST{node_type: NODE_FIELD, children: [], value: field};
            append(node.children, left);
            left = node;
        } else if (current_token.type == TK_LBRACKET) {
            // Array index
            advance();
            let node = AST{node_type: NODE_INDEX, children: [], value: ""};
            append(node.children, left);
            append(node.children, parse_expression());
            expect(TK_RBRACKET);
            left = node;
        } else {
            break;
        }
    }
    
    return left;
}

function parse_primary() -> AST {
    if (current_token.type == TK_NUMBER) {
        let node = AST{node_type: NODE_LITERAL, children: [], value: current_token.value};
        advance();
        return node;
    }
    
    if (current_token.type == TK_STRING) {
        let node = AST{node_type: NODE_LITERAL, children: [], value: current_token.value};
        advance();
        return node;
    }
    
    if (current_token.type == TK_IDENTIFIER) {
        let node = AST{node_type: NODE_IDENTIFIER, children: [], value: current_token.value};
        advance();
        return node;
    }
    
    if (current_token.type == TK_LPAREN) {
        advance();
        let expr = parse_expression();
        expect(TK_RPAREN);
        return expr;
    }
    
    error("Expected expression, got " + current_token.value);
}

// =================================
// CODE GENERATOR
// =================================

function generate_program(ast: AST) {
    // Assembly header
    emit("section .data");
    emit("    ; String literals");
    
    // Generate string literals
    let i = 0;
    while (i < length(strings)) {
        emit("    str" + i + " db '" + strings[i] + "', 0");
        i = i + 1;
    }
    
    emit("");
    emit("section .text");
    emit("global _start");
    emit("");
    
    // Generate functions
    i = 0;
    while (i < length(ast.children)) {
        generate_function(ast.children[i]);
        i = i + 1;
    }
    
    // Entry point
    emit("_start:");
    emit("    call main");
    emit("    mov rax, 60");
    emit("    xor rdi, rdi");
    emit("    syscall");
}

function generate_function(ast: AST) {
    emit(ast.value + ":");
    emit("    push rbp");
    emit("    mov rbp, rsp");
    
    // Generate function body
    generate_statement(ast.children[0]);
    
    emit("    mov rsp, rbp");
    emit("    pop rbp");
    emit("    ret");
    emit("");
}

function generate_statement(ast: AST) {
    if (ast.node_type == NODE_BLOCK) {
        let i = 0;
        while (i < length(ast.children)) {
            generate_statement(ast.children[i]);
            i = i + 1;
        }
    } else if (ast.node_type == NODE_PRINT) {
        generate_print(ast);
    } else if (ast.node_type == NODE_LET) {
        generate_let(ast);
    } else if (ast.node_type == NODE_IF) {
        generate_if(ast);
    } else if (ast.node_type == NODE_WHILE) {
        generate_while(ast);
    } else if (ast.node_type == NODE_RETURN) {
        generate_return(ast);
    } else {
        // Expression statement
        generate_expression(ast);
    }
}

function generate_print(ast: AST) {
    let expr = ast.children[0];
    
    if (expr.node_type == NODE_LITERAL && is_string_literal(expr.value)) {
        // String literal
        let str_index = add_string(expr.value);
        emit("    ; print(\"" + expr.value + "\")");
        emit("    mov rax, 1");          // sys_write
        emit("    mov rdi, 1");          // stdout
        emit("    mov rsi, str" + str_index);
        emit("    mov rdx, " + length(expr.value));
        emit("    syscall");
    } else {
        // TODO: Handle other expressions
        error("Print only supports string literals for now");
    }
}

function generate_let(ast: AST) {
    // TODO: Implement proper variable allocation
    emit("    ; let " + ast.value);
    generate_expression(ast.children[0]);
    emit("    push rax    ; Store " + ast.value);
}

function generate_if(ast: AST) {
    let else_label = next_label();
    let end_label = next_label();
    
    // Condition
    generate_expression(ast.children[0]);
    emit("    test rax, rax");
    emit("    jz " + else_label);
    
    // Then block
    generate_statement(ast.children[1]);
    emit("    jmp " + end_label);
    
    // Else block
    emit(else_label + ":");
    if (length(ast.children) > 2) {
        generate_statement(ast.children[2]);
    }
    
    emit(end_label + ":");
}

function generate_while(ast: AST) {
    let start_label = next_label();
    let end_label = next_label();
    
    emit(start_label + ":");
    
    // Condition
    generate_expression(ast.children[0]);
    emit("    test rax, rax");
    emit("    jz " + end_label);
    
    // Body
    generate_statement(ast.children[1]);
    emit("    jmp " + start_label);
    
    emit(end_label + ":");
}

function generate_return(ast: AST) {
    if (length(ast.children) > 0) {
        generate_expression(ast.children[0]);
    }
    emit("    mov rsp, rbp");
    emit("    pop rbp");
    emit("    ret");
}

function generate_expression(ast: AST) {
    if (ast.node_type == NODE_LITERAL) {
        if (is_number(ast.value)) {
            emit("    mov rax, " + ast.value);
        } else {
            // String literal address
            let str_index = add_string(ast.value);
            emit("    mov rax, str" + str_index);
        }
    } else if (ast.node_type == NODE_IDENTIFIER) {
        // TODO: Load variable
        emit("    ; load " + ast.value);
    } else if (ast.node_type == NODE_BINARY) {
        generate_binary(ast);
    } else if (ast.node_type == NODE_CALL) {
        generate_call(ast);
    }
}

function generate_binary(ast: AST) {
    // Generate left operand
    generate_expression(ast.children[0]);
    emit("    push rax");
    
    // Generate right operand
    generate_expression(ast.children[1]);
    emit("    mov rbx, rax");
    emit("    pop rax");
    
    // Apply operator
    if (ast.value == "+") {
        emit("    add rax, rbx");
    } else if (ast.value == "-") {
        emit("    sub rax, rbx");
    } else if (ast.value == "*") {
        emit("    imul rax, rbx");
    } else if (ast.value == "/") {
        emit("    xor rdx, rdx");
        emit("    idiv rbx");
    } else if (ast.value == "==") {
        emit("    cmp rax, rbx");
        emit("    sete al");
        emit("    movzx rax, al");
    } else if (ast.value == "!=") {
        emit("    cmp rax, rbx");
        emit("    setne al");
        emit("    movzx rax, al");
    } else if (ast.value == "<") {
        emit("    cmp rax, rbx");
        emit("    setl al");
        emit("    movzx rax, al");
    } else if (ast.value == ">") {
        emit("    cmp rax, rbx");
        emit("    setg al");
        emit("    movzx rax, al");
    } else if (ast.value == "<=") {
        emit("    cmp rax, rbx");
        emit("    setle al");
        emit("    movzx rax, al");
    } else if (ast.value == ">=") {
        emit("    cmp rax, rbx");
        emit("    setge al");
        emit("    movzx rax, al");
    }
}

function generate_call(ast: AST) {
    let func_name = ast.children[0].value;
    
    // Push arguments in reverse order
    let i = length(ast.children) - 1;
    while (i > 0) {
        generate_expression(ast.children[i]);
        emit("    push rax");
        i = i - 1;
    }
    
    // Call function
    emit("    call " + func_name);
    
    // Clean up stack
    if (length(ast.children) > 1) {
        emit("    add rsp, " + ((length(ast.children) - 1) * 8));
    }
}

// =================================
// HELPERS
// =================================

function emit(line: string) {
    output = output + line + "\n";
}

function expect(type: i32) {
    if (current_token.type != type) {
        error("Expected token type " + type + ", got " + current_token.type);
    }
    advance();
}

function expect_keyword(keyword: string) {
    if (current_token.type != TK_KEYWORD || current_token.value != keyword) {
        error("Expected keyword '" + keyword + "', got " + current_token.value);
    }
    advance();
}

function expect_identifier() -> string {
    if (current_token.type != TK_IDENTIFIER) {
        error("Expected identifier, got " + current_token.value);
    }
    let name = current_token.value;
    advance();
    return name;
}

function next_label() -> string {
    let label = ".L" + label_counter;
    label_counter = label_counter + 1;
    return label;
}

function add_string(s: string) -> i32 {
    append(strings, s);
    let index = string_counter;
    string_counter = string_counter + 1;
    return index;
}

function is_alpha(ch: char) -> bool {
    return (ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z');
}

function is_digit(ch: char) -> bool {
    return ch >= '0' && ch <= '9';
}

function is_number(s: string) -> bool {
    if (length(s) == 0) { return false; }
    let i = 0;
    while (i < length(s)) {
        if (!is_digit(s[i])) { return false; }
        i = i + 1;
    }
    return true;
}

function is_string_literal(s: string) -> bool {
    // En stage0 las strings ya vienen sin comillas
    return !is_number(s);
}

function error(msg: string) {
    print("Error at line " + line + ", column " + column + ": " + msg);
    exit(1);
}

function init_types() {
    // Built-in types
    append(types, Type{kind: TYPE_VOID, name: "void", size: 0});
    append(types, Type{kind: TYPE_BOOL, name: "bool", size: 1});
    append(types, Type{kind: TYPE_I32, name: "i32", size: 4});
    append(types, Type{kind: TYPE_I64, name: "i64", size: 8});
    append(types, Type{kind: TYPE_STRING, name: "string", size: 8});
}
// ╔═════╦═════╦═════╗
// ║ 🛡️  ║ ⚖️  ║ ⚡  ║
// ║  C  ║  E  ║  G  ║
// ╚═════╩═════╩═════╝
// ╔═════════════════╗
// ║ wcet [T∞] bound ║
// ╚═════════════════╝
//
// Author: Ignacio Peña Sepúlveda
// Date: June 25, 2025

// ===========================================================================
// TEMPO COMPILER STAGE 2 - PARSER TESTS
// ===========================================================================
// Comprehensive test suite for the parser
// ===========================================================================

import "parser.tempo"
import "ast.tempo"
import "lexer.tempo"
import "errors.tempo"

// ===========================================================================
// Test framework
// ===========================================================================

type TestResult = {
    name: String,
    passed: bool,
    message: String,
}

function run_tests() -> Vec<TestResult> {
    let mut results = Vec::new();
    
    // Basic parsing tests
    results.push(test_parse_literals());
    results.push(test_parse_variables());
    results.push(test_parse_binary_expressions());
    results.push(test_parse_function_calls());
    results.push(test_parse_if_expressions());
    results.push(test_parse_match_expressions());
    
    // Declaration tests
    results.push(test_parse_function_declaration());
    results.push(test_parse_type_declaration());
    results.push(test_parse_enum_declaration());
    results.push(test_parse_trait_declaration());
    results.push(test_parse_impl_block());
    
    // Generic tests
    results.push(test_parse_generic_function());
    results.push(test_parse_generic_type());
    results.push(test_parse_trait_bounds());
    results.push(test_parse_where_clause());
    
    // Pattern matching tests
    results.push(test_parse_patterns());
    results.push(test_parse_destructuring());
    
    // WCET annotation tests
    results.push(test_parse_wcet_annotations());
    results.push(test_parse_within_expressions());
    
    // Error recovery tests
    results.push(test_error_recovery());
    results.push(test_helpful_error_messages());
    
    // Incremental parsing tests
    results.push(test_incremental_parsing());
    
    results
}

// ===========================================================================
// Expression parsing tests
// ===========================================================================

function test_parse_literals() -> TestResult {
    let test_cases = vec![
        ("42", "integer literal"),
        ("3.14", "float literal"),
        ("42i32", "typed integer"),
        ("3.14f64", "typed float"),
        ("true", "boolean true"),
        ("false", "boolean false"),
        ("'a'", "character literal"),
        ("\"hello\"", "string literal"),
        ("\"hello ${name}\"", "string interpolation"),
        ("[1, 2, 3]", "array literal"),
        ("(1, 2, 3)", "tuple literal"),
    ];
    
    for (input, description) in test_cases {
        let mut parser = new_parser(input, 0);
        match parse_expression(&mut parser) {
            Ok(expr) => {
                match expr {
                    Expression::Literal(_) => continue,
                    Expression::Array(_) => continue,
                    Expression::Tuple(_) => continue,
                    _ => return TestResult {
                        name: "test_parse_literals".to_string(),
                        passed: false,
                        message: format!("Failed to parse {}: wrong expression type", description),
                    }
                }
            }
            Err(_) => return TestResult {
                name: "test_parse_literals".to_string(),
                passed: false,
                message: format!("Failed to parse {}", description),
            }
        }
    }
    
    TestResult {
        name: "test_parse_literals".to_string(),
        passed: true,
        message: "All literal parsing tests passed".to_string(),
    }
}

function test_parse_binary_expressions() -> TestResult {
    let test_cases = vec![
        ("1 + 2", BinaryOp::Add),
        ("3 - 4", BinaryOp::Sub),
        ("5 * 6", BinaryOp::Mul),
        ("7 / 8", BinaryOp::Div),
        ("9 % 10", BinaryOp::Rem),
        ("a == b", BinaryOp::Eq),
        ("c != d", BinaryOp::Ne),
        ("e < f", BinaryOp::Lt),
        ("g <= h", BinaryOp::Le),
        ("i > j", BinaryOp::Gt),
        ("k >= l", BinaryOp::Ge),
        ("m && n", BinaryOp::And),
        ("o || p", BinaryOp::Or),
        ("q & r", BinaryOp::BitAnd),
        ("s | t", BinaryOp::BitOr),
        ("u ^ v", BinaryOp::BitXor),
        ("w << x", BinaryOp::Shl),
        ("y >> z", BinaryOp::Shr),
    ];
    
    for (input, expected_op) in test_cases {
        let mut parser = new_parser(input, 0);
        match parse_expression(&mut parser) {
            Ok(Expression::Binary(op, _, _)) => {
                if op != expected_op {
                    return TestResult {
                        name: "test_parse_binary_expressions".to_string(),
                        passed: false,
                        message: format!("Wrong operator for '{}': expected {:?}, got {:?}", input, expected_op, op),
                    };
                }
            }
            _ => return TestResult {
                name: "test_parse_binary_expressions".to_string(),
                passed: false,
                message: format!("Failed to parse binary expression: {}", input),
            }
        }
    }
    
    TestResult {
        name: "test_parse_binary_expressions".to_string(),
        passed: true,
        message: "All binary expression tests passed".to_string(),
    }
}

function test_parse_function_calls() -> TestResult {
    let test_cases = vec![
        "foo()",
        "bar(1, 2, 3)",
        "baz(x, y + 1, z * 2)",
        "obj.method()",
        "obj.method(arg1, arg2)",
        "nested.obj.method()",
        "array[index]()",
        "get_fn()(args)",
    ];
    
    for input in test_cases {
        let mut parser = new_parser(input, 0);
        match parse_expression(&mut parser) {
            Ok(Expression::Call(_, _)) => continue,
            Ok(Expression::MethodCall(_, _, _)) => continue,
            _ => return TestResult {
                name: "test_parse_function_calls".to_string(),
                passed: false,
                message: format!("Failed to parse function call: {}", input),
            }
        }
    }
    
    TestResult {
        name: "test_parse_function_calls".to_string(),
        passed: true,
        message: "All function call tests passed".to_string(),
    }
}

function test_parse_if_expressions() -> TestResult {
    let test_cases = vec![
        "if x > 0 { 1 } else { -1 }",
        "if condition { do_something() }",
        "if a { b } else if c { d } else { e }",
        "if let Some(x) = opt { x + 1 } else { 0 }",
    ];
    
    for input in test_cases {
        let mut parser = new_parser(input, 0);
        match parse_expression(&mut parser) {
            Ok(Expression::If(_, _, _)) => continue,
            _ => return TestResult {
                name: "test_parse_if_expressions".to_string(),
                passed: false,
                message: format!("Failed to parse if expression: {}", input),
            }
        }
    }
    
    TestResult {
        name: "test_parse_if_expressions".to_string(),
        passed: true,
        message: "All if expression tests passed".to_string(),
    }
}

function test_parse_match_expressions() -> TestResult {
    let test_cases = vec![
        "match x {
            0 => \"zero\",
            1 => \"one\",
            _ => \"other\",
        }",
        "match opt {
            Some(x) => x + 1,
            None => 0,
        }",
        "match result {
            Ok(value) => value,
            Err(e) => panic(e),
        }",
        "match (x, y) {
            (0, 0) => \"origin\",
            (0, _) => \"y-axis\",
            (_, 0) => \"x-axis\",
            (_, _) => \"quadrant\",
        }",
    ];
    
    for input in test_cases {
        let mut parser = new_parser(input, 0);
        match parse_expression(&mut parser) {
            Ok(Expression::Match(_, arms)) => {
                if arms.is_empty() {
                    return TestResult {
                        name: "test_parse_match_expressions".to_string(),
                        passed: false,
                        message: "Match expression has no arms".to_string(),
                    };
                }
            }
            _ => return TestResult {
                name: "test_parse_match_expressions".to_string(),
                passed: false,
                message: format!("Failed to parse match expression"),
            }
        }
    }
    
    TestResult {
        name: "test_parse_match_expressions".to_string(),
        passed: true,
        message: "All match expression tests passed".to_string(),
    }
}

// ===========================================================================
// Declaration parsing tests
// ===========================================================================

function test_parse_function_declaration() -> TestResult {
    let test_cases = vec![
        "function foo() { }",
        "function bar(x: i32) -> i32 { x + 1 }",
        "function baz(x: i32, y: i32) -> i32 { x + y }",
        "public function qux() { }",
        "function with_default(x: i32 = 0) { }",
        "function generic<T>(x: T) -> T { x }",
        "function with_wcet() within 100 cycles { }",
        "async function async_fn() { await something() }",
    ];
    
    for input in test_cases {
        let mut parser = new_parser(input, 0);
        match parse_item(&mut parser) {
            Ok(Item::Function(decl)) => {
                // Validate function structure
                if decl.name.is_empty() {
                    return TestResult {
                        name: "test_parse_function_declaration".to_string(),
                        passed: false,
                        message: "Function has no name".to_string(),
                    };
                }
            }
            _ => return TestResult {
                name: "test_parse_function_declaration".to_string(),
                passed: false,
                message: format!("Failed to parse function declaration"),
            }
        }
    }
    
    TestResult {
        name: "test_parse_function_declaration".to_string(),
        passed: true,
        message: "All function declaration tests passed".to_string(),
    }
}

function test_parse_type_declaration() -> TestResult {
    let test_cases = vec![
        "type Point = { x: f64, y: f64 }",
        "type Option<T> = enum { Some(T), None }",
        "type Result<T, E> = enum { Ok(T), Err(E) }",
        "type Alias = i32",
        "type Complex = { real: f64, imag: f64 }",
        "public type PublicType = { field: i32 }",
        "type Union = union { i: i32, f: f32 }",
    ];
    
    for input in test_cases {
        let mut parser = new_parser(input, 0);
        match parse_item(&mut parser) {
            Ok(Item::Type(_)) => continue,
            _ => return TestResult {
                name: "test_parse_type_declaration".to_string(),
                passed: false,
                message: format!("Failed to parse type declaration"),
            }
        }
    }
    
    TestResult {
        name: "test_parse_type_declaration".to_string(),
        passed: true,
        message: "All type declaration tests passed".to_string(),
    }
}

function test_parse_enum_declaration() -> TestResult {
    let test_cases = vec![
        "enum Color { Red, Green, Blue }",
        "enum Option<T> { Some(T), None }",
        "enum Result<T, E> { Ok(T), Err(E) }",
        "enum Message {
            Quit,
            Move { x: i32, y: i32 },
            Write(String),
            ChangeColor(i32, i32, i32),
        }",
        "enum WithDiscriminants {
            A = 0,
            B = 10,
            C = 20,
        }",
    ];
    
    for input in test_cases {
        let mut parser = new_parser(input, 0);
        match parse_item(&mut parser) {
            Ok(Item::Enum(decl)) => {
                if decl.variants.is_empty() {
                    return TestResult {
                        name: "test_parse_enum_declaration".to_string(),
                        passed: false,
                        message: "Enum has no variants".to_string(),
                    };
                }
            }
            _ => return TestResult {
                name: "test_parse_enum_declaration".to_string(),
                passed: false,
                message: format!("Failed to parse enum declaration"),
            }
        }
    }
    
    TestResult {
        name: "test_parse_enum_declaration".to_string(),
        passed: true,
        message: "All enum declaration tests passed".to_string(),
    }
}

function test_parse_trait_declaration() -> TestResult {
    let test_cases = vec![
        "trait Display {
            function fmt(&self) -> String;
        }",
        "trait Iterator {
            type Item;
            function next(&mut self) -> Option<Self::Item>;
        }",
        "trait Add<Rhs = Self> {
            type Output;
            function add(self, rhs: Rhs) -> Self::Output;
        }",
        "trait Clone {
            function clone(&self) -> Self;
        }",
    ];
    
    for input in test_cases {
        let mut parser = new_parser(input, 0);
        match parse_item(&mut parser) {
            Ok(Item::Trait(decl)) => {
                if decl.items.is_empty() {
                    return TestResult {
                        name: "test_parse_trait_declaration".to_string(),
                        passed: false,
                        message: "Trait has no items".to_string(),
                    };
                }
            }
            _ => return TestResult {
                name: "test_parse_trait_declaration".to_string(),
                passed: false,
                message: format!("Failed to parse trait declaration"),
            }
        }
    }
    
    TestResult {
        name: "test_parse_trait_declaration".to_string(),
        passed: true,
        message: "All trait declaration tests passed".to_string(),
    }
}

function test_parse_impl_block() -> TestResult {
    let test_cases = vec![
        "impl Point {
            function new(x: f64, y: f64) -> Point {
                Point { x, y }
            }
        }",
        "impl<T> Option<T> {
            function is_some(&self) -> bool {
                match self {
                    Some(_) => true,
                    None => false,
                }
            }
        }",
        "impl Display for Point {
            function fmt(&self) -> String {
                format!(\"({}, {})\", self.x, self.y)
            }
        }",
        "impl<T: Display> Display for Option<T> {
            function fmt(&self) -> String {
                match self {
                    Some(x) => format!(\"Some({})\", x.fmt()),
                    None => \"None\".to_string(),
                }
            }
        }",
    ];
    
    for input in test_cases {
        let mut parser = new_parser(input, 0);
        match parse_item(&mut parser) {
            Ok(Item::Impl(block)) => {
                if block.items.is_empty() {
                    return TestResult {
                        name: "test_parse_impl_block".to_string(),
                        passed: false,
                        message: "Impl block has no items".to_string(),
                    };
                }
            }
            _ => return TestResult {
                name: "test_parse_impl_block".to_string(),
                passed: false,
                message: format!("Failed to parse impl block"),
            }
        }
    }
    
    TestResult {
        name: "test_parse_impl_block".to_string(),
        passed: true,
        message: "All impl block tests passed".to_string(),
    }
}

// ===========================================================================
// Generic and trait tests
// ===========================================================================

function test_parse_generic_function() -> TestResult {
    let test_cases = vec![
        "function identity<T>(x: T) -> T { x }",
        "function swap<T, U>(x: T, y: U) -> (U, T) { (y, x) }",
        "function clone_vec<T: Clone>(v: Vec<T>) -> Vec<T> { v.clone() }",
        "function complex<T, U, V>(x: T, y: U) -> V where T: Into<V>, U: Into<V> { x.into() }",
    ];
    
    for input in test_cases {
        let mut parser = new_parser(input, 0);
        match parse_item(&mut parser) {
            Ok(Item::Function(decl)) => {
                if decl.generics.is_none() {
                    return TestResult {
                        name: "test_parse_generic_function".to_string(),
                        passed: false,
                        message: "Function should have generics".to_string(),
                    };
                }
            }
            _ => return TestResult {
                name: "test_parse_generic_function".to_string(),
                passed: false,
                message: format!("Failed to parse generic function"),
            }
        }
    }
    
    TestResult {
        name: "test_parse_generic_function".to_string(),
        passed: true,
        message: "All generic function tests passed".to_string(),
    }
}

function test_parse_trait_bounds() -> TestResult {
    let test_cases = vec![
        "T: Display",
        "T: Display + Clone",
        "T: Display + Clone + Debug",
        "T: Iterator<Item = String>",
        "T: Fn(i32) -> i32",
        "T: ?Sized",
        "T: 'a + Display",
    ];
    
    for input in test_cases {
        let input_with_context = format!("function foo<{}>() {{ }}", input);
        let mut parser = new_parser(&input_with_context, 0);
        match parse_item(&mut parser) {
            Ok(Item::Function(decl)) => {
                if let Some(generics) = decl.generics {
                    if generics.params.is_empty() || generics.params[0].bounds.is_empty() {
                        return TestResult {
                            name: "test_parse_trait_bounds".to_string(),
                            passed: false,
                            message: format!("Failed to parse trait bounds: {}", input),
                        };
                    }
                }
            }
            _ => return TestResult {
                name: "test_parse_trait_bounds".to_string(),
                passed: false,
                message: format!("Failed to parse function with trait bounds"),
            }
        }
    }
    
    TestResult {
        name: "test_parse_trait_bounds".to_string(),
        passed: true,
        message: "All trait bound tests passed".to_string(),
    }
}

// ===========================================================================
// Pattern matching tests
// ===========================================================================

function test_parse_patterns() -> TestResult {
    let test_cases = vec![
        ("_", "wildcard"),
        ("x", "variable"),
        ("mut x", "mutable variable"),
        ("42", "literal"),
        ("\"hello\"", "string literal"),
        ("true", "boolean literal"),
        ("(x, y)", "tuple pattern"),
        ("(x, _, z)", "tuple with wildcard"),
        ("[a, b, c]", "array pattern"),
        ("Some(x)", "enum pattern"),
        ("Point { x, y }", "struct pattern"),
        ("Point { x: a, y: b }", "struct pattern with renaming"),
        ("&x", "reference pattern"),
        ("&mut x", "mutable reference pattern"),
        ("x | y | z", "or pattern"),
        ("0..10", "range pattern"),
        ("'a'..'z'", "char range pattern"),
    ];
    
    for (pattern, description) in test_cases {
        let input = format!("let {} = value;", pattern);
        let mut parser = new_parser(&input, 0);
        match parse_statement(&mut parser) {
            Ok(Statement::Let(pat, _, _)) => {
                // Pattern parsed successfully
            }
            _ => return TestResult {
                name: "test_parse_patterns".to_string(),
                passed: false,
                message: format!("Failed to parse {} pattern: {}", description, pattern),
            }
        }
    }
    
    TestResult {
        name: "test_parse_patterns".to_string(),
        passed: true,
        message: "All pattern tests passed".to_string(),
    }
}

// ===========================================================================
// WCET annotation tests
// ===========================================================================

function test_parse_wcet_annotations() -> TestResult {
    let test_cases = vec![
        "function foo() within 100 cycles { }",
        "function bar() within 50 µs { }",
        "function baz() within O(n) { }",
        "function qux() within O(log n) { }",
        "function complex() within O(n²) { }",
        "function conditional(flag: bool) within 100 cycles if flag { }",
    ];
    
    for input in test_cases {
        let mut parser = new_parser(input, 0);
        match parse_item(&mut parser) {
            Ok(Item::Function(decl)) => {
                if decl.wcet.is_none() {
                    return TestResult {
                        name: "test_parse_wcet_annotations".to_string(),
                        passed: false,
                        message: "Function should have WCET annotation".to_string(),
                    };
                }
            }
            _ => return TestResult {
                name: "test_parse_wcet_annotations".to_string(),
                passed: false,
                message: format!("Failed to parse function with WCET annotation"),
            }
        }
    }
    
    TestResult {
        name: "test_parse_wcet_annotations".to_string(),
        passed: true,
        message: "All WCET annotation tests passed".to_string(),
    }
}

function test_parse_within_expressions() -> TestResult {
    let test_cases = vec![
        "within 1000 cycles { expensive_computation() }",
        "within 100 µs { time_critical_code() }",
        "within memory 1 KB { allocate_buffer() }",
    ];
    
    for input in test_cases {
        let mut parser = new_parser(input, 0);
        match parse_expression(&mut parser) {
            Ok(Expression::Within(_, _)) => continue,
            Ok(Expression::Memory(_, _)) => continue,
            _ => return TestResult {
                name: "test_parse_within_expressions".to_string(),
                passed: false,
                message: format!("Failed to parse within expression"),
            }
        }
    }
    
    TestResult {
        name: "test_parse_within_expressions".to_string(),
        passed: true,
        message: "All within expression tests passed".to_string(),
    }
}

// ===========================================================================
// Error recovery tests
// ===========================================================================

function test_error_recovery() -> TestResult {
    let test_cases = vec![
        ("function foo() { let x = ; }", "missing expression after ="),
        ("function bar { }", "missing parentheses"),
        ("let x = 1 + + 2;", "double operator"),
        ("if { }", "missing condition"),
        ("match x { }", "empty match"),
        ("function<>() { }", "empty generics"),
    ];
    
    for (input, description) in test_cases {
        let mut parser = new_parser(input, 0);
        let _ = parse_program(&mut parser);
        
        if parser.errors.is_empty() {
            return TestResult {
                name: "test_error_recovery".to_string(),
                passed: false,
                message: format!("Expected error for: {} ({})", input, description),
            };
        }
    }
    
    TestResult {
        name: "test_error_recovery".to_string(),
        passed: true,
        message: "All error recovery tests passed".to_string(),
    }
}

function test_helpful_error_messages() -> TestResult {
    let test_case = "function foo() {
        let x = 42
        let y = x + 1;
    }";
    
    let mut parser = new_parser(test_case, 0);
    let _ = parse_program(&mut parser);
    
    if parser.errors.is_empty() {
        return TestResult {
            name: "test_helpful_error_messages".to_string(),
            passed: false,
            message: "Expected error for missing semicolon".to_string(),
        };
    }
    
    let error = &parser.errors[0];
    if !error.suggestions.iter().any(|s| s.contains("semicolon")) {
        return TestResult {
            name: "test_helpful_error_messages".to_string(),
            passed: false,
            message: "Error message should suggest adding semicolon".to_string(),
        };
    }
    
    TestResult {
        name: "test_helpful_error_messages".to_string(),
        passed: true,
        message: "Error messages are helpful".to_string(),
    }
}

// ===========================================================================
// Incremental parsing tests
// ===========================================================================

function test_incremental_parsing() -> TestResult {
    let original = "function foo() {
        let x = 42;
        let y = 43;
    }";
    
    let mut parser = new_parser(original, 0);
    let ast1 = parse_program(&mut parser);
    
    if ast1.is_err() {
        return TestResult {
            name: "test_incremental_parsing".to_string(),
            passed: false,
            message: "Failed to parse original program".to_string(),
        };
    }
    
    // Simulate a small edit (change 42 to 52)
    let modified = "function foo() {
        let x = 52;
        let y = 43;
    }";
    
    let mut parser2 = new_parser(modified, 0);
    let changed_range = Range { start: 32, end: 34 };
    
    // In a real implementation, we would reuse parts of ast1
    let ast2 = parse_incremental(&mut parser2, &ast1.unwrap(), changed_range);
    
    if ast2.is_err() {
        return TestResult {
            name: "test_incremental_parsing".to_string(),
            passed: false,
            message: "Failed incremental parse".to_string(),
        };
    }
    
    TestResult {
        name: "test_incremental_parsing".to_string(),
        passed: true,
        message: "Incremental parsing works".to_string(),
    }
}

// ===========================================================================
// Test runner
// ===========================================================================

function main() {
    println!("Running parser tests...\n");
    
    let results = run_tests();
    let mut passed = 0;
    let mut failed = 0;
    
    for result in results {
        if result.passed {
            println!("✓ {}: {}", result.name, result.message);
            passed += 1;
        } else {
            println!("✗ {}: {}", result.name, result.message);
            failed += 1;
        }
    }
    
    println!("\nTest Summary: {} passed, {} failed", passed, failed);
    
    if failed > 0 {
        exit(1);
    }
}
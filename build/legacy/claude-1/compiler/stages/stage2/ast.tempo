// ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ï¶‚ïê‚ïê‚ïê‚ïê‚ïê‚ï¶‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
// ‚ïë üõ°Ô∏è  ‚ïë ‚öñÔ∏è  ‚ïë ‚ö°  ‚ïë
// ‚ïë  C  ‚ïë  E  ‚ïë  G  ‚ïë
// ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ï©‚ïê‚ïê‚ïê‚ïê‚ïê‚ï©‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
// ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
// ‚ïë wcet [T‚àû] bound ‚ïë
// ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
//
// Author: Ignacio Pe√±a Sep√∫lveda
// Date: June 25, 2025

// ===========================================================================
// TEMPO COMPILER STAGE 2 - ABSTRACT SYNTAX TREE
// ===========================================================================
// Complete AST node definitions for all Tempo language features
// ===========================================================================

import "types.tempo"
import "lexer.tempo"

// ===========================================================================
// Top-level AST nodes
// ===========================================================================

type Program = {
    modules: Vec<Module>,
    source_map: SourceMap,
}

type Module = {
    name: String,
    imports: Vec<Import>,
    exports: Vec<Export>,
    items: Vec<Item>,
    span: Span,
}

type Import = {
    path: String,
    items: ImportItems,
    alias: Option<String>,
    span: Span,
}

enum ImportItems {
    All,
    Specific(Vec<String>),
}

type Export = {
    item: String,
    alias: Option<String>,
    span: Span,
}

// ===========================================================================
// Item definitions (top-level declarations)
// ===========================================================================

enum Item {
    Function(FunctionDecl),
    Type(TypeDecl),
    Trait(TraitDecl),
    Impl(ImplBlock),
    Enum(EnumDecl),
    Const(ConstDecl),
    Static(StaticDecl),
    Module(ModuleDecl),
}

type FunctionDecl = {
    name: String,
    generics: Option<GenericParams>,
    params: Vec<Parameter>,
    return_type: Option<TypeExpr>,
    body: Option<Block>,
    attributes: Vec<Attribute>,
    visibility: Visibility,
    is_async: bool,
    wcet: Option<WCETAnnotation>,
    span: Span,
}

type Parameter = {
    pattern: Pattern,
    type: TypeExpr,
    default: Option<Expression>,
    span: Span,
}

type TypeDecl = {
    name: String,
    generics: Option<GenericParams>,
    definition: TypeDefinition,
    visibility: Visibility,
    span: Span,
}

enum TypeDefinition {
    Struct(StructDef),
    Union(UnionDef),
    Alias(TypeExpr),
}

type StructDef = {
    fields: Vec<FieldDef>,
    is_packed: bool,
}

type UnionDef = {
    fields: Vec<FieldDef>,
}

type FieldDef = {
    name: String,
    type: TypeExpr,
    visibility: Visibility,
    attributes: Vec<Attribute>,
    span: Span,
}

type EnumDecl = {
    name: String,
    generics: Option<GenericParams>,
    variants: Vec<EnumVariant>,
    visibility: Visibility,
    span: Span,
}

type EnumVariant = {
    name: String,
    fields: VariantFields,
    discriminant: Option<Expression>,
    attributes: Vec<Attribute>,
    span: Span,
}

enum VariantFields {
    Unit,
    Tuple(Vec<TypeExpr>),
    Struct(Vec<FieldDef>),
}

type TraitDecl = {
    name: String,
    generics: Option<GenericParams>,
    bounds: Vec<TraitBound>,
    items: Vec<TraitItem>,
    visibility: Visibility,
    span: Span,
}

enum TraitItem {
    Method(MethodSignature),
    AssociatedType(AssociatedType),
    Const(ConstDecl),
}

type MethodSignature = {
    name: String,
    generics: Option<GenericParams>,
    params: Vec<Parameter>,
    return_type: Option<TypeExpr>,
    is_async: bool,
    wcet: Option<WCETAnnotation>,
    span: Span,
}

type AssociatedType = {
    name: String,
    bounds: Vec<TraitBound>,
    default: Option<TypeExpr>,
    span: Span,
}

type ImplBlock = {
    generics: Option<GenericParams>,
    trait_ref: Option<TraitRef>,
    for_type: TypeExpr,
    items: Vec<ImplItem>,
    span: Span,
}

type TraitRef = {
    path: Path,
    args: Vec<GenericArg>,
}

enum ImplItem {
    Method(FunctionDecl),
    AssociatedType(String, TypeExpr),
    Const(ConstDecl),
}

type ConstDecl = {
    name: String,
    type: TypeExpr,
    value: Expression,
    visibility: Visibility,
    span: Span,
}

type StaticDecl = {
    name: String,
    type: TypeExpr,
    value: Expression,
    is_mut: bool,
    visibility: Visibility,
    span: Span,
}

type ModuleDecl = {
    name: String,
    items: Vec<Item>,
    visibility: Visibility,
    span: Span,
}

// ===========================================================================
// Type expressions
// ===========================================================================

enum TypeExpr {
    Path(Path),
    Primitive(PrimitiveType),
    Array(Box<TypeExpr>, Option<Expression>),
    Slice(Box<TypeExpr>),
    Tuple(Vec<TypeExpr>),
    Pointer(Box<TypeExpr>, Mutability),
    Reference(Box<TypeExpr>, Mutability, Option<Lifetime>),
    Function(FunctionTypeExpr),
    Generic(String, Vec<TraitBound>),
    Associated(Box<TypeExpr>, String),
    Linear(Box<TypeExpr>),
    Never,
    Infer,
}

type FunctionTypeExpr = {
    params: Vec<TypeExpr>,
    return_type: Box<TypeExpr>,
    is_async: bool,
}

enum PrimitiveType {
    Bool,
    I8, I16, I32, I64, I128,
    U8, U16, U32, U64, U128,
    F32, F64,
    Char,
    Str,
}

// ===========================================================================
// Expressions
// ===========================================================================

enum Expression {
    // Literals
    Literal(Literal),
    
    // Variables and paths
    Variable(String),
    Path(Path),
    
    // Operators
    Binary(BinaryOp, Box<Expression>, Box<Expression>),
    Unary(UnaryOp, Box<Expression>),
    Assignment(Box<Expression>, Box<Expression>),
    CompoundAssignment(BinaryOp, Box<Expression>, Box<Expression>),
    
    // Function calls
    Call(Box<Expression>, Vec<Expression>),
    MethodCall(Box<Expression>, String, Vec<Expression>),
    
    // Field access
    Field(Box<Expression>, String),
    Index(Box<Expression>, Box<Expression>),
    
    // Control flow
    If(Box<Expression>, Box<Expression>, Option<Box<Expression>>),
    While(Box<Expression>, Box<Expression>),
    For(Pattern, Box<Expression>, Box<Expression>),
    Loop(Box<Expression>),
    Match(Box<Expression>, Vec<MatchArm>),
    
    // Blocks and statements
    Block(Block),
    
    // Type operations
    Cast(Box<Expression>, TypeExpr),
    TypeAscription(Box<Expression>, TypeExpr),
    
    // Memory operations
    Ref(Box<Expression>, Mutability),
    Deref(Box<Expression>),
    
    // Constructors
    Struct(Path, Vec<FieldInit>),
    Tuple(Vec<Expression>),
    Array(Vec<Expression>),
    
    // Closures
    Closure(Vec<Parameter>, Box<Expression>, Option<TypeExpr>),
    
    // Async
    Async(Box<Expression>),
    Await(Box<Expression>),
    
    // Defer
    Defer(Box<Expression>),
    
    // Range
    Range(Option<Box<Expression>>, Option<Box<Expression>>),
    
    // Channel operations
    Send(Box<Expression>, Box<Expression>),
    Receive(Box<Expression>),
    
    // WCET annotations
    Within(Box<Expression>, WCETBound),
    
    // Memory annotations
    Memory(Box<Expression>, MemoryBound),
    
    // Placeholder for error recovery
    Error,
}

enum Literal {
    Bool(bool),
    Integer(i128, Option<IntegerType>),
    Float(f64, Option<FloatType>),
    Char(char),
    String(String),
    Unit,
}

enum IntegerType {
    I8, I16, I32, I64, I128,
    U8, U16, U32, U64, U128,
}

enum FloatType {
    F32, F64,
}

enum BinaryOp {
    // Arithmetic
    Add, Sub, Mul, Div, Rem,
    
    // Comparison
    Eq, Ne, Lt, Le, Gt, Ge,
    
    // Logical
    And, Or,
    
    // Bitwise
    BitAnd, BitOr, BitXor, Shl, Shr,
}

enum UnaryOp {
    Not,    // Logical not
    Neg,    // Negation
    BitNot, // Bitwise not
}

type FieldInit = {
    name: String,
    value: Expression,
    span: Span,
}

type MatchArm = {
    pattern: Pattern,
    guard: Option<Expression>,
    body: Expression,
    span: Span,
}

// ===========================================================================
// Patterns
// ===========================================================================

enum Pattern {
    Wildcard,
    Variable(String, Option<Mutability>),
    Literal(Literal),
    Tuple(Vec<Pattern>),
    Struct(Path, Vec<FieldPattern>),
    Enum(Path, Vec<Pattern>),
    Array(Vec<Pattern>),
    Slice(Vec<Pattern>, Option<usize>),
    Range(Option<Box<Pattern>>, Option<Box<Pattern>>),
    Reference(Box<Pattern>, Mutability),
    Or(Vec<Pattern>),
    Guard(Box<Pattern>, Expression),
}

type FieldPattern = {
    name: String,
    pattern: Pattern,
    span: Span,
}

// ===========================================================================
// Statements
// ===========================================================================

enum Statement {
    Expression(Expression),
    Let(Pattern, Option<TypeExpr>, Option<Expression>),
    Return(Option<Expression>),
    Break(Option<String>),
    Continue(Option<String>),
    Item(Item),
}

type Block = {
    statements: Vec<Statement>,
    final_expr: Option<Box<Expression>>,
    span: Span,
}

// ===========================================================================
// Generics and traits
// ===========================================================================

type GenericParams = {
    params: Vec<GenericParam>,
    where_clause: Option<WhereClause>,
    span: Span,
}

type GenericParam = {
    name: String,
    bounds: Vec<TraitBound>,
    default: Option<TypeExpr>,
    kind: GenericParamKind,
    span: Span,
}

enum GenericParamKind {
    Type,
    Lifetime,
    Const(TypeExpr),
}

type TraitBound = {
    path: Path,
    args: Vec<GenericArg>,
    modifier: Option<TraitBoundModifier>,
}

enum TraitBoundModifier {
    Maybe,  // ?Trait
}

enum GenericArg {
    Type(TypeExpr),
    Lifetime(Lifetime),
    Const(Expression),
}

type WhereClause = {
    predicates: Vec<WherePredicate>,
    span: Span,
}

enum WherePredicate {
    TypeBound(TypeExpr, Vec<TraitBound>),
    LifetimeBound(Lifetime, Vec<Lifetime>),
}

type Lifetime = {
    name: String,
    span: Span,
}

// ===========================================================================
// Paths and identifiers
// ===========================================================================

type Path = {
    segments: Vec<PathSegment>,
    is_absolute: bool,
    span: Span,
}

type PathSegment = {
    name: String,
    args: Option<GenericArgs>,
    span: Span,
}

type GenericArgs = {
    args: Vec<GenericArg>,
    span: Span,
}

// ===========================================================================
// Attributes and annotations
// ===========================================================================

type Attribute = {
    name: String,
    args: Vec<AttributeArg>,
    span: Span,
}

enum AttributeArg {
    Literal(Literal),
    Named(String, Literal),
}

type WCETAnnotation = {
    bound: WCETBound,
    condition: Option<Expression>,
    span: Span,
}

enum WCETBound {
    Constant(u64, TimeUnit),
    Linear(String),
    Logarithmic(String),
    Quadratic(String),
    Polynomial(String, u32),
    Exponential(String),
    Expression(Expression),
}

type MemoryBound = {
    size: u64,
    unit: MemoryUnit,
    span: Span,
}

// ===========================================================================
// Source mapping for error reporting
// ===========================================================================

type SourceMap = {
    files: Vec<SourceFile>,
}

type SourceFile = {
    id: u32,
    name: String,
    content: String,
    line_starts: Vec<u32>,
}

// ===========================================================================
// AST visitor trait for traversal
// ===========================================================================

trait ASTVisitor {
    function visit_program(&mut self, program: &Program);
    function visit_module(&mut self, module: &Module);
    function visit_item(&mut self, item: &Item);
    function visit_expression(&mut self, expr: &Expression);
    function visit_statement(&mut self, stmt: &Statement);
    function visit_pattern(&mut self, pattern: &Pattern);
    function visit_type(&mut self, ty: &TypeExpr);
}

// ===========================================================================
// Utility functions
// ===========================================================================

function new_program() -> Program {
    Program {
        modules: Vec::new(),
        source_map: SourceMap { files: Vec::new() },
    }
}

function span_union(s1: Span, s2: Span) -> Span {
    Span {
        start: min(s1.start, s2.start),
        end: max(s1.end, s2.end),
        file_id: s1.file_id,
    }
}

function is_lvalue(expr: &Expression) -> bool {
    match expr {
        Expression::Variable(_) => true,
        Expression::Field(base, _) => is_lvalue(base),
        Expression::Index(base, _) => is_lvalue(base),
        Expression::Deref(_) => true,
        _ => false,
    }
}
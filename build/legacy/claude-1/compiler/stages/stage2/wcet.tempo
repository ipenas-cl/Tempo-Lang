// ╔═════╦═════╦═════╗
// ║ 🛡️  ║ ⚖️  ║ ⚡  ║
// ║  C  ║  E  ║  G  ║
// ╚═════╩═════╩═════╝
// ╔═════════════════╗
// ║ wcet [T∞] bound ║
// ╚═════════════════╝
//
// Author: Ignacio Peña Sepúlveda
// Date: June 25, 2025

// ===========================================================================
// TEMPO COMPILER STAGE 2 - WCET ANALYZER
// ===========================================================================
// Worst-Case Execution Time analysis for deterministic guarantees
// ===========================================================================

import "types.tempo"
import "ast.tempo"

// WCET analysis context
type WCETContext = {
    // Hardware model
    cpu_frequency: Frequency,
    cache_size: Memory,
    cache_line_size: Memory,
    pipeline_depth: u32,
    
    // Instruction costs (in cycles)
    instruction_costs: Map<String, u64>,
    
    // Loop bounds
    loop_bounds: Map<NodeId, LoopBound>,
    
    // Function WCET cache
    function_wcet: Map<String, TimeBound>,
    
    // Memory access patterns
    memory_accesses: Vec<MemoryAccess>,
}

type LoopBound = {
    min_iterations: u64,
    max_iterations: u64,
    step: u64,
}

type MemoryAccess = {
    address: Expression,
    size: Memory,
    is_write: bool,
    is_sequential: bool,
}

// Initialize WCET context for target architecture
function new_wcet_context(target: Architecture) -> WCETContext {
    match target {
        Architecture::X86_64 => {
            let mut costs = Map::new();
            // Basic arithmetic
            costs.insert("add", 1);
            costs.insert("sub", 1);
            costs.insert("mul", 3);
            costs.insert("div", 20);
            costs.insert("mod", 25);
            
            // Memory operations
            costs.insert("load", 4);      // L1 cache hit
            costs.insert("store", 4);
            costs.insert("load_miss", 100); // Cache miss
            
            // Control flow
            costs.insert("jmp", 1);
            costs.insert("call", 5);
            costs.insert("ret", 3);
            costs.insert("branch_predicted", 1);
            costs.insert("branch_mispredicted", 15);
            
            WCETContext{
                cpu_frequency: 3.0GHz,
                cache_size: 32KB,
                cache_line_size: 64bytes,
                pipeline_depth: 14,
                instruction_costs: costs,
                loop_bounds: Map::new(),
                function_wcet: Map::new(),
                memory_accesses: Vec::new(),
            }
        }
        
        Architecture::ARM64 => {
            // Similar setup for ARM
            // ...
        }
        
        Architecture::RISCV => {
            // RISC-V is more predictable
            // ...
        }
    }
}

// Main WCET analysis function
function analyze_function_wcet(
    func: &Function,
    context: &mut WCETContext
) -> Result<TimeBound, String> {
    // Check if already cached
    if let Some(wcet) = context.function_wcet.get(&func.name) {
        return Ok(wcet.clone());
    }
    
    // Check for explicit WCET annotation
    if let Some(annotation) = func.annotations.get("wcet") {
        let wcet = parse_wcet_annotation(annotation)?;
        context.function_wcet.insert(func.name.clone(), wcet.clone());
        return Ok(wcet);
    }
    
    // Analyze function body
    let body_wcet = analyze_block_wcet(&func.body, context)?;
    
    // Add function overhead
    let call_overhead = context.instruction_costs["call"] + context.instruction_costs["ret"];
    let total_wcet = add_wcet(
        body_wcet, 
        TimeBound::Constant(call_overhead, TimeUnit::Cycles)
    );
    
    // Cache result
    context.function_wcet.insert(func.name.clone(), total_wcet.clone());
    
    Ok(total_wcet)
}

// Analyze block WCET
function analyze_block_wcet(
    block: &Block,
    context: &mut WCETContext
) -> Result<TimeBound, String> {
    let mut total = TimeBound::Constant(0, TimeUnit::Cycles);
    
    for stmt in &block.statements {
        let stmt_wcet = analyze_statement_wcet(stmt, context)?;
        total = add_wcet(total, stmt_wcet);
    }
    
    Ok(total)
}

// Analyze statement WCET
function analyze_statement_wcet(
    stmt: &Statement,
    context: &mut WCETContext
) -> Result<TimeBound, String> {
    match stmt {
        Statement::Expression(expr) => analyze_expression_wcet(expr, context),
        
        Statement::Let(var, expr) => {
            let expr_wcet = analyze_expression_wcet(expr, context)?;
            let store_wcet = TimeBound::Constant(
                context.instruction_costs["store"], 
                TimeUnit::Cycles
            );
            Ok(add_wcet(expr_wcet, store_wcet))
        }
        
        Statement::Assign(lhs, rhs) => {
            let lhs_wcet = analyze_expression_wcet(lhs, context)?;
            let rhs_wcet = analyze_expression_wcet(rhs, context)?;
            let store_wcet = TimeBound::Constant(
                context.instruction_costs["store"], 
                TimeUnit::Cycles
            );
            Ok(add_wcet(add_wcet(lhs_wcet, rhs_wcet), store_wcet))
        }
        
        Statement::If(cond, then_block, else_block) => {
            let cond_wcet = analyze_expression_wcet(cond, context)?;
            let then_wcet = analyze_block_wcet(then_block, context)?;
            
            let branch_wcet = if let Some(else_block) = else_block {
                let else_wcet = analyze_block_wcet(else_block, context)?;
                max_wcet(then_wcet, else_wcet)
            } else {
                then_wcet
            };
            
            // Add branch misprediction penalty (worst case)
            let branch_cost = TimeBound::Constant(
                context.instruction_costs["branch_mispredicted"],
                TimeUnit::Cycles
            );
            
            Ok(add_wcet(add_wcet(cond_wcet, branch_wcet), branch_cost))
        }
        
        Statement::While(cond, body) => analyze_loop_wcet(stmt.id, cond, body, context),
        
        Statement::For(init, cond, update, body) => {
            let init_wcet = analyze_statement_wcet(init, context)?;
            let loop_wcet = analyze_loop_wcet(stmt.id, cond, body, context)?;
            Ok(add_wcet(init_wcet, loop_wcet))
        }
        
        Statement::Return(expr) => {
            let expr_wcet = if let Some(expr) = expr {
                analyze_expression_wcet(expr, context)?
            } else {
                TimeBound::Constant(0, TimeUnit::Cycles)
            };
            
            let ret_cost = TimeBound::Constant(
                context.instruction_costs["ret"],
                TimeUnit::Cycles
            );
            
            Ok(add_wcet(expr_wcet, ret_cost))
        }
        
        Statement::Block(block) => analyze_block_wcet(block, context),
    }
}

// Analyze loop WCET
function analyze_loop_wcet(
    loop_id: NodeId,
    condition: &Expression,
    body: &Block,
    context: &mut WCETContext
) -> Result<TimeBound, String> {
    // Get loop bound
    let bound = match context.loop_bounds.get(&loop_id) {
        Some(bound) => bound,
        None => {
            // Try to infer loop bound
            match infer_loop_bound(condition, body, context) {
                Ok(bound) => {
                    context.loop_bounds.insert(loop_id, bound.clone());
                    &bound
                }
                Err(_) => return Err("Cannot determine loop bound")
            }
        }
    };
    
    // Analyze loop body
    let cond_wcet = analyze_expression_wcet(condition, context)?;
    let body_wcet = analyze_block_wcet(body, context)?;
    let update_wcet = TimeBound::Constant(1, TimeUnit::Cycles); // Increment
    
    // Calculate total iterations
    let iterations = (bound.max_iterations - bound.min_iterations) / bound.step + 1;
    
    // Total = iterations * (condition + body + update) + final condition check
    let iteration_wcet = add_wcet(add_wcet(cond_wcet.clone(), body_wcet), update_wcet);
    let total_wcet = multiply_wcet(iteration_wcet, iterations);
    
    Ok(add_wcet(total_wcet, cond_wcet))
}

// Analyze expression WCET
function analyze_expression_wcet(
    expr: &Expression,
    context: &mut WCETContext
) -> Result<TimeBound, String> {
    match expr {
        Expression::Literal(_) => Ok(TimeBound::Constant(1, TimeUnit::Cycles)),
        
        Expression::Variable(_) => Ok(TimeBound::Constant(
            context.instruction_costs["load"],
            TimeUnit::Cycles
        )),
        
        Expression::Binary(op, left, right) => {
            let left_wcet = analyze_expression_wcet(left, context)?;
            let right_wcet = analyze_expression_wcet(right, context)?;
            
            let op_cost = match op.as_str() {
                "+" | "-" => context.instruction_costs["add"],
                "*" => context.instruction_costs["mul"],
                "/" => context.instruction_costs["div"],
                "%" => context.instruction_costs["mod"],
                _ => 1,
            };
            
            Ok(add_wcet(
                add_wcet(left_wcet, right_wcet),
                TimeBound::Constant(op_cost, TimeUnit::Cycles)
            ))
        }
        
        Expression::Call(name, args) => {
            // Analyze argument evaluation
            let mut args_wcet = TimeBound::Constant(0, TimeUnit::Cycles);
            for arg in args {
                args_wcet = add_wcet(args_wcet, analyze_expression_wcet(arg, context)?);
            }
            
            // Get function WCET
            let func_wcet = match context.function_wcet.get(name) {
                Some(wcet) => wcet.clone(),
                None => return Err(format!("Unknown function WCET: {}", name))
            };
            
            Ok(add_wcet(args_wcet, func_wcet))
        }
        
        Expression::ArrayAccess(array, index) => {
            let array_wcet = analyze_expression_wcet(array, context)?;
            let index_wcet = analyze_expression_wcet(index, context)?;
            
            // Check if access is sequential (cache-friendly)
            let is_sequential = is_sequential_access(array, index, context);
            let load_cost = if is_sequential {
                context.instruction_costs["load"]
            } else {
                context.instruction_costs["load_miss"]
            };
            
            Ok(add_wcet(
                add_wcet(array_wcet, index_wcet),
                TimeBound::Constant(load_cost, TimeUnit::Cycles)
            ))
        }
        
        // ... other expression types
    }
}

// Loop bound inference
function infer_loop_bound(
    condition: &Expression,
    body: &Block,
    context: &WCETContext
) -> Result<LoopBound, String> {
    // Simple pattern matching for common loop patterns
    match condition {
        Expression::Binary(op, left, right) if op == "<" || op == "<=" => {
            // Pattern: i < N or i <= N
            if let (Expression::Variable(var), Expression::Literal(Literal::Number(n))) = (left, right) {
                // Check if var is incremented by constant in body
                if let Some(step) = find_loop_increment(var, body) {
                    return Ok(LoopBound{
                        min_iterations: 0,
                        max_iterations: *n as u64,
                        step: step as u64,
                    });
                }
            }
        }
        _ => {}
    }
    
    Err("Cannot infer loop bound")
}

// Helper to find loop increment
function find_loop_increment(var: &str, body: &Block) -> Option<i64> {
    for stmt in &body.statements {
        match stmt {
            Statement::Assign(
                Expression::Variable(v),
                Expression::Binary(op, Expression::Variable(v2), Expression::Literal(Literal::Number(n)))
            ) if v == var && v2 == var && op == "+" => {
                return Some(*n);
            }
            _ => {}
        }
    }
    None
}

// Check if array access is sequential
function is_sequential_access(
    array: &Expression,
    index: &Expression,
    context: &WCETContext
) -> bool {
    // Simple heuristic: check if index is loop variable
    match index {
        Expression::Variable(var) => {
            // Check recent memory accesses
            for access in context.memory_accesses.iter().rev().take(10) {
                if access.is_sequential {
                    return true;
                }
            }
        }
        _ => {}
    }
    false
}

// WCET arithmetic
function add_wcet(t1: TimeBound, t2: TimeBound) -> TimeBound {
    match (t1, t2) {
        (TimeBound::Constant(c1, u1), TimeBound::Constant(c2, u2)) => {
            let cycles1 = convert_to_cycles(c1, u1);
            let cycles2 = convert_to_cycles(c2, u2);
            TimeBound::Constant(cycles1 + cycles2, TimeUnit::Cycles)
        }
        (TimeBound::Linear(n), TimeBound::Constant(_, _)) |
        (TimeBound::Constant(_, _), TimeBound::Linear(n)) => TimeBound::Linear(n),
        (TimeBound::Linear(n1), TimeBound::Linear(n2)) if n1 == n2 => TimeBound::Linear(n1),
        _ => TimeBound::Unknown,
    }
}

function multiply_wcet(t: TimeBound, factor: u64) -> TimeBound {
    match t {
        TimeBound::Constant(c, u) => TimeBound::Constant(c * factor, u),
        TimeBound::Linear(n) => TimeBound::Quadratic(n),
        _ => TimeBound::Unknown,
    }
}

function max_wcet(t1: TimeBound, t2: TimeBound) -> TimeBound {
    match (t1, t2) {
        (TimeBound::Constant(c1, u1), TimeBound::Constant(c2, u2)) => {
            let cycles1 = convert_to_cycles(c1, u1);
            let cycles2 = convert_to_cycles(c2, u2);
            if cycles1 > cycles2 {
                TimeBound::Constant(c1, u1)
            } else {
                TimeBound::Constant(c2, u2)
            }
        }
        _ => TimeBound::Unknown,
    }
}

// Unit conversion
function convert_to_cycles(value: u64, unit: TimeUnit) -> u64 {
    match unit {
        TimeUnit::Cycles => value,
        TimeUnit::Nanoseconds => value * 3,      // Assuming 3GHz
        TimeUnit::Microseconds => value * 3000,
        TimeUnit::Milliseconds => value * 3000000,
        TimeUnit::Seconds => value * 3000000000,
    }
}

// Parse WCET annotation
function parse_wcet_annotation(annotation: &str) -> Result<TimeBound, String> {
    // Parse annotations like "100 cycles", "10ms", "O(n)", "O(n log n)"
    let parts: Vec<&str> = annotation.split_whitespace().collect();
    
    if parts.len() == 2 {
        // Constant time: "100 cycles"
        if let Ok(value) = parts[0].parse::<u64>() {
            let unit = match parts[1] {
                "cycles" => TimeUnit::Cycles,
                "ns" => TimeUnit::Nanoseconds,
                "µs" | "us" => TimeUnit::Microseconds,
                "ms" => TimeUnit::Milliseconds,
                "s" => TimeUnit::Seconds,
                _ => return Err("Unknown time unit")
            };
            return Ok(TimeBound::Constant(value, unit));
        }
    } else if annotation.starts_with("O(") {
        // Complexity notation
        let complexity = &annotation[2..annotation.len()-1];
        match complexity {
            "1" => Ok(TimeBound::Constant(1, TimeUnit::Cycles)),
            "n" => Ok(TimeBound::Linear("n".to_string())),
            "log n" => Ok(TimeBound::Logarithmic("n".to_string())),
            "n log n" => Ok(TimeBound::Unknown), // TODO: Add this variant
            "n²" | "n^2" => Ok(TimeBound::Quadratic("n".to_string())),
            _ => Err("Unknown complexity")
        }
    } else {
        Err("Invalid WCET annotation")
    }
}

// Verify WCET constraint
function verify_wcet_constraint(
    actual: &TimeBound,
    required: &TimeBound
) -> Result<(), String> {
    match (actual, required) {
        (TimeBound::Constant(a, u1), TimeBound::Constant(r, u2)) => {
            let actual_cycles = convert_to_cycles(*a, *u1);
            let required_cycles = convert_to_cycles(*r, *u2);
            if actual_cycles <= required_cycles {
                Ok(())
            } else {
                Err(format!(
                    "WCET constraint violated: {} cycles > {} cycles",
                    actual_cycles, required_cycles
                ))
            }
        }
        (TimeBound::Unknown, _) => Err("Cannot verify unknown WCET"),
        _ => Err("Complex WCET verification not yet implemented")
    }
}
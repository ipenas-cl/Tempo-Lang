// ╔═════╦═════╦═════╗
// ║ 🛡️  ║ ⚖️  ║ ⚡  ║
// ║  C  ║  E  ║  G  ║
// ╚═════╩═════╩═════╝
// ╔═════════════════╗
// ║ wcet [T∞] bound ║
// ╚═════════════════╝
//
// Author: Ignacio Peña Sepúlveda
// Date: June 25, 2025

// Advanced Redis command implementations
// Optimized for zero-allocation and deterministic performance

import "./data_structures.tempo"
import "std/time"
import "std/strings"
import "std/fmt"

// Extended command types
enum CommandType {
    // String commands
    Get(string),
    Set(string, string, Option<SetOptions>),
    GetSet(string, string),
    MGet(Vec<string>),
    MSet(Vec<(string, string)>),
    Incr(string),
    IncrBy(string, i64),
    Decr(string),
    DecrBy(string, i64),
    Append(string, string),
    GetRange(string, i32, i32),
    SetRange(string, u32, string),
    StrLen(string),
    
    // Key commands
    Del(Vec<string>),
    Exists(Vec<string>),
    Expire(string, u64),
    ExpireAt(string, i64),
    TTL(string),
    PTTL(string),
    Persist(string),
    Type(string),
    Keys(string),  // Pattern matching
    Scan(u64, Option<ScanOptions>),
    
    // List commands
    LPush(string, Vec<string>),
    RPush(string, Vec<string>),
    LPop(string, Option<u32>),
    RPop(string, Option<u32>),
    LLen(string),
    LRange(string, i32, i32),
    LTrim(string, i32, i32),
    LIndex(string, i32),
    LSet(string, i32, string),
    LRem(string, i32, string),
    
    // Hash commands
    HSet(string, Vec<(string, string)>),
    HGet(string, string),
    HGetAll(string),
    HDel(string, Vec<string>),
    HExists(string, string),
    HKeys(string),
    HVals(string),
    HLen(string),
    HIncrBy(string, string, i64),
    
    // Set commands
    SAdd(string, Vec<string>),
    SRem(string, Vec<string>),
    SMembers(string),
    SIsMember(string, string),
    SCard(string),
    SPop(string, Option<u32>),
    SRandMember(string, Option<i32>),
    SInter(Vec<string>),
    SUnion(Vec<string>),
    SDiff(Vec<string>),
    
    // Sorted set commands
    ZAdd(string, Vec<(f64, string)>, Option<ZAddOptions>),
    ZRem(string, Vec<string>),
    ZScore(string, string),
    ZRank(string, string),
    ZRevRank(string, string),
    ZRange(string, i32, i32, bool),  // with_scores
    ZRevRange(string, i32, i32, bool),
    ZRangeByScore(string, f64, f64, Option<ZRangeOptions>),
    ZCard(string),
    ZCount(string, f64, f64),
    ZIncrBy(string, f64, string),
    
    // HyperLogLog commands
    PFAdd(string, Vec<string>),
    PFCount(Vec<string>),
    PFMerge(string, Vec<string>),
    
    // Server commands
    Ping(Option<string>),
    Echo(string),
    Info(Option<string>),
    FlushDB,
    FlushAll,
    DBSize,
    Save,
    BGSave,
    LastSave,
    
    // Transaction commands
    Multi,
    Exec,
    Discard,
    Watch(Vec<string>),
    Unwatch,
    
    // Pub/Sub commands
    Subscribe(Vec<string>),
    Unsubscribe(Vec<string>),
    Publish(string, string),
    
    // Error
    Error(string),
}

struct SetOptions {
    nx: bool,  // Only set if not exists
    xx: bool,  // Only set if exists
    ex: Option<u64>,  // Expire in seconds
    px: Option<u64>,  // Expire in milliseconds
    keepttl: bool,  // Keep existing TTL
}

struct ScanOptions {
    match_pattern: Option<string>,
    count: Option<u32>,
    type_filter: Option<string>,
}

struct ZAddOptions {
    nx: bool,  // Only add new elements
    xx: bool,  // Only update existing elements
    ch: bool,  // Return changed count
    incr: bool,  // Increment score
}

struct ZRangeOptions {
    with_scores: bool,
    limit: Option<(u32, u32)>,  // offset, count
}

// Command executor with optimized implementations
impl Database {
    func execute_command(&mut self, cmd: CommandType) -> Response {
        match cmd {
            // String commands
            CommandType::Get(key) => {
                match self.get(&key) {
                    Some(value) => Response::BulkString(value),
                    None => Response::Null,
                }
            }
            
            CommandType::Set(key, value, options) => {
                if let Some(opts) = options {
                    // Handle NX/XX options
                    let exists = self.exists(&key)
                    if opts.nx && exists {
                        return Response::Null
                    }
                    if opts.xx && !exists {
                        return Response::Null
                    }
                    
                    // Handle expiration
                    let ttl = if opts.keepttl && exists {
                        self.get_ttl(&key)
                    } else if let Some(ex) = opts.ex {
                        Some(ex)
                    } else if let Some(px) = opts.px {
                        Some(px / 1000)
                    } else {
                        None
                    }
                    
                    self.set(key, value, ttl)
                } else {
                    self.set(key, value, None)
                }
                Response::SimpleString("OK")
            }
            
            CommandType::GetSet(key, value) => {
                let old_value = self.get(&key)
                self.set(key, value, None)
                match old_value {
                    Some(v) => Response::BulkString(v),
                    None => Response::Null,
                }
            }
            
            CommandType::MGet(keys) => {
                let mut values = Vec::with_capacity(keys.len())
                for key in keys {
                    values.push(match self.get(&key) {
                        Some(v) => Response::BulkString(v),
                        None => Response::Null,
                    })
                }
                Response::Array(values)
            }
            
            CommandType::MSet(pairs) => {
                for (key, value) in pairs {
                    self.set(key, value, None)
                }
                Response::SimpleString("OK")
            }
            
            CommandType::Incr(key) => {
                self.incr_by(&key, 1)
            }
            
            CommandType::IncrBy(key, delta) => {
                self.incr_by(&key, delta)
            }
            
            CommandType::Decr(key) => {
                self.incr_by(&key, -1)
            }
            
            CommandType::DecrBy(key, delta) => {
                self.incr_by(&key, -delta)
            }
            
            CommandType::Append(key, value) => {
                let new_len = self.append(&key, &value)
                Response::Integer(new_len as i64)
            }
            
            CommandType::GetRange(key, start, end) => {
                match self.get_range(&key, start, end) {
                    Some(value) => Response::BulkString(value),
                    None => Response::BulkString(""),
                }
            }
            
            CommandType::SetRange(key, offset, value) => {
                let new_len = self.set_range(&key, offset, &value)
                Response::Integer(new_len as i64)
            }
            
            CommandType::StrLen(key) => {
                let len = self.strlen(&key)
                Response::Integer(len as i64)
            }
            
            // Key commands
            CommandType::Del(keys) => {
                let mut deleted = 0
                for key in keys {
                    if self.del(&key) {
                        deleted += 1
                    }
                }
                Response::Integer(deleted)
            }
            
            CommandType::Exists(keys) => {
                let mut count = 0
                for key in keys {
                    if self.exists(&key) {
                        count += 1
                    }
                }
                Response::Integer(count)
            }
            
            CommandType::Expire(key, ttl) => {
                let result = self.expire(&key, ttl)
                Response::Integer(if result { 1 } else { 0 })
            }
            
            CommandType::ExpireAt(key, timestamp) => {
                let ttl = timestamp - time.now().unix()
                if ttl > 0 {
                    let result = self.expire(&key, ttl as u64)
                    Response::Integer(if result { 1 } else { 0 })
                } else {
                    self.del(&key)
                    Response::Integer(1)
                }
            }
            
            CommandType::TTL(key) => {
                Response::Integer(self.ttl(&key))
            }
            
            CommandType::PTTL(key) => {
                Response::Integer(self.ttl(&key) * 1000)
            }
            
            CommandType::Persist(key) => {
                let result = self.persist(&key)
                Response::Integer(if result { 1 } else { 0 })
            }
            
            CommandType::Type(key) => {
                Response::SimpleString(self.get_type(&key))
            }
            
            CommandType::Keys(pattern) => {
                let keys = self.keys(&pattern)
                let mut responses = Vec::with_capacity(keys.len())
                for key in keys {
                    responses.push(Response::BulkString(key))
                }
                Response::Array(responses)
            }
            
            CommandType::Scan(cursor, options) => {
                let (next_cursor, keys) = self.scan(cursor, options)
                Response::Array(vec![
                    Response::BulkString(next_cursor.to_string()),
                    Response::Array(keys.into_iter().map(|k| Response::BulkString(k)).collect()),
                ])
            }
            
            // List commands
            CommandType::LPush(key, values) => {
                let new_len = self.lpush(&key, values)
                Response::Integer(new_len as i64)
            }
            
            CommandType::RPush(key, values) => {
                let new_len = self.rpush(&key, values)
                Response::Integer(new_len as i64)
            }
            
            CommandType::LPop(key, count) => {
                match self.lpop(&key, count.unwrap_or(1)) {
                    Some(values) => {
                        if count.is_some() {
                            Response::Array(values.into_iter().map(|v| Response::BulkString(v)).collect())
                        } else {
                            Response::BulkString(values[0].clone())
                        }
                    }
                    None => Response::Null,
                }
            }
            
            CommandType::RPop(key, count) => {
                match self.rpop(&key, count.unwrap_or(1)) {
                    Some(values) => {
                        if count.is_some() {
                            Response::Array(values.into_iter().map(|v| Response::BulkString(v)).collect())
                        } else {
                            Response::BulkString(values[0].clone())
                        }
                    }
                    None => Response::Null,
                }
            }
            
            CommandType::LLen(key) => {
                Response::Integer(self.llen(&key) as i64)
            }
            
            CommandType::LRange(key, start, stop) => {
                let values = self.lrange(&key, start, stop)
                Response::Array(values.into_iter().map(|v| Response::BulkString(v)).collect())
            }
            
            // Hash commands
            CommandType::HSet(key, fields) => {
                let added = self.hset(&key, fields)
                Response::Integer(added as i64)
            }
            
            CommandType::HGet(key, field) => {
                match self.hget(&key, &field) {
                    Some(value) => Response::BulkString(value),
                    None => Response::Null,
                }
            }
            
            CommandType::HGetAll(key) => {
                let fields = self.hgetall(&key)
                let mut responses = Vec::with_capacity(fields.len() * 2)
                for (field, value) in fields {
                    responses.push(Response::BulkString(field))
                    responses.push(Response::BulkString(value))
                }
                Response::Array(responses)
            }
            
            // Set commands
            CommandType::SAdd(key, members) => {
                let added = self.sadd(&key, members)
                Response::Integer(added as i64)
            }
            
            CommandType::SMembers(key) => {
                let members = self.smembers(&key)
                Response::Array(members.into_iter().map(|m| Response::BulkString(m)).collect())
            }
            
            CommandType::SCard(key) => {
                Response::Integer(self.scard(&key) as i64)
            }
            
            // Sorted set commands
            CommandType::ZAdd(key, members, options) => {
                let result = self.zadd(&key, members, options)
                Response::Integer(result as i64)
            }
            
            CommandType::ZScore(key, member) => {
                match self.zscore(&key, &member) {
                    Some(score) => Response::BulkString(score.to_string()),
                    None => Response::Null,
                }
            }
            
            CommandType::ZRange(key, start, stop, with_scores) => {
                let members = self.zrange(&key, start, stop, with_scores)
                Response::Array(members.into_iter().map(|(m, s)| {
                    if with_scores {
                        Response::Array(vec![
                            Response::BulkString(m),
                            Response::BulkString(s.to_string()),
                        ])
                    } else {
                        Response::BulkString(m)
                    }
                }).collect())
            }
            
            // HyperLogLog commands
            CommandType::PFAdd(key, elements) => {
                let modified = self.pfadd(&key, elements)
                Response::Integer(if modified { 1 } else { 0 })
            }
            
            CommandType::PFCount(keys) => {
                let count = self.pfcount(keys)
                Response::Integer(count as i64)
            }
            
            // Server commands
            CommandType::Ping(message) => {
                match message {
                    Some(msg) => Response::BulkString(msg),
                    None => Response::SimpleString("PONG"),
                }
            }
            
            CommandType::Echo(message) => {
                Response::BulkString(message)
            }
            
            CommandType::Info(section) => {
                Response::BulkString(self.get_info(section))
            }
            
            CommandType::FlushDB => {
                self.flush()
                Response::SimpleString("OK")
            }
            
            CommandType::DBSize => {
                Response::Integer(self.dbsize() as i64)
            }
            
            // Error handling
            CommandType::Error(msg) => {
                Response::Error(msg)
            }
            
            _ => Response::Error("ERR unknown command")
        }
    }
    
    // Helper method implementations
    func incr_by(&mut self, key: &str, delta: i64) -> Response {
        match self.get(key) {
            Some(value) => {
                match value.parse::<i64>() {
                    Ok(current) => {
                        let new_value = current + delta
                        self.set(key.to_string(), new_value.to_string(), None)
                        Response::Integer(new_value)
                    }
                    Err(_) => Response::Error("ERR value is not an integer or out of range")
                }
            }
            None => {
                self.set(key.to_string(), delta.to_string(), None)
                Response::Integer(delta)
            }
        }
    }
    
    func append(&mut self, key: &str, value: &str) -> usize {
        match self.get(key) {
            Some(current) => {
                let new_value = current + value
                let len = new_value.len()
                self.set(key.to_string(), new_value, None)
                len
            }
            None => {
                self.set(key.to_string(), value.to_string(), None)
                value.len()
            }
        }
    }
    
    func get_range(&self, key: &str, start: i32, end: i32) -> Option<string> {
        self.get(key).map(|value| {
            let bytes = value.as_bytes()
            let len = bytes.len() as i32
            
            // Convert negative indices
            let start = if start < 0 { (len + start).max(0) } else { start.min(len) }
            let end = if end < 0 { (len + end + 1).max(0) } else { (end + 1).min(len) }
            
            if start >= end {
                "".to_string()
            } else {
                string::from_bytes(&bytes[start as usize..end as usize])
            }
        })
    }
    
    func set_range(&mut self, key: &str, offset: u32, value: &str) -> usize {
        let current = self.get(key).unwrap_or_default()
        let mut bytes = current.as_bytes().to_vec()
        
        // Extend if needed
        if offset as usize + value.len() > bytes.len() {
            bytes.resize(offset as usize + value.len(), 0)
        }
        
        // Copy new value
        bytes[offset as usize..offset as usize + value.len()].copy_from_slice(value.as_bytes())
        
        let new_value = string::from_bytes(&bytes)
        let len = new_value.len()
        self.set(key.to_string(), new_value, None)
        len
    }
    
    func strlen(&self, key: &str) -> usize {
        self.get(key).map(|v| v.len()).unwrap_or(0)
    }
    
    func exists(&self, key: &str) -> bool {
        self.get(key).is_some()
    }
    
    func persist(&mut self, key: &str) -> bool {
        // Remove expiration from key
        // Implementation depends on internal structure
        false  // TODO: Implement
    }
    
    func get_type(&self, key: &str) -> &'static str {
        // TODO: Implement type detection
        if self.exists(key) {
            "string"
        } else {
            "none"
        }
    }
    
    func keys(&self, pattern: &str) -> Vec<string> {
        // TODO: Implement pattern matching
        Vec::new()
    }
    
    func scan(&self, cursor: u64, options: Option<ScanOptions>) -> (u64, Vec<string>) {
        // TODO: Implement cursor-based iteration
        (0, Vec::new())
    }
    
    func dbsize(&self) -> usize {
        self.entry_count as usize
    }
    
    func get_info(&self, section: Option<string>) -> string {
        let mut info = String::new()
        
        if section.is_none() || section.as_ref().map(|s| s == "server").unwrap_or(false) {
            info.push_str("# Server\r\n")
            info.push_str("redis_version:7.0.0-killer\r\n")
            info.push_str("redis_mode:standalone\r\n")
            info.push_str("multiplexing_api:epoll\r\n")
            info.push_str("process_id:1\r\n")
            info.push_str("\r\n")
        }
        
        if section.is_none() || section.as_ref().map(|s| s == "memory").unwrap_or(false) {
            info.push_str("# Memory\r\n")
            info.push_str(&format!("used_memory:{}\r\n", self.memory_usage()))
            info.push_str(&format!("used_memory_human:{}\r\n", format_bytes(self.memory_usage())))
            info.push_str("mem_allocator:tempo-zero-alloc\r\n")
            info.push_str("\r\n")
        }
        
        if section.is_none() || section.as_ref().map(|s| s == "stats").unwrap_or(false) {
            info.push_str("# Stats\r\n")
            info.push_str(&format!("total_commands_processed:{}\r\n", 0))  // TODO: Track
            info.push_str(&format!("instantaneous_ops_per_sec:{}\r\n", 0))  // TODO: Track
            info.push_str(&format!("keyspace_hits:{}\r\n", self.hits))
            info.push_str(&format!("keyspace_misses:{}\r\n", self.misses))
            info.push_str("\r\n")
        }
        
        info
    }
}

// Response types
enum Response {
    SimpleString(string),
    Error(string),
    Integer(i64),
    BulkString(string),
    Array(Vec<Response>),
    Null,
}

impl Response {
    func serialize(&self) -> string {
        match self {
            Response::SimpleString(s) => format!("+{}\r\n", s),
            Response::Error(e) => format!("-{}\r\n", e),
            Response::Integer(i) => format!(":{}\r\n", i),
            Response::BulkString(s) => format!("${}\r\n{}\r\n", s.len(), s),
            Response::Array(items) => {
                let mut result = format!("*{}\r\n", items.len())
                for item in items {
                    result.push_str(&item.serialize())
                }
                result
            }
            Response::Null => "$-1\r\n".to_string(),
        }
    }
}

func format_bytes(bytes: u64) -> string {
    if bytes < 1024 {
        format!("{}B", bytes)
    } else if bytes < 1024 * 1024 {
        format!("{:.1}K", bytes as f64 / 1024.0)
    } else if bytes < 1024 * 1024 * 1024 {
        format!("{:.1}M", bytes as f64 / (1024.0 * 1024.0))
    } else {
        format!("{:.1}G", bytes as f64 / (1024.0 * 1024.0 * 1024.0))
    }
}
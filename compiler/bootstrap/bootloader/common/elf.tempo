// ╔═════╦═════╦═════╗
// ║ 🛡️  ║ ⚖️  ║ ⚡  ║
// ║  C  ║  E  ║  G  ║
// ╚═════╩═════╩═════╝
// ╔═════════════════╗
// ║ wcet [T∞] bound ║
// ╚═════════════════╝
//
// Author: Ignacio Peña Sepúlveda
// Date: June 25, 2025

// ELF loader module

// ELF file identification
const ELF_MAG0: u8 = 0x7F;
const ELF_MAG1: u8 = b'E';
const ELF_MAG2: u8 = b'L';
const ELF_MAG3: u8 = b'F';

// ELF class
const ELFCLASS32: u8 = 1;
const ELFCLASS64: u8 = 2;

// ELF data encoding
const ELFDATA2LSB: u8 = 1;  // Little endian
const ELFDATA2MSB: u8 = 2;  // Big endian

// ELF file types
const ET_NONE: u16 = 0;
const ET_REL: u16 = 1;
const ET_EXEC: u16 = 2;
const ET_DYN: u16 = 3;
const ET_CORE: u16 = 4;

// ELF machine types
const EM_X86_64: u16 = 62;

// Program header types
const PT_NULL: u32 = 0;
const PT_LOAD: u32 = 1;
const PT_DYNAMIC: u32 = 2;
const PT_INTERP: u32 = 3;
const PT_NOTE: u32 = 4;
const PT_SHLIB: u32 = 5;
const PT_PHDR: u32 = 6;

// Program header flags
const PF_X: u32 = 1;  // Execute
const PF_W: u32 = 2;  // Write
const PF_R: u32 = 4;  // Read

// ELF64 header
struct Elf64Header {
    e_ident: [16]u8,      // Magic number and other info
    e_type: u16,          // Object file type
    e_machine: u16,       // Architecture
    e_version: u32,       // Object file version
    e_entry: u64,         // Entry point virtual address
    e_phoff: u64,         // Program header table file offset
    e_shoff: u64,         // Section header table file offset
    e_flags: u32,         // Processor-specific flags
    e_ehsize: u16,        // ELF header size in bytes
    e_phentsize: u16,     // Program header table entry size
    e_phnum: u16,         // Program header table entry count
    e_shentsize: u16,     // Section header table entry size
    e_shnum: u16,         // Section header table entry count
    e_shstrndx: u16,      // Section header string table index
}

// ELF64 program header
struct Elf64ProgramHeader {
    p_type: u32,          // Segment type
    p_flags: u32,         // Segment flags
    p_offset: u64,        // Segment file offset
    p_vaddr: u64,         // Segment virtual address
    p_paddr: u64,         // Segment physical address
    p_filesz: u64,        // Segment size in file
    p_memsz: u64,         // Segment size in memory
    p_align: u64,         // Segment alignment
}

// Load ELF kernel
fn elf_load(kernel_data: *u8) -> u64 {
    let header = kernel_data as *Elf64Header;
    
    // Verify ELF magic
    if header.e_ident[0] != ELF_MAG0 || 
       header.e_ident[1] != ELF_MAG1 ||
       header.e_ident[2] != ELF_MAG2 ||
       header.e_ident[3] != ELF_MAG3 {
        vga_print("Invalid ELF magic\n");
        return 0;
    }
    
    // Verify 64-bit ELF
    if header.e_ident[4] != ELFCLASS64 {
        vga_print("Not a 64-bit ELF\n");
        return 0;
    }
    
    // Verify little endian
    if header.e_ident[5] != ELFDATA2LSB {
        vga_print("Not little endian ELF\n");
        return 0;
    }
    
    // Verify executable
    if header.e_type != ET_EXEC {
        vga_print("Not an executable ELF\n");
        return 0;
    }
    
    // Verify x86-64
    if header.e_machine != EM_X86_64 {
        vga_print("Not x86-64 ELF\n");
        return 0;
    }
    
    // Load program segments
    let phdr_base = kernel_data + header.e_phoff;
    
    for i in 0..header.e_phnum {
        let phdr = (phdr_base + i * header.e_phentsize) as *Elf64ProgramHeader;
        
        if phdr.p_type == PT_LOAD {
            vga_printf("Loading segment: vaddr=0x%x, filesz=%d, memsz=%d\n",
                      phdr.p_vaddr, phdr.p_filesz, phdr.p_memsz);
            
            // Copy segment to memory
            let src = kernel_data + phdr.p_offset;
            let dst = phdr.p_paddr as *u8;
            
            // Copy file data
            for j in 0..phdr.p_filesz {
                dst[j] = src[j];
            }
            
            // Zero BSS section
            for j in phdr.p_filesz..phdr.p_memsz {
                dst[j] = 0;
            }
        }
    }
    
    return header.e_entry;
}

// ELF32 structures for compatibility
struct Elf32Header {
    e_ident: [16]u8,
    e_type: u16,
    e_machine: u16,
    e_version: u32,
    e_entry: u32,
    e_phoff: u32,
    e_shoff: u32,
    e_flags: u32,
    e_ehsize: u16,
    e_phentsize: u16,
    e_phnum: u16,
    e_shentsize: u16,
    e_shnum: u16,
    e_shstrndx: u16,
}

struct Elf32ProgramHeader {
    p_type: u32,
    p_offset: u32,
    p_vaddr: u32,
    p_paddr: u32,
    p_filesz: u32,
    p_memsz: u32,
    p_flags: u32,
    p_align: u32,
}
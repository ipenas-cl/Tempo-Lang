// ╔═════╦═════╦═════╗
// ║ 🛡️  ║ ⚖️  ║ ⚡  ║
// ║  C  ║  E  ║  G  ║
// ╚═════╩═════╩═════╝
// ╔═════════════════╗
// ║ wcet [T∞] bound ║
// ╚═════════════════╝
//
// Author: Ignacio Peña Sepúlveda
// Date: June 25, 2025

// AtomicOS Stage 2 Bootloader
// This runs in 16-bit real mode and transitions to 64-bit long mode

import "multiboot.tempo"
import "memory.tempo"
import "vga.tempo"
import "elf.tempo"

// Assembly helpers for 16-bit operations
extern fn outb(port: u16, value: u8);
extern fn inb(port: u16) -> u8;
extern fn lgdt(gdtr: *GDTDescriptor);
extern fn lidt(idtr: *IDTDescriptor);
extern fn enable_paging(pml4: u64);
extern fn jump_to_kernel(entry: u64, multiboot_info: u64);

// Memory map entry from BIOS INT 0x15, EAX=0xE820
struct MemoryMapEntry {
    base: u64,
    length: u64,
    type: u32,
    acpi: u32,
}

// GDT entry structure
struct GDTEntry {
    limit_low: u16,
    base_low: u16,
    base_middle: u8,
    access: u8,
    granularity: u8,
    base_high: u8,
}

// GDT descriptor
struct GDTDescriptor {
    limit: u16,
    base: u64,
}

// Global variables
var gdt: [5]GDTEntry;
var gdtr: GDTDescriptor;
var memory_map: [128]MemoryMapEntry;
var memory_map_count: u32 = 0;
var total_memory: u64 = 0;

// Stage 2 entry point
@[org(0x8000)]
@[no_mangle]
fn stage2_main() {
    // Initialize VGA for output
    vga_init();
    vga_print("AtomicOS Stage 2 Bootloader\n");
    
    // Detect memory
    detect_memory();
    vga_print("Memory detection complete\n");
    vga_printf("Total memory: %d MB\n", total_memory / (1024 * 1024));
    
    // Set up GDT for long mode
    setup_gdt();
    vga_print("GDT configured\n");
    
    // Set up paging for long mode
    let pml4_addr = setup_paging();
    vga_print("Page tables configured\n");
    
    // Load kernel ELF
    let kernel_entry = load_kernel();
    if kernel_entry == 0 {
        vga_print("Failed to load kernel!\n");
        halt();
    }
    vga_printf("Kernel loaded at 0x%x\n", kernel_entry);
    
    // Prepare multiboot information
    let mb_info = prepare_multiboot_info();
    
    // Enable long mode
    enable_long_mode(pml4_addr);
    
    // Jump to kernel
    jump_to_kernel(kernel_entry, mb_info as u64);
}

// Detect available memory using BIOS INT 0x15, EAX=0xE820
fn detect_memory() {
    asm {
        "xor ebx, ebx"
        "xor bp, bp"
        "mov edi, offset memory_map"
        "mov edx, 0x534D4150"  // 'SMAP'
        
    ".next_entry:"
        "mov eax, 0xE820"
        "mov ecx, 24"
        "int 0x15"
        "jc .done"
        "cmp eax, 0x534D4150"
        "jne .done"
        "test ebx, ebx"
        "je .done"
        "add edi, 24"
        "inc bp"
        "cmp bp, 128"
        "jae .done"
        "jmp .next_entry"
        
    ".done:"
        "mov [memory_map_count], bp"
    }
    
    // Calculate total usable memory
    for i in 0..memory_map_count {
        if memory_map[i].type == 1 {  // Usable memory
            total_memory += memory_map[i].length;
        }
    }
}

// Set up GDT for long mode
fn setup_gdt() {
    // Null descriptor
    gdt[0] = GDTEntry { 
        limit_low: 0, base_low: 0, base_middle: 0, 
        access: 0, granularity: 0, base_high: 0 
    };
    
    // 64-bit code segment
    gdt[1] = GDTEntry {
        limit_low: 0xFFFF,
        base_low: 0,
        base_middle: 0,
        access: 0x9A,      // Present, code, executable, readable
        granularity: 0xAF, // 64-bit, 4KB granularity
        base_high: 0
    };
    
    // 64-bit data segment
    gdt[2] = GDTEntry {
        limit_low: 0xFFFF,
        base_low: 0,
        base_middle: 0,
        access: 0x92,      // Present, data, writable
        granularity: 0xCF, // 4KB granularity
        base_high: 0
    };
    
    // 32-bit code segment (for compatibility)
    gdt[3] = GDTEntry {
        limit_low: 0xFFFF,
        base_low: 0,
        base_middle: 0,
        access: 0x9A,
        granularity: 0xCF,
        base_high: 0
    };
    
    // 32-bit data segment (for compatibility)
    gdt[4] = GDTEntry {
        limit_low: 0xFFFF,
        base_low: 0,
        base_middle: 0,
        access: 0x92,
        granularity: 0xCF,
        base_high: 0
    };
    
    gdtr.limit = sizeof(gdt) - 1;
    gdtr.base = &gdt as u64;
    lgdt(&gdtr);
}

// Set up page tables for long mode
fn setup_paging() -> u64 {
    // Allocate page tables at 1MB mark
    let pml4 = 0x100000 as *u64;
    let pdpt = 0x101000 as *u64;
    let pd = 0x102000 as *u64;
    let pt = 0x103000 as *u64;
    
    // Clear page tables
    for i in 0..512 {
        pml4[i] = 0;
        pdpt[i] = 0;
        pd[i] = 0;
        pt[i] = 0;
    }
    
    // Set up PML4
    pml4[0] = (pdpt as u64) | 0x03;  // Present, writable
    
    // Set up PDPT
    pdpt[0] = (pd as u64) | 0x03;
    
    // Set up PD
    pd[0] = (pt as u64) | 0x03;
    
    // Identity map first 2MB using 4KB pages
    for i in 0..512 {
        pt[i] = (i * 0x1000) | 0x03;  // Present, writable
    }
    
    // Also map higher half for kernel
    pml4[256] = (pdpt as u64) | 0x03;  // Map at 0xFFFF800000000000
    
    return pml4 as u64;
}

// Enable long mode
fn enable_long_mode(pml4: u64) {
    asm {
        // Disable interrupts
        "cli"
        
        // Enable PAE
        "mov eax, cr4"
        "or eax, 0x20"
        "mov cr4, eax"
        
        // Load PML4
        "mov eax, %[pml4]"
        "mov cr3, eax"
        
        // Enable long mode in EFER
        "mov ecx, 0xC0000080"
        "rdmsr"
        "or eax, 0x100"
        "wrmsr"
        
        // Enable paging
        "mov eax, cr0"
        "or eax, 0x80000001"
        "mov cr0, eax"
        
        : : [pml4] "r" (pml4)
    }
}

// Load kernel from disk
fn load_kernel() -> u64 {
    // Kernel is loaded at 2MB mark
    let kernel_addr = 0x200000;
    
    // Read kernel from disk (sectors 65+)
    // Using BIOS INT 0x13 extended read
    asm {
        "mov si, offset kernel_dap"
        "mov ah, 0x42"
        "mov dl, [boot_drive]"
        "int 0x13"
        "jc .kernel_load_error"
        "jmp .kernel_load_ok"
        
    ".kernel_load_error:"
        "xor eax, eax"
        "jmp .kernel_load_done"
        
    ".kernel_load_ok:"
        "mov eax, 0x200000"
        
    ".kernel_load_done:"
    }
    
    // Parse ELF header and return entry point
    return elf_load(kernel_addr as *u8);
}

// Prepare multiboot information structure
fn prepare_multiboot_info() -> *MultibootInfo {
    let mb_info = 0x7000 as *MultibootInfo;
    
    mb_info.flags = MULTIBOOT_INFO_MEMORY | MULTIBOOT_INFO_MMAP;
    mb_info.mem_lower = 640;  // Conventional memory in KB
    mb_info.mem_upper = (total_memory / 1024) - 1024;  // Extended memory in KB
    
    // Set up memory map
    mb_info.mmap_length = memory_map_count * 24;
    mb_info.mmap_addr = &memory_map as u32;
    
    return mb_info;
}

// Halt the system
fn halt() {
    loop {
        asm { "hlt" }
    }
}

// Data section
@[section(".data")]
const kernel_dap: [16]u8 = [
    0x10,           // Size of DAP
    0x00,           // Reserved
    0x00, 0x04,     // Number of sectors (1024 = 512KB)
    0x00, 0x00,     // Offset (0x200000 & 0xFFFF)
    0x00, 0x20,     // Segment (0x200000 >> 4)
    0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00  // LBA 65
];

@[section(".data")]
var boot_drive: u8 = 0x80;  // Default to first hard drive
// ╔═════╦═════╦═════╗
// ║ 🛡️  ║ ⚖️  ║ ⚡  ║
// ║  C  ║  E  ║  G  ║
// ╚═════╩═════╩═════╝
// ╔═════════════════╗
// ║ wcet [T∞] bound ║
// ╚═════════════════╝
//
// Author: Ignacio Peña Sepúlveda
// Date: June 25, 2025

// std/bytes.tempo - Buffer and byte manipulation
// Provides efficient byte buffer operations with bounded execution time

module std::bytes

// Buffer type for dynamic byte arrays
struct Buffer {
    data: Vec<u8>
    read_pos: usize
    write_pos: usize
}

// Reader interface
trait Reader {
    fn read(&mut self, buf: &mut [u8]) -> Result<usize>
}

// Writer interface
trait Writer {
    fn write(&mut self, data: &[u8]) -> Result<usize>
}

// Error types
enum BytesError {
    BufferFull
    BufferEmpty
    InvalidPosition
    InvalidLength
    EndOfBuffer
}

type Result<T> = union { Ok(T), Err(BytesError) }

// Constants
const DEFAULT_BUFFER_SIZE: usize = 4096
const MAX_BUFFER_SIZE: usize = 1 << 30  // 1GB max

// Basic byte operations
fn compare(a: &[u8], b: &[u8]) -> i32 {
    let min_len = if a.len() < b.len() { a.len() } else { b.len() }
    
    for i in 0..min_len {
        if a[i] < b[i] {
            return -1
        } else if a[i] > b[i] {
            return 1
        }
    }
    
    if a.len() < b.len() {
        return -1
    } else if a.len() > b.len() {
        return 1
    } else {
        return 0
    }
}

fn equal(a: &[u8], b: &[u8]) -> bool {
    if a.len() != b.len() {
        return false
    }
    
    for i in 0..a.len() {
        if a[i] != b[i] {
            return false
        }
    }
    
    return true
}

fn copy(dst: &mut [u8], src: &[u8]) -> usize {
    let n = if dst.len() < src.len() { dst.len() } else { src.len() }
    
    for i in 0..n {
        dst[i] = src[i]
    }
    
    return n
}

fn fill(buf: &mut [u8], value: u8) {
    for i in 0..buf.len() {
        buf[i] = value
    }
}

fn index_of(haystack: &[u8], needle: &[u8]) -> i32 {
    if needle.len() == 0 {
        return 0
    }
    
    if needle.len() > haystack.len() {
        return -1
    }
    
    let limit = haystack.len() - needle.len() + 1
    
    for i in 0..limit {
        let mut match = true
        for j in 0..needle.len() {
            if haystack[i + j] != needle[j] {
                match = false
                break
            }
        }
        if match {
            return i as i32
        }
    }
    
    return -1
}

fn last_index_of(haystack: &[u8], needle: &[u8]) -> i32 {
    if needle.len() == 0 {
        return haystack.len() as i32
    }
    
    if needle.len() > haystack.len() {
        return -1
    }
    
    let limit = haystack.len() - needle.len() + 1
    
    for i in (0..limit).rev() {
        let mut match = true
        for j in 0..needle.len() {
            if haystack[i + j] != needle[j] {
                match = false
                break
            }
        }
        if match {
            return i as i32
        }
    }
    
    return -1
}

fn contains(haystack: &[u8], needle: &[u8]) -> bool {
    return index_of(haystack, needle) >= 0
}

fn starts_with(data: &[u8], prefix: &[u8]) -> bool {
    if prefix.len() > data.len() {
        return false
    }
    
    for i in 0..prefix.len() {
        if data[i] != prefix[i] {
            return false
        }
    }
    
    return true
}

fn ends_with(data: &[u8], suffix: &[u8]) -> bool {
    if suffix.len() > data.len() {
        return false
    }
    
    let offset = data.len() - suffix.len()
    
    for i in 0..suffix.len() {
        if data[offset + i] != suffix[i] {
            return false
        }
    }
    
    return true
}

fn count(haystack: &[u8], needle: &[u8]) -> usize {
    if needle.len() == 0 {
        return 0
    }
    
    let mut count = 0
    let mut pos = 0
    
    while pos <= haystack.len() - needle.len() {
        let mut match = true
        for j in 0..needle.len() {
            if haystack[pos + j] != needle[j] {
                match = false
                break
            }
        }
        if match {
            count += 1
            pos += needle.len()
        } else {
            pos += 1
        }
    }
    
    return count
}

// Split operations
fn split(data: &[u8], delimiter: &[u8]) -> Vec<Vec<u8>> {
    let mut result: Vec<Vec<u8>> = vec![]
    
    if delimiter.len() == 0 {
        result.push(data.to_vec())
        return result
    }
    
    let mut start = 0
    let mut pos = 0
    
    while pos <= data.len() - delimiter.len() {
        let mut match = true
        for j in 0..delimiter.len() {
            if data[pos + j] != delimiter[j] {
                match = false
                break
            }
        }
        
        if match {
            result.push(data[start..pos].to_vec())
            pos += delimiter.len()
            start = pos
        } else {
            pos += 1
        }
    }
    
    // Add remaining part
    result.push(data[start..].to_vec())
    
    return result
}

fn join(parts: &[Vec<u8>], separator: &[u8]) -> Vec<u8> {
    if parts.len() == 0 {
        return vec![]
    }
    
    // Calculate total size
    let mut total_size = 0
    for i in 0..parts.len() {
        total_size += parts[i].len()
        if i < parts.len() - 1 {
            total_size += separator.len()
        }
    }
    
    let mut result: Vec<u8> = vec![]
    result.reserve(total_size)
    
    for i in 0..parts.len() {
        for j in 0..parts[i].len() {
            result.push(parts[i][j])
        }
        if i < parts.len() - 1 {
            for j in 0..separator.len() {
                result.push(separator[j])
            }
        }
    }
    
    return result
}

// Replace operations
fn replace(data: &[u8], old: &[u8], new: &[u8]) -> Vec<u8> {
    return replace_n(data, old, new, -1)
}

fn replace_n(data: &[u8], old: &[u8], new: &[u8], n: i32) -> Vec<u8> {
    if old.len() == 0 || n == 0 {
        return data.to_vec()
    }
    
    let mut result: Vec<u8> = vec![]
    let mut pos = 0
    let mut count = 0
    
    while pos < data.len() {
        if pos <= data.len() - old.len() && (n < 0 || count < n) {
            let mut match = true
            for j in 0..old.len() {
                if data[pos + j] != old[j] {
                    match = false
                    break
                }
            }
            
            if match {
                for j in 0..new.len() {
                    result.push(new[j])
                }
                pos += old.len()
                count += 1
                continue
            }
        }
        
        result.push(data[pos])
        pos += 1
    }
    
    return result
}

// Trim operations
fn trim_left(data: &[u8], cutset: &[u8]) -> &[u8] {
    let mut start = 0
    
    while start < data.len() {
        let mut found = false
        for i in 0..cutset.len() {
            if data[start] == cutset[i] {
                found = true
                break
            }
        }
        if !found {
            break
        }
        start += 1
    }
    
    return &data[start..]
}

fn trim_right(data: &[u8], cutset: &[u8]) -> &[u8] {
    let mut end = data.len()
    
    while end > 0 {
        let mut found = false
        for i in 0..cutset.len() {
            if data[end - 1] == cutset[i] {
                found = true
                break
            }
        }
        if !found {
            break
        }
        end -= 1
    }
    
    return &data[..end]
}

fn trim(data: &[u8], cutset: &[u8]) -> &[u8] {
    return trim_right(trim_left(data, cutset), cutset)
}

fn trim_space(data: &[u8]) -> &[u8] {
    let whitespace = [' ' as u8, '\t' as u8, '\n' as u8, '\r' as u8]
    return trim(data, &whitespace)
}

// Buffer operations
fn buffer_new() -> Buffer {
    return Buffer {
        data: vec![],
        read_pos: 0,
        write_pos: 0
    }
}

fn buffer_with_capacity(cap: usize) -> Buffer {
    let mut buf = Buffer {
        data: vec![],
        read_pos: 0,
        write_pos: 0
    }
    buf.data.reserve(cap)
    return buf
}

fn buffer_from_bytes(data: &[u8]) -> Buffer {
    let mut buf = buffer_new()
    for i in 0..data.len() {
        buf.data.push(data[i])
    }
    buf.write_pos = data.len()
    return buf
}

fn buffer_len(buf: &Buffer) -> usize {
    return buf.write_pos - buf.read_pos
}

fn buffer_capacity(buf: &Buffer) -> usize {
    return buf.data.capacity()
}

fn buffer_available(buf: &Buffer) -> usize {
    return buf.data.capacity() - buf.write_pos
}

fn buffer_bytes(buf: &Buffer) -> &[u8] {
    return &buf.data[buf.read_pos..buf.write_pos]
}

fn buffer_reset(buf: &mut Buffer) {
    buf.read_pos = 0
    buf.write_pos = 0
}

fn buffer_clear(buf: &mut Buffer) {
    buf.data.clear()
    buf.read_pos = 0
    buf.write_pos = 0
}

// Buffer read operations
fn buffer_read(buf: &mut Buffer, dst: &mut [u8]) -> Result<usize> {
    let available = buf.write_pos - buf.read_pos
    if available == 0 {
        return Ok(0)
    }
    
    let n = if dst.len() < available { dst.len() } else { available }
    
    for i in 0..n {
        dst[i] = buf.data[buf.read_pos + i]
    }
    
    buf.read_pos += n
    
    // Compact buffer if read position is far ahead
    if buf.read_pos > buf.data.len() / 2 && buf.read_pos > 1024 {
        buffer_compact(buf)
    }
    
    return Ok(n)
}

fn buffer_read_byte(buf: &mut Buffer) -> Result<u8> {
    if buf.read_pos >= buf.write_pos {
        return Err(BytesError::BufferEmpty)
    }
    
    let b = buf.data[buf.read_pos]
    buf.read_pos += 1
    return Ok(b)
}

fn buffer_peek(buf: &Buffer, n: usize) -> Result<&[u8]> {
    let available = buf.write_pos - buf.read_pos
    if n > available {
        return Err(BytesError::InvalidLength)
    }
    
    return Ok(&buf.data[buf.read_pos..buf.read_pos + n])
}

fn buffer_skip(buf: &mut Buffer, n: usize) -> Result<()> {
    let available = buf.write_pos - buf.read_pos
    if n > available {
        return Err(BytesError::InvalidLength)
    }
    
    buf.read_pos += n
    return Ok(())
}

// Buffer write operations
fn buffer_write(buf: &mut Buffer, data: &[u8]) -> Result<usize> {
    // Ensure capacity
    let required = buf.write_pos + data.len()
    if required > buf.data.capacity() {
        let new_cap = grow_capacity(required)
        if new_cap > MAX_BUFFER_SIZE {
            return Err(BytesError::BufferFull)
        }
        buf.data.reserve(new_cap - buf.data.capacity())
    }
    
    // Make sure we have enough actual space
    while buf.data.len() < required {
        buf.data.push(0)
    }
    
    // Copy data
    for i in 0..data.len() {
        buf.data[buf.write_pos + i] = data[i]
    }
    
    buf.write_pos += data.len()
    return Ok(data.len())
}

fn buffer_write_byte(buf: &mut Buffer, b: u8) -> Result<()> {
    let data = [b]
    buffer_write(buf, &data)?
    return Ok(())
}

fn buffer_write_string(buf: &mut Buffer, s: string) -> Result<usize> {
    let bytes = strings::to_bytes(s)
    return buffer_write(buf, bytes)
}

// Buffer utility operations
fn buffer_compact(buf: &mut Buffer) {
    if buf.read_pos == 0 {
        return
    }
    
    let remaining = buf.write_pos - buf.read_pos
    for i in 0..remaining {
        buf.data[i] = buf.data[buf.read_pos + i]
    }
    
    buf.write_pos = remaining
    buf.read_pos = 0
}

fn buffer_grow(buf: &mut Buffer, n: usize) -> Result<()> {
    let required = buf.data.capacity() + n
    if required > MAX_BUFFER_SIZE {
        return Err(BytesError::BufferFull)
    }
    
    buf.data.reserve(n)
    return Ok(())
}

// Helper to calculate buffer growth
fn grow_capacity(required: usize) -> usize {
    let mut new_cap = if required < DEFAULT_BUFFER_SIZE {
        DEFAULT_BUFFER_SIZE
    } else {
        required
    }
    
    // Grow by 50% extra
    new_cap = new_cap + new_cap / 2
    
    // Round up to nearest power of 2 for better allocation
    let mut power = 1
    while power < new_cap {
        power *= 2
    }
    
    return power
}

// Encoding/decoding operations
fn encode_hex(data: &[u8]) -> string {
    let hex_chars = "0123456789abcdef"
    let mut result = strings::builder_with_capacity(data.len() * 2)
    
    for i in 0..data.len() {
        let b = data[i]
        strings::builder_write_char(&mut result, hex_chars[(b >> 4) as usize])
        strings::builder_write_char(&mut result, hex_chars[(b & 0x0F) as usize])
    }
    
    return strings::builder_to_string(&result)
}

fn decode_hex(s: string) -> Result<Vec<u8>> {
    let bytes = strings::to_bytes(s)
    
    if bytes.len() % 2 != 0 {
        return Err(BytesError::InvalidLength)
    }
    
    let mut result: Vec<u8> = vec![]
    result.reserve(bytes.len() / 2)
    
    for i in (0..bytes.len()).step_by(2) {
        let high = hex_digit_value(bytes[i])?
        let low = hex_digit_value(bytes[i + 1])?
        result.push((high << 4) | low)
    }
    
    return Ok(result)
}

fn hex_digit_value(b: u8) -> Result<u8> {
    if b >= '0' as u8 && b <= '9' as u8 {
        return Ok(b - '0' as u8)
    } else if b >= 'a' as u8 && b <= 'f' as u8 {
        return Ok(b - 'a' as u8 + 10)
    } else if b >= 'A' as u8 && b <= 'F' as u8 {
        return Ok(b - 'A' as u8 + 10)
    } else {
        return Err(BytesError::InvalidLength)
    }
}

// Base64 encoding/decoding
const BASE64_CHARS: &str = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"

fn encode_base64(data: &[u8]) -> string {
    let mut result = strings::builder_new()
    let mut i = 0
    
    // Process groups of 3 bytes
    while i + 2 < data.len() {
        let b1 = data[i]
        let b2 = data[i + 1]
        let b3 = data[i + 2]
        
        let n = (b1 as u32 << 16) | (b2 as u32 << 8) | b3 as u32
        
        strings::builder_write_char(&mut result, BASE64_CHARS[(n >> 18) & 0x3F])
        strings::builder_write_char(&mut result, BASE64_CHARS[(n >> 12) & 0x3F])
        strings::builder_write_char(&mut result, BASE64_CHARS[(n >> 6) & 0x3F])
        strings::builder_write_char(&mut result, BASE64_CHARS[n & 0x3F])
        
        i += 3
    }
    
    // Handle remaining bytes
    if i + 1 == data.len() {
        let b1 = data[i]
        let n = (b1 as u32) << 16
        
        strings::builder_write_char(&mut result, BASE64_CHARS[(n >> 18) & 0x3F])
        strings::builder_write_char(&mut result, BASE64_CHARS[(n >> 12) & 0x3F])
        strings::builder_write_string(&mut result, "==")
    } else if i + 2 == data.len() {
        let b1 = data[i]
        let b2 = data[i + 1]
        let n = (b1 as u32 << 16) | (b2 as u32 << 8)
        
        strings::builder_write_char(&mut result, BASE64_CHARS[(n >> 18) & 0x3F])
        strings::builder_write_char(&mut result, BASE64_CHARS[(n >> 12) & 0x3F])
        strings::builder_write_char(&mut result, BASE64_CHARS[(n >> 6) & 0x3F])
        strings::builder_write_char(&mut result, '=')
    }
    
    return strings::builder_to_string(&result)
}

fn decode_base64(s: string) -> Result<Vec<u8>> {
    let bytes = strings::to_bytes(s)
    
    if bytes.len() % 4 != 0 {
        return Err(BytesError::InvalidLength)
    }
    
    let mut result: Vec<u8> = vec![]
    let mut i = 0
    
    while i < bytes.len() {
        let c1 = base64_char_value(bytes[i])?
        let c2 = base64_char_value(bytes[i + 1])?
        
        if bytes[i + 2] == '=' as u8 && bytes[i + 3] == '=' as u8 {
            // One byte
            result.push((c1 << 2) | (c2 >> 4))
            break
        }
        
        let c3 = base64_char_value(bytes[i + 2])?
        
        if bytes[i + 3] == '=' as u8 {
            // Two bytes
            result.push((c1 << 2) | (c2 >> 4))
            result.push((c2 << 4) | (c3 >> 2))
            break
        }
        
        let c4 = base64_char_value(bytes[i + 3])?
        
        // Three bytes
        result.push((c1 << 2) | (c2 >> 4))
        result.push((c2 << 4) | (c3 >> 2))
        result.push((c3 << 6) | c4)
        
        i += 4
    }
    
    return Ok(result)
}

fn base64_char_value(b: u8) -> Result<u8> {
    if b >= 'A' as u8 && b <= 'Z' as u8 {
        return Ok(b - 'A' as u8)
    } else if b >= 'a' as u8 && b <= 'z' as u8 {
        return Ok(b - 'a' as u8 + 26)
    } else if b >= '0' as u8 && b <= '9' as u8 {
        return Ok(b - '0' as u8 + 52)
    } else if b == '+' as u8 {
        return Ok(62)
    } else if b == '/' as u8 {
        return Ok(63)
    } else {
        return Err(BytesError::InvalidLength)
    }
}

// Implement Reader trait for Buffer
impl Reader for Buffer {
    fn read(&mut self, buf: &mut [u8]) -> Result<usize> {
        return buffer_read(self, buf)
    }
}

// Implement Writer trait for Buffer
impl Writer for Buffer {
    fn write(&mut self, data: &[u8]) -> Result<usize> {
        return buffer_write(self, data)
    }
}
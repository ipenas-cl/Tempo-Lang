// ╔═════╦═════╦═════╗
// ║ 🛡️  ║ ⚖️  ║ ⚡  ║
// ║  C  ║  E  ║  G  ║
// ╚═════╩═════╩═════╝
// ╔═════════════════╗
// ║ wcet [T∞] bound ║
// ╚═════════════════╝
//
// Author: Ignacio Peña Sepúlveda
// Date: June 25, 2025

// std/net.tempo - Deterministic networking with guaranteed timeouts
// Provides networking operations with bounded execution time

module std::net

// Network address types
struct IpAddr {
    bytes: [u8; 4]  // IPv4 for now
}

struct SocketAddr {
    ip: IpAddr
    port: u16
}

// Socket options
struct SocketOpts {
    recv_timeout_ms: u32
    send_timeout_ms: u32
    nodelay: bool
    reuse_addr: bool
    recv_buffer_size: u32
    send_buffer_size: u32
}

// Connection state
enum ConnState {
    Connecting
    Connected
    Closing
    Closed
    Error
}

// Socket types
struct TcpSocket {
    fd: i32
    local_addr: SocketAddr
    remote_addr: SocketAddr
    state: ConnState
    opts: SocketOpts
}

struct UdpSocket {
    fd: i32
    local_addr: SocketAddr
    opts: SocketOpts
}

// Error types
enum NetError {
    ConnectionRefused
    ConnectionReset
    ConnectionAborted
    NotConnected
    AddrInUse
    AddrNotAvailable
    NetworkDown
    NetworkUnreachable
    HostUnreachable
    TimedOut
    PermissionDenied
    Interrupted
    WouldBlock
    InvalidAddr
    InvalidPort
    BufferFull
    Unknown(i32)
}

type Result<T> = union { Ok(T), Err(NetError) }

// IP address functions
fn ip_from_bytes(a: u8, b: u8, c: u8, d: u8) -> IpAddr {
    return IpAddr { bytes: [a, b, c, d] }
}

fn ip_from_str(s: string) -> Result<IpAddr> {
    // Parse "a.b.c.d" format
    let parts = s.split(".")
    if parts.len() != 4 {
        return Err(NetError::InvalidAddr)
    }
    
    let bytes: [u8; 4]
    for i in 0..4 {
        match parts[i].parse_u8() {
            Ok(b) => bytes[i] = b
            Err(_) => return Err(NetError::InvalidAddr)
        }
    }
    
    return Ok(IpAddr { bytes: bytes })
}

fn ip_to_str(ip: IpAddr) -> string {
    return fmt::sprintf("%d.%d.%d.%d", 
        ip.bytes[0], ip.bytes[1], ip.bytes[2], ip.bytes[3])
}

// Socket address functions
fn sockaddr_new(ip: IpAddr, port: u16) -> SocketAddr {
    return SocketAddr { ip: ip, port: port }
}

fn sockaddr_from_str(s: string) -> Result<SocketAddr> {
    // Parse "ip:port" format
    let parts = s.split(":")
    if parts.len() != 2 {
        return Err(NetError::InvalidAddr)
    }
    
    let ip = match ip_from_str(parts[0]) {
        Ok(ip) => ip
        Err(e) => return Err(e)
    }
    
    let port = match parts[1].parse_u16() {
        Ok(p) => p
        Err(_) => return Err(NetError::InvalidPort)
    }
    
    return Ok(SocketAddr { ip: ip, port: port })
}

fn sockaddr_to_str(addr: SocketAddr) -> string {
    return fmt::sprintf("%s:%d", ip_to_str(addr.ip), addr.port)
}

// Default socket options
fn default_opts() -> SocketOpts {
    return SocketOpts {
        recv_timeout_ms: 30000,  // 30 seconds
        send_timeout_ms: 30000,  // 30 seconds
        nodelay: true,
        reuse_addr: false,
        recv_buffer_size: 65536,
        send_buffer_size: 65536
    }
}

// TCP operations
fn tcp_connect(addr: SocketAddr) -> Result<TcpSocket> {
    return tcp_connect_with_opts(addr, default_opts())
}

fn tcp_connect_with_opts(addr: SocketAddr, opts: SocketOpts) -> Result<TcpSocket> {
    // Create socket
    let fd = @syscall("socket", AF_INET, SOCK_STREAM, 0)
    if fd < 0 {
        return Err(errno_to_neterror(fd))
    }
    
    // Set options
    if opts.nodelay {
        @syscall("setsockopt", fd, IPPROTO_TCP, TCP_NODELAY, 1)
    }
    if opts.reuse_addr {
        @syscall("setsockopt", fd, SOL_SOCKET, SO_REUSEADDR, 1)
    }
    
    // Set timeouts
    @syscall("setsockopt", fd, SOL_SOCKET, SO_RCVTIMEO, opts.recv_timeout_ms)
    @syscall("setsockopt", fd, SOL_SOCKET, SO_SNDTIMEO, opts.send_timeout_ms)
    
    // Set buffer sizes
    @syscall("setsockopt", fd, SOL_SOCKET, SO_RCVBUF, opts.recv_buffer_size)
    @syscall("setsockopt", fd, SOL_SOCKET, SO_SNDBUF, opts.send_buffer_size)
    
    // Connect with timeout
    let err = @syscall("connect_timeout", fd, addr, opts.send_timeout_ms)
    if err < 0 {
        @syscall("close", fd)
        return Err(errno_to_neterror(err))
    }
    
    // Get local address
    let local_addr = @syscall("getsockname", fd)
    
    return Ok(TcpSocket {
        fd: fd,
        local_addr: local_addr,
        remote_addr: addr,
        state: ConnState::Connected,
        opts: opts
    })
}

fn tcp_listen(addr: SocketAddr) -> Result<TcpSocket> {
    return tcp_listen_with_opts(addr, default_opts())
}

fn tcp_listen_with_opts(addr: SocketAddr, opts: SocketOpts) -> Result<TcpSocket> {
    // Create socket
    let fd = @syscall("socket", AF_INET, SOCK_STREAM, 0)
    if fd < 0 {
        return Err(errno_to_neterror(fd))
    }
    
    // Set reuse address before bind
    if opts.reuse_addr {
        @syscall("setsockopt", fd, SOL_SOCKET, SO_REUSEADDR, 1)
    }
    
    // Bind
    let err = @syscall("bind", fd, addr)
    if err < 0 {
        @syscall("close", fd)
        return Err(errno_to_neterror(err))
    }
    
    // Listen
    err = @syscall("listen", fd, 128)  // backlog of 128
    if err < 0 {
        @syscall("close", fd)
        return Err(errno_to_neterror(err))
    }
    
    return Ok(TcpSocket {
        fd: fd,
        local_addr: addr,
        remote_addr: sockaddr_new(ip_from_bytes(0, 0, 0, 0), 0),
        state: ConnState::Connected,
        opts: opts
    })
}

fn tcp_accept(socket: &TcpSocket) -> Result<TcpSocket> {
    // Accept with timeout
    let (fd, remote_addr) = @syscall("accept_timeout", socket.fd, socket.opts.recv_timeout_ms)
    if fd < 0 {
        return Err(errno_to_neterror(fd))
    }
    
    // Inherit options from listener
    if socket.opts.nodelay {
        @syscall("setsockopt", fd, IPPROTO_TCP, TCP_NODELAY, 1)
    }
    
    // Set timeouts
    @syscall("setsockopt", fd, SOL_SOCKET, SO_RCVTIMEO, socket.opts.recv_timeout_ms)
    @syscall("setsockopt", fd, SOL_SOCKET, SO_SNDTIMEO, socket.opts.send_timeout_ms)
    
    // Get local address
    let local_addr = @syscall("getsockname", fd)
    
    return Ok(TcpSocket {
        fd: fd,
        local_addr: local_addr,
        remote_addr: remote_addr,
        state: ConnState::Connected,
        opts: socket.opts
    })
}

fn tcp_send(socket: &TcpSocket, data: &[u8]) -> Result<usize> {
    if socket.state != ConnState::Connected {
        return Err(NetError::NotConnected)
    }
    
    let sent = @syscall("send_timeout", socket.fd, data, socket.opts.send_timeout_ms)
    if sent < 0 {
        return Err(errno_to_neterror(sent))
    }
    
    return Ok(sent as usize)
}

fn tcp_recv(socket: &TcpSocket, buf: &mut [u8]) -> Result<usize> {
    if socket.state != ConnState::Connected {
        return Err(NetError::NotConnected)
    }
    
    let received = @syscall("recv_timeout", socket.fd, buf, socket.opts.recv_timeout_ms)
    if received < 0 {
        return Err(errno_to_neterror(received))
    }
    
    if received == 0 {
        // Connection closed by peer
        socket.state = ConnState::Closed
        return Ok(0)
    }
    
    return Ok(received as usize)
}

fn tcp_close(socket: &mut TcpSocket) -> Result<()> {
    if socket.state == ConnState::Closed {
        return Ok(())
    }
    
    socket.state = ConnState::Closing
    let err = @syscall("close", socket.fd)
    socket.state = ConnState::Closed
    
    if err < 0 {
        return Err(errno_to_neterror(err))
    }
    
    return Ok(())
}

// UDP operations
fn udp_bind(addr: SocketAddr) -> Result<UdpSocket> {
    return udp_bind_with_opts(addr, default_opts())
}

fn udp_bind_with_opts(addr: SocketAddr, opts: SocketOpts) -> Result<UdpSocket> {
    // Create socket
    let fd = @syscall("socket", AF_INET, SOCK_DGRAM, 0)
    if fd < 0 {
        return Err(errno_to_neterror(fd))
    }
    
    // Set options
    if opts.reuse_addr {
        @syscall("setsockopt", fd, SOL_SOCKET, SO_REUSEADDR, 1)
    }
    
    // Set timeouts
    @syscall("setsockopt", fd, SOL_SOCKET, SO_RCVTIMEO, opts.recv_timeout_ms)
    @syscall("setsockopt", fd, SOL_SOCKET, SO_SNDTIMEO, opts.send_timeout_ms)
    
    // Set buffer sizes
    @syscall("setsockopt", fd, SOL_SOCKET, SO_RCVBUF, opts.recv_buffer_size)
    @syscall("setsockopt", fd, SOL_SOCKET, SO_SNDBUF, opts.send_buffer_size)
    
    // Bind
    let err = @syscall("bind", fd, addr)
    if err < 0 {
        @syscall("close", fd)
        return Err(errno_to_neterror(err))
    }
    
    return Ok(UdpSocket {
        fd: fd,
        local_addr: addr,
        opts: opts
    })
}

fn udp_send_to(socket: &UdpSocket, data: &[u8], addr: SocketAddr) -> Result<usize> {
    let sent = @syscall("sendto_timeout", socket.fd, data, addr, socket.opts.send_timeout_ms)
    if sent < 0 {
        return Err(errno_to_neterror(sent))
    }
    
    return Ok(sent as usize)
}

fn udp_recv_from(socket: &UdpSocket, buf: &mut [u8]) -> Result<(usize, SocketAddr)> {
    let (received, addr) = @syscall("recvfrom_timeout", socket.fd, buf, socket.opts.recv_timeout_ms)
    if received < 0 {
        return Err(errno_to_neterror(received))
    }
    
    return Ok((received as usize, addr))
}

fn udp_close(socket: &mut UdpSocket) -> Result<()> {
    let err = @syscall("close", socket.fd)
    if err < 0 {
        return Err(errno_to_neterror(err))
    }
    
    return Ok(())
}

// Helper to convert errno to NetError
fn errno_to_neterror(errno: i32) -> NetError {
    match errno {
        -ECONNREFUSED => NetError::ConnectionRefused
        -ECONNRESET => NetError::ConnectionReset
        -ECONNABORTED => NetError::ConnectionAborted
        -ENOTCONN => NetError::NotConnected
        -EADDRINUSE => NetError::AddrInUse
        -EADDRNOTAVAIL => NetError::AddrNotAvailable
        -ENETDOWN => NetError::NetworkDown
        -ENETUNREACH => NetError::NetworkUnreachable
        -EHOSTUNREACH => NetError::HostUnreachable
        -ETIMEDOUT => NetError::TimedOut
        -EACCES | -EPERM => NetError::PermissionDenied
        -EINTR => NetError::Interrupted
        -EAGAIN | -EWOULDBLOCK => NetError::WouldBlock
        -EINVAL => NetError::InvalidAddr
        -ENOBUFS => NetError::BufferFull
        _ => NetError::Unknown(errno)
    }
}

// Constants (would be provided by runtime)
const AF_INET: i32 = 2
const SOCK_STREAM: i32 = 1
const SOCK_DGRAM: i32 = 2
const IPPROTO_TCP: i32 = 6
const SOL_SOCKET: i32 = 1
const SO_REUSEADDR: i32 = 2
const SO_RCVTIMEO: i32 = 20
const SO_SNDTIMEO: i32 = 21
const SO_RCVBUF: i32 = 8
const SO_SNDBUF: i32 = 7
const TCP_NODELAY: i32 = 1

const ECONNREFUSED: i32 = 111
const ECONNRESET: i32 = 104
const ECONNABORTED: i32 = 103
const ENOTCONN: i32 = 107
const EADDRINUSE: i32 = 98
const EADDRNOTAVAIL: i32 = 99
const ENETDOWN: i32 = 100
const ENETUNREACH: i32 = 101
const EHOSTUNREACH: i32 = 113
const ETIMEDOUT: i32 = 110
const EACCES: i32 = 13
const EPERM: i32 = 1
const EINTR: i32 = 4
const EAGAIN: i32 = 11
const EWOULDBLOCK: i32 = 11
const EINVAL: i32 = 22
const ENOBUFS: i32 = 105
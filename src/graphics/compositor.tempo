// ╔═════╦═════╦═════╗
// ║ 🛡️  ║ ⚖️  ║ ⚡  ║
// ║  C  ║  E  ║  G  ║
// ╚═════╩═════╩═════╝
// ╔═════════════════╗
// ║ wcet [T∞] bound ║
// ╚═════════════════╝
//
// Author: Ignacio Peña Sepúlveda
// Date: June 25, 2025

// Deterministic Window Compositor for AtomicOS
// Fixed-time compositing with static allocation
// No dynamic memory allocation

#include <stdint.h>
#include <stdbool.h>
#include <string.h>

// Maximum windows and fixed window buffer size
#define MAX_WINDOWS 32
#define MAX_WINDOW_WIDTH 800
#define MAX_WINDOW_HEIGHT 600

// Window flags
#define WINDOW_VISIBLE    0x01
#define WINDOW_FOCUSED    0x02
#define WINDOW_DIRTY      0x04
#define WINDOW_DECORATED  0x08

// Window structure
typedef struct {
    uint16_t id;
    uint16_t x;
    uint16_t y;
    uint16_t width;
    uint16_t height;
    uint8_t flags;
    uint8_t z_order;    // Lower values are on top
    uint32_t bg_color;
    
    // Static buffer for window content
    uint32_t buffer[MAX_WINDOW_WIDTH * MAX_WINDOW_HEIGHT];
} window_t;

// Compositor state
typedef struct {
    window_t windows[MAX_WINDOWS];
    uint16_t window_count;
    uint16_t focused_window;
    uint16_t screen_width;
    uint16_t screen_height;
    
    // Dirty region tracking for optimized redraw
    uint16_t dirty_x1, dirty_y1;
    uint16_t dirty_x2, dirty_y2;
    bool has_dirty_region;
} compositor_t;

static compositor_t compositor;

// Initialize compositor
// O(1) time
void compositor_init(uint16_t screen_width, uint16_t screen_height) {
    memset(&compositor, 0, sizeof(compositor_t));
    compositor.screen_width = screen_width;
    compositor.screen_height = screen_height;
    compositor.focused_window = 0xFFFF; // No window focused
}

// Create a new window
// Returns window ID or 0xFFFF on failure
// O(MAX_WINDOWS) time
uint16_t compositor_create_window(uint16_t x, uint16_t y, 
                                  uint16_t width, uint16_t height,
                                  uint32_t bg_color) {
    // Validate dimensions
    if (width > MAX_WINDOW_WIDTH || height > MAX_WINDOW_HEIGHT) {
        return 0xFFFF;
    }
    
    // Find free slot
    for (uint16_t i = 0; i < MAX_WINDOWS; i++) {
        if (compositor.windows[i].id == 0) {
            window_t* win = &compositor.windows[i];
            win->id = i + 1; // IDs start at 1
            win->x = x;
            win->y = y;
            win->width = width;
            win->height = height;
            win->flags = WINDOW_VISIBLE | WINDOW_DIRTY | WINDOW_DECORATED;
            win->z_order = compositor.window_count;
            win->bg_color = bg_color;
            
            // Clear window buffer
            for (uint32_t j = 0; j < width * height; j++) {
                win->buffer[j] = bg_color;
            }
            
            compositor.window_count++;
            compositor_mark_dirty(x, y, x + width, y + height);
            
            return win->id;
        }
    }
    
    return 0xFFFF; // No free slots
}

// Destroy window
// O(MAX_WINDOWS) time
void compositor_destroy_window(uint16_t window_id) {
    if (window_id == 0 || window_id > MAX_WINDOWS) return;
    
    window_t* win = &compositor.windows[window_id - 1];
    if (win->id == 0) return;
    
    // Mark region as dirty before removing
    compositor_mark_dirty(win->x, win->y, 
                          win->x + win->width, 
                          win->y + win->height);
    
    // Clear window
    memset(win, 0, sizeof(window_t));
    compositor.window_count--;
    
    // Adjust z-order of remaining windows
    for (uint16_t i = 0; i < MAX_WINDOWS; i++) {
        if (compositor.windows[i].id != 0 && 
            compositor.windows[i].z_order > win->z_order) {
            compositor.windows[i].z_order--;
        }
    }
}

// Move window to new position
// O(1) time
void compositor_move_window(uint16_t window_id, int16_t new_x, int16_t new_y) {
    if (window_id == 0 || window_id > MAX_WINDOWS) return;
    
    window_t* win = &compositor.windows[window_id - 1];
    if (win->id == 0) return;
    
    // Mark old and new regions as dirty
    compositor_mark_dirty(win->x, win->y, 
                          win->x + win->width, 
                          win->y + win->height);
    
    win->x = new_x;
    win->y = new_y;
    
    compositor_mark_dirty(win->x, win->y, 
                          win->x + win->width, 
                          win->y + win->height);
}

// Bring window to front
// O(MAX_WINDOWS) time
void compositor_raise_window(uint16_t window_id) {
    if (window_id == 0 || window_id > MAX_WINDOWS) return;
    
    window_t* win = &compositor.windows[window_id - 1];
    if (win->id == 0 || win->z_order == 0) return;
    
    uint8_t old_z = win->z_order;
    
    // Shift other windows down
    for (uint16_t i = 0; i < MAX_WINDOWS; i++) {
        if (compositor.windows[i].id != 0 && 
            compositor.windows[i].z_order < old_z) {
            compositor.windows[i].z_order++;
        }
    }
    
    win->z_order = 0;
    win->flags |= WINDOW_FOCUSED;
    compositor.focused_window = window_id;
    
    // Mark window region as dirty
    compositor_mark_dirty(win->x, win->y, 
                          win->x + win->width, 
                          win->y + win->height);
}

// Update window content
// O(width * height) time
void compositor_update_window(uint16_t window_id, 
                              uint16_t x, uint16_t y,
                              uint16_t width, uint16_t height,
                              const uint32_t* pixels) {
    if (window_id == 0 || window_id > MAX_WINDOWS || !pixels) return;
    
    window_t* win = &compositor.windows[window_id - 1];
    if (win->id == 0) return;
    
    // Clip to window bounds
    uint16_t copy_width = (x + width > win->width) ? win->width - x : width;
    uint16_t copy_height = (y + height > win->height) ? win->height - y : height;
    
    // Copy pixels to window buffer
    for (uint16_t row = 0; row < copy_height; row++) {
        for (uint16_t col = 0; col < copy_width; col++) {
            uint32_t win_offset = (y + row) * win->width + (x + col);
            uint32_t src_offset = row * width + col;
            win->buffer[win_offset] = pixels[src_offset];
        }
    }
    
    win->flags |= WINDOW_DIRTY;
    
    // Mark screen region as dirty
    compositor_mark_dirty(win->x + x, win->y + y,
                          win->x + x + copy_width,
                          win->y + y + copy_height);
}

// Mark region as dirty
// O(1) time
void compositor_mark_dirty(int16_t x1, int16_t y1, int16_t x2, int16_t y2) {
    // Clip to screen bounds
    if (x1 < 0) x1 = 0;
    if (y1 < 0) y1 = 0;
    if (x2 > compositor.screen_width) x2 = compositor.screen_width;
    if (y2 > compositor.screen_height) y2 = compositor.screen_height;
    
    if (!compositor.has_dirty_region) {
        compositor.dirty_x1 = x1;
        compositor.dirty_y1 = y1;
        compositor.dirty_x2 = x2;
        compositor.dirty_y2 = y2;
        compositor.has_dirty_region = true;
    } else {
        // Expand dirty region
        if (x1 < compositor.dirty_x1) compositor.dirty_x1 = x1;
        if (y1 < compositor.dirty_y1) compositor.dirty_y1 = y1;
        if (x2 > compositor.dirty_x2) compositor.dirty_x2 = x2;
        if (y2 > compositor.dirty_y2) compositor.dirty_y2 = y2;
    }
}

// Composite all windows to output buffer
// O(screen_width * screen_height) worst case
void compositor_composite(uint32_t* output_buffer) {
    if (!output_buffer) return;
    
    // Clear output buffer (or just dirty region for optimization)
    if (compositor.has_dirty_region) {
        for (uint16_t y = compositor.dirty_y1; y < compositor.dirty_y2; y++) {
            for (uint16_t x = compositor.dirty_x1; x < compositor.dirty_x2; x++) {
                output_buffer[y * compositor.screen_width + x] = 0xFF000000; // Black
            }
        }
    }
    
    // Composite windows from back to front
    for (int8_t z = MAX_WINDOWS - 1; z >= 0; z--) {
        for (uint16_t i = 0; i < MAX_WINDOWS; i++) {
            window_t* win = &compositor.windows[i];
            
            if (win->id == 0 || !(win->flags & WINDOW_VISIBLE) || win->z_order != z) {
                continue;
            }
            
            // Calculate visible region
            int16_t win_x1 = win->x;
            int16_t win_y1 = win->y;
            int16_t win_x2 = win->x + win->width;
            int16_t win_y2 = win->y + win->height;
            
            // Clip to screen
            if (win_x1 < 0) win_x1 = 0;
            if (win_y1 < 0) win_y1 = 0;
            if (win_x2 > compositor.screen_width) win_x2 = compositor.screen_width;
            if (win_y2 > compositor.screen_height) win_y2 = compositor.screen_height;
            
            // Draw window decoration if enabled
            if (win->flags & WINDOW_DECORATED) {
                // Simple title bar
                uint32_t title_color = (win->flags & WINDOW_FOCUSED) ? 0xFF4444FF : 0xFF888888;
                int16_t title_height = 24;
                
                for (int16_t y = win_y1; y < win_y1 + title_height && y < win_y2; y++) {
                    for (int16_t x = win_x1; x < win_x2; x++) {
                        output_buffer[y * compositor.screen_width + x] = title_color;
                    }
                }
                
                win_y1 += title_height;
            }
            
            // Copy window content
            for (int16_t y = win_y1; y < win_y2; y++) {
                for (int16_t x = win_x1; x < win_x2; x++) {
                    uint32_t win_offset = (y - win->y) * win->width + (x - win->x);
                    output_buffer[y * compositor.screen_width + x] = win->buffer[win_offset];
                }
            }
            
            win->flags &= ~WINDOW_DIRTY;
        }
    }
    
    compositor.has_dirty_region = false;
}

// Get window at screen position
// O(MAX_WINDOWS) time
uint16_t compositor_window_at(uint16_t x, uint16_t y) {
    // Check windows from front to back
    for (uint8_t z = 0; z < MAX_WINDOWS; z++) {
        for (uint16_t i = 0; i < MAX_WINDOWS; i++) {
            window_t* win = &compositor.windows[i];
            
            if (win->id != 0 && 
                win->z_order == z &&
                (win->flags & WINDOW_VISIBLE) &&
                x >= win->x && x < win->x + win->width &&
                y >= win->y && y < win->y + win->height) {
                return win->id;
            }
        }
    }
    
    return 0; // No window at position
}
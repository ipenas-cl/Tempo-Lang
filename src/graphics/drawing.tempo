// ╔═════╦═════╦═════╗
// ║ 🛡️  ║ ⚖️  ║ ⚡  ║
// ║  C  ║  E  ║  G  ║
// ╚═════╩═════╩═════╝
// ╔═════════════════╗
// ║ wcet [T∞] bound ║
// ╚═════════════════╝
//
// Author: Ignacio Peña Sepúlveda
// Date: June 25, 2025

// 2D Drawing Primitives for AtomicOS
// Deterministic, fixed-time graphics operations
// No dynamic allocation - all operations use provided buffers

#include <stdint.h>
#include <stdbool.h>

// Color manipulation macros
#define COLOR_ARGB(a, r, g, b) (((uint32_t)(a) << 24) | ((uint32_t)(r) << 16) | ((uint32_t)(g) << 8) | (uint32_t)(b))
#define COLOR_GET_A(c) (((c) >> 24) & 0xFF)
#define COLOR_GET_R(c) (((c) >> 16) & 0xFF)
#define COLOR_GET_G(c) (((c) >> 8) & 0xFF)
#define COLOR_GET_B(c) ((c) & 0xFF)

// Blend modes
typedef enum {
    BLEND_NONE = 0,     // Direct copy
    BLEND_ALPHA,        // Alpha blending
    BLEND_ADD,          // Additive blending
    BLEND_MULTIPLY      // Multiplicative blending
} blend_mode_t;

// Line styles
typedef enum {
    LINE_SOLID = 0,
    LINE_DASHED,
    LINE_DOTTED
} line_style_t;

// Drawing context
typedef struct {
    uint32_t* buffer;
    uint16_t width;
    uint16_t height;
    uint32_t fg_color;
    uint32_t bg_color;
    blend_mode_t blend_mode;
    line_style_t line_style;
    uint8_t line_width;
    
    // Clipping rectangle
    uint16_t clip_x1, clip_y1;
    uint16_t clip_x2, clip_y2;
} draw_context_t;

// Initialize drawing context
// O(1) time
void draw_init_context(draw_context_t* ctx, uint32_t* buffer, 
                       uint16_t width, uint16_t height) {
    ctx->buffer = buffer;
    ctx->width = width;
    ctx->height = height;
    ctx->fg_color = 0xFF000000; // Black
    ctx->bg_color = 0xFFFFFFFF; // White
    ctx->blend_mode = BLEND_NONE;
    ctx->line_style = LINE_SOLID;
    ctx->line_width = 1;
    
    // Default clip to full buffer
    ctx->clip_x1 = 0;
    ctx->clip_y1 = 0;
    ctx->clip_x2 = width;
    ctx->clip_y2 = height;
}

// Set clipping rectangle
// O(1) time
void draw_set_clip(draw_context_t* ctx, uint16_t x1, uint16_t y1, 
                   uint16_t x2, uint16_t y2) {
    // Ensure valid clip bounds
    if (x1 < x2 && y1 < y2) {
        ctx->clip_x1 = x1 < ctx->width ? x1 : ctx->width;
        ctx->clip_y1 = y1 < ctx->height ? y1 : ctx->height;
        ctx->clip_x2 = x2 < ctx->width ? x2 : ctx->width;
        ctx->clip_y2 = y2 < ctx->height ? y2 : ctx->height;
    }
}

// Alpha blend two colors
// O(1) time
static inline uint32_t blend_alpha(uint32_t src, uint32_t dst) {
    uint8_t alpha = COLOR_GET_A(src);
    if (alpha == 0xFF) return src;
    if (alpha == 0x00) return dst;
    
    uint8_t inv_alpha = 255 - alpha;
    
    uint8_t r = (COLOR_GET_R(src) * alpha + COLOR_GET_R(dst) * inv_alpha) / 255;
    uint8_t g = (COLOR_GET_G(src) * alpha + COLOR_GET_G(dst) * inv_alpha) / 255;
    uint8_t b = (COLOR_GET_B(src) * alpha + COLOR_GET_B(dst) * inv_alpha) / 255;
    
    return COLOR_ARGB(0xFF, r, g, b);
}

// Put pixel with clipping and blending
// O(1) time
static inline void put_pixel(draw_context_t* ctx, int16_t x, int16_t y, uint32_t color) {
    // Clip check
    if (x < ctx->clip_x1 || x >= ctx->clip_x2 || 
        y < ctx->clip_y1 || y >= ctx->clip_y2) {
        return;
    }
    
    uint32_t offset = y * ctx->width + x;
    
    switch (ctx->blend_mode) {
        case BLEND_ALPHA:
            ctx->buffer[offset] = blend_alpha(color, ctx->buffer[offset]);
            break;
            
        case BLEND_ADD:
            {
                uint32_t dst = ctx->buffer[offset];
                uint8_t r = COLOR_GET_R(color) + COLOR_GET_R(dst);
                uint8_t g = COLOR_GET_G(color) + COLOR_GET_G(dst);
                uint8_t b = COLOR_GET_B(color) + COLOR_GET_B(dst);
                ctx->buffer[offset] = COLOR_ARGB(0xFF, 
                    r > 255 ? 255 : r,
                    g > 255 ? 255 : g,
                    b > 255 ? 255 : b);
            }
            break;
            
        case BLEND_MULTIPLY:
            {
                uint32_t dst = ctx->buffer[offset];
                uint8_t r = (COLOR_GET_R(color) * COLOR_GET_R(dst)) / 255;
                uint8_t g = (COLOR_GET_G(color) * COLOR_GET_G(dst)) / 255;
                uint8_t b = (COLOR_GET_B(color) * COLOR_GET_B(dst)) / 255;
                ctx->buffer[offset] = COLOR_ARGB(0xFF, r, g, b);
            }
            break;
            
        case BLEND_NONE:
        default:
            ctx->buffer[offset] = color;
            break;
    }
}

// Draw a single pixel
// O(1) time
void draw_pixel(draw_context_t* ctx, int16_t x, int16_t y) {
    put_pixel(ctx, x, y, ctx->fg_color);
}

// Draw horizontal line
// O(width) time
void draw_hline(draw_context_t* ctx, int16_t x1, int16_t x2, int16_t y) {
    if (x1 > x2) {
        int16_t temp = x1;
        x1 = x2;
        x2 = temp;
    }
    
    // Apply line style
    uint8_t pattern = 0xFF;
    if (ctx->line_style == LINE_DASHED) {
        pattern = 0xF0; // 11110000
    } else if (ctx->line_style == LINE_DOTTED) {
        pattern = 0xAA; // 10101010
    }
    
    for (int16_t x = x1; x <= x2; x++) {
        if (pattern & (1 << (x & 7))) {
            for (uint8_t w = 0; w < ctx->line_width; w++) {
                put_pixel(ctx, x, y + w, ctx->fg_color);
            }
        }
    }
}

// Draw vertical line
// O(height) time
void draw_vline(draw_context_t* ctx, int16_t x, int16_t y1, int16_t y2) {
    if (y1 > y2) {
        int16_t temp = y1;
        y1 = y2;
        y2 = temp;
    }
    
    // Apply line style
    uint8_t pattern = 0xFF;
    if (ctx->line_style == LINE_DASHED) {
        pattern = 0xF0;
    } else if (ctx->line_style == LINE_DOTTED) {
        pattern = 0xAA;
    }
    
    for (int16_t y = y1; y <= y2; y++) {
        if (pattern & (1 << (y & 7))) {
            for (uint8_t w = 0; w < ctx->line_width; w++) {
                put_pixel(ctx, x + w, y, ctx->fg_color);
            }
        }
    }
}

// Draw line using Bresenham's algorithm
// O(max(|x2-x1|, |y2-y1|)) time
void draw_line(draw_context_t* ctx, int16_t x1, int16_t y1, int16_t x2, int16_t y2) {
    // Special cases for horizontal and vertical lines
    if (y1 == y2) {
        draw_hline(ctx, x1, x2, y1);
        return;
    }
    if (x1 == x2) {
        draw_vline(ctx, x1, y1, y2);
        return;
    }
    
    int16_t dx = x2 > x1 ? x2 - x1 : x1 - x2;
    int16_t dy = y2 > y1 ? y2 - y1 : y1 - y2;
    int16_t sx = x1 < x2 ? 1 : -1;
    int16_t sy = y1 < y2 ? 1 : -1;
    int16_t err = dx - dy;
    
    uint8_t pattern = 0xFF;
    if (ctx->line_style == LINE_DASHED) {
        pattern = 0xF0;
    } else if (ctx->line_style == LINE_DOTTED) {
        pattern = 0xAA;
    }
    
    uint16_t step = 0;
    while (true) {
        if (pattern & (1 << (step & 7))) {
            // Draw line with width
            if (ctx->line_width == 1) {
                put_pixel(ctx, x1, y1, ctx->fg_color);
            } else {
                // Draw thick line by drawing perpendicular lines
                for (int8_t w = -(ctx->line_width / 2); w <= ctx->line_width / 2; w++) {
                    if (dx > dy) {
                        put_pixel(ctx, x1, y1 + w, ctx->fg_color);
                    } else {
                        put_pixel(ctx, x1 + w, y1, ctx->fg_color);
                    }
                }
            }
        }
        
        if (x1 == x2 && y1 == y2) break;
        
        int16_t e2 = 2 * err;
        if (e2 > -dy) {
            err -= dy;
            x1 += sx;
        }
        if (e2 < dx) {
            err += dx;
            y1 += sy;
        }
        step++;
    }
}

// Draw rectangle outline
// O(2 * (width + height)) time
void draw_rect(draw_context_t* ctx, int16_t x1, int16_t y1, int16_t x2, int16_t y2) {
    draw_hline(ctx, x1, x2, y1);
    draw_hline(ctx, x1, x2, y2);
    draw_vline(ctx, x1, y1, y2);
    draw_vline(ctx, x2, y1, y2);
}

// Draw filled rectangle
// O(width * height) time
void draw_filled_rect(draw_context_t* ctx, int16_t x1, int16_t y1, int16_t x2, int16_t y2) {
    // Ensure correct order
    if (x1 > x2) {
        int16_t temp = x1;
        x1 = x2;
        x2 = temp;
    }
    if (y1 > y2) {
        int16_t temp = y1;
        y1 = y2;
        y2 = temp;
    }
    
    // Clip to context bounds
    if (x1 < ctx->clip_x1) x1 = ctx->clip_x1;
    if (y1 < ctx->clip_y1) y1 = ctx->clip_y1;
    if (x2 >= ctx->clip_x2) x2 = ctx->clip_x2 - 1;
    if (y2 >= ctx->clip_y2) y2 = ctx->clip_y2 - 1;
    
    // Fill rectangle
    for (int16_t y = y1; y <= y2; y++) {
        for (int16_t x = x1; x <= x2; x++) {
            put_pixel(ctx, x, y, ctx->fg_color);
        }
    }
}

// Draw circle using midpoint algorithm
// O(radius * 8) time
void draw_circle(draw_context_t* ctx, int16_t cx, int16_t cy, uint16_t radius) {
    int16_t x = radius;
    int16_t y = 0;
    int16_t err = 0;
    
    while (x >= y) {
        // Draw 8 octants
        put_pixel(ctx, cx + x, cy + y, ctx->fg_color);
        put_pixel(ctx, cx + y, cy + x, ctx->fg_color);
        put_pixel(ctx, cx - y, cy + x, ctx->fg_color);
        put_pixel(ctx, cx - x, cy + y, ctx->fg_color);
        put_pixel(ctx, cx - x, cy - y, ctx->fg_color);
        put_pixel(ctx, cx - y, cy - x, ctx->fg_color);
        put_pixel(ctx, cx + y, cy - x, ctx->fg_color);
        put_pixel(ctx, cx + x, cy - y, ctx->fg_color);
        
        if (err <= 0) {
            y += 1;
            err += 2 * y + 1;
        }
        if (err > 0) {
            x -= 1;
            err -= 2 * x + 1;
        }
    }
}

// Draw filled circle
// O(radius^2) time
void draw_filled_circle(draw_context_t* ctx, int16_t cx, int16_t cy, uint16_t radius) {
    int16_t x = radius;
    int16_t y = 0;
    int16_t err = 0;
    
    while (x >= y) {
        // Draw horizontal lines for each octant pair
        draw_hline(ctx, cx - x, cx + x, cy + y);
        draw_hline(ctx, cx - x, cx + x, cy - y);
        draw_hline(ctx, cx - y, cx + y, cy + x);
        draw_hline(ctx, cx - y, cx + y, cy - x);
        
        if (err <= 0) {
            y += 1;
            err += 2 * y + 1;
        }
        if (err > 0) {
            x -= 1;
            err -= 2 * x + 1;
        }
    }
}

// Draw ellipse
// O(max(width, height) * 4) time
void draw_ellipse(draw_context_t* ctx, int16_t cx, int16_t cy, 
                  uint16_t width, uint16_t height) {
    int32_t a = width;
    int32_t b = height;
    int32_t a2 = a * a;
    int32_t b2 = b * b;
    
    // Region 1
    int32_t x = 0;
    int32_t y = b;
    int32_t d1 = b2 - a2 * b + a2 / 4;
    
    while (b2 * x < a2 * y) {
        put_pixel(ctx, cx + x, cy + y, ctx->fg_color);
        put_pixel(ctx, cx - x, cy + y, ctx->fg_color);
        put_pixel(ctx, cx + x, cy - y, ctx->fg_color);
        put_pixel(ctx, cx - x, cy - y, ctx->fg_color);
        
        if (d1 < 0) {
            x++;
            d1 += b2 * (2 * x + 1);
        } else {
            x++;
            y--;
            d1 += b2 * (2 * x + 1) - 2 * a2 * y;
        }
    }
    
    // Region 2
    int32_t d2 = b2 * (x + 0.5) * (x + 0.5) + a2 * (y - 1) * (y - 1) - a2 * b2;
    
    while (y >= 0) {
        put_pixel(ctx, cx + x, cy + y, ctx->fg_color);
        put_pixel(ctx, cx - x, cy + y, ctx->fg_color);
        put_pixel(ctx, cx + x, cy - y, ctx->fg_color);
        put_pixel(ctx, cx - x, cy - y, ctx->fg_color);
        
        if (d2 > 0) {
            y--;
            d2 += a2 * (1 - 2 * y);
        } else {
            x++;
            y--;
            d2 += b2 * (2 * x + 2) + a2 * (1 - 2 * y);
        }
    }
}

// Draw triangle outline
// O(perimeter) time
void draw_triangle(draw_context_t* ctx, int16_t x1, int16_t y1, 
                   int16_t x2, int16_t y2, int16_t x3, int16_t y3) {
    draw_line(ctx, x1, y1, x2, y2);
    draw_line(ctx, x2, y2, x3, y3);
    draw_line(ctx, x3, y3, x1, y1);
}

// Helper function for filled triangle - swap values
static inline void swap_int16(int16_t* a, int16_t* b) {
    int16_t temp = *a;
    *a = *b;
    *b = temp;
}

// Draw filled triangle using scanline algorithm
// O(area) time
void draw_filled_triangle(draw_context_t* ctx, int16_t x1, int16_t y1, 
                          int16_t x2, int16_t y2, int16_t x3, int16_t y3) {
    // Sort vertices by y coordinate
    if (y1 > y2) {
        swap_int16(&x1, &x2);
        swap_int16(&y1, &y2);
    }
    if (y2 > y3) {
        swap_int16(&x2, &x3);
        swap_int16(&y2, &y3);
    }
    if (y1 > y2) {
        swap_int16(&x1, &x2);
        swap_int16(&y1, &y2);
    }
    
    // Calculate slopes
    int32_t dx12 = x2 - x1;
    int32_t dy12 = y2 - y1;
    int32_t dx13 = x3 - x1;
    int32_t dy13 = y3 - y1;
    int32_t dx23 = x3 - x2;
    int32_t dy23 = y3 - y2;
    
    // Fill top half of triangle
    for (int16_t y = y1; y <= y2; y++) {
        int16_t xa, xb;
        
        if (dy12 != 0) {
            xa = x1 + (dx12 * (y - y1)) / dy12;
        } else {
            xa = x1;
        }
        
        if (dy13 != 0) {
            xb = x1 + (dx13 * (y - y1)) / dy13;
        } else {
            xb = x1;
        }
        
        if (xa > xb) swap_int16(&xa, &xb);
        draw_hline(ctx, xa, xb, y);
    }
    
    // Fill bottom half of triangle
    for (int16_t y = y2 + 1; y <= y3; y++) {
        int16_t xa, xb;
        
        if (dy23 != 0) {
            xa = x2 + (dx23 * (y - y2)) / dy23;
        } else {
            xa = x2;
        }
        
        if (dy13 != 0) {
            xb = x1 + (dx13 * (y - y1)) / dy13;
        } else {
            xb = x1;
        }
        
        if (xa > xb) swap_int16(&xa, &xb);
        draw_hline(ctx, xa, xb, y);
    }
}

// Draw polygon outline
// O(num_vertices) time
void draw_polygon(draw_context_t* ctx, const int16_t* vertices, uint16_t num_vertices) {
    if (num_vertices < 2) return;
    
    for (uint16_t i = 0; i < num_vertices - 1; i++) {
        draw_line(ctx, vertices[i * 2], vertices[i * 2 + 1],
                  vertices[(i + 1) * 2], vertices[(i + 1) * 2 + 1]);
    }
    
    // Close the polygon
    draw_line(ctx, vertices[(num_vertices - 1) * 2], vertices[(num_vertices - 1) * 2 + 1],
              vertices[0], vertices[1]);
}

// Fill entire buffer with color
// O(width * height) time
void draw_clear(draw_context_t* ctx, uint32_t color) {
    uint32_t pixels = ctx->width * ctx->height;
    for (uint32_t i = 0; i < pixels; i++) {
        ctx->buffer[i] = color;
    }
}

// Copy rectangular region
// O(width * height) time
void draw_blit(draw_context_t* ctx, int16_t dest_x, int16_t dest_y,
               const uint32_t* src_buffer, uint16_t src_width, uint16_t src_height,
               int16_t src_x, int16_t src_y, uint16_t copy_width, uint16_t copy_height) {
    // Clip source rectangle
    if (src_x < 0) {
        copy_width += src_x;
        dest_x -= src_x;
        src_x = 0;
    }
    if (src_y < 0) {
        copy_height += src_y;
        dest_y -= src_y;
        src_y = 0;
    }
    if (src_x + copy_width > src_width) {
        copy_width = src_width - src_x;
    }
    if (src_y + copy_height > src_height) {
        copy_height = src_height - src_y;
    }
    
    // Copy pixels
    for (uint16_t y = 0; y < copy_height; y++) {
        for (uint16_t x = 0; x < copy_width; x++) {
            uint32_t src_offset = (src_y + y) * src_width + (src_x + x);
            put_pixel(ctx, dest_x + x, dest_y + y, src_buffer[src_offset]);
        }
    }
}
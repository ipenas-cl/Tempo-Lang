// ╔═════╦═════╦═════╗
// ║ 🛡️  ║ ⚖️  ║ ⚡  ║
// ║  C  ║  E  ║  G  ║
// ╚═════╩═════╩═════╝
// ╔═════════════════╗
// ║ wcet [T∞] bound ║
// ╚═════════════════╝
//
// Author: Ignacio Peña Sepúlveda
// Date: June 25, 2025

// udp.tempo - Deterministic UDP implementation for AtomicOS
// Provides bounded WCET UDP packet processing with static allocation

const UDP_HLEN: u32 = 8;
const UDP_MAX_PAYLOAD: u32 = 65507;  // 65535 - 20 (IP) - 8 (UDP)

// UDP header structure
struct UdpHeader {
    sport: u16,
    dport: u16,
    len: u16,
    check: u16,
}

// UDP socket structure
const MAX_UDP_SOCKETS: u32 = 64;
const UDP_RECV_QUEUE_SIZE: u32 = 16;

struct UdpPacket {
    data: [u8; 1500],  // Max Ethernet payload
    len: u32,
    src_addr: IpAddr,
    src_port: u16,
    valid: bool,
}

struct UdpSocket {
    local_addr: IpAddr,
    local_port: u16,
    recv_queue: [UdpPacket; UDP_RECV_QUEUE_SIZE],
    recv_head: u32,
    recv_tail: u32,
    recv_count: u32,
    valid: bool,
}

// Global UDP socket table
static mut udp_sockets: [UdpSocket; MAX_UDP_SOCKETS] = [{
    local_addr: 0,
    local_port: 0,
    recv_queue: [{
        data: [0; 1500],
        len: 0,
        src_addr: 0,
        src_port: 0,
        valid: false,
    }; UDP_RECV_QUEUE_SIZE],
    recv_head: 0,
    recv_tail: 0,
    recv_count: 0,
    valid: false,
}; MAX_UDP_SOCKETS];

// UDP port allocation
static mut next_udp_port: u16 = 49152;

// Initialize UDP subsystem
fn udp_init() {
    for i in 0..MAX_UDP_SOCKETS {
        unsafe {
            udp_sockets[i].valid = false;
            udp_sockets[i].recv_count = 0;
            udp_sockets[i].recv_head = 0;
            udp_sockets[i].recv_tail = 0;
        }
    }
}

// Calculate UDP checksum - bounded time
fn udp_checksum(saddr: IpAddr, daddr: IpAddr, data: *const u8, len: u32) -> u16 {
    let mut sum: u32 = 0;
    
    // Add pseudo header
    sum += (saddr >> 16) & 0xFFFF;
    sum += saddr & 0xFFFF;
    sum += (daddr >> 16) & 0xFFFF;
    sum += daddr & 0xFFFF;
    sum += IPPROTO_UDP as u32;
    sum += len;
    
    // Add UDP header and data
    let mut i = 0;
    while i < len - 1 {
        unsafe {
            sum += (*(data + i) as u32) << 8 | (*(data + i + 1) as u32);
        }
        i += 2;
    }
    
    // Add odd byte
    if i < len {
        unsafe { sum += (*(data + i) as u32) << 8; }
    }
    
    // Fold to 16 bits
    while sum >> 16 != 0 {
        sum = (sum & 0xFFFF) + (sum >> 16);
    }
    
    let result = !(sum as u16);
    // UDP checksum of 0 means no checksum
    if result == 0 {
        return 0xFFFF;
    }
    return result;
}

// Parse UDP header - bounded time
fn udp_parse_header(data: *const u8) -> UdpHeader {
    let hdr: UdpHeader;
    
    unsafe {
        hdr.sport = (*(data) as u16) << 8 | (*(data + 1) as u16);
        hdr.dport = (*(data + 2) as u16) << 8 | (*(data + 3) as u16);
        hdr.len = (*(data + 4) as u16) << 8 | (*(data + 5) as u16);
        hdr.check = (*(data + 6) as u16) << 8 | (*(data + 7) as u16);
    }
    
    return hdr;
}

// Build UDP header - bounded time
fn udp_build_header(hdr: *const UdpHeader, buf: *mut u8) {
    unsafe {
        *(buf) = ((*hdr).sport >> 8) as u8;
        *(buf + 1) = (*hdr).sport as u8;
        *(buf + 2) = ((*hdr).dport >> 8) as u8;
        *(buf + 3) = (*hdr).dport as u8;
        *(buf + 4) = ((*hdr).len >> 8) as u8;
        *(buf + 5) = (*hdr).len as u8;
        *(buf + 6) = ((*hdr).check >> 8) as u8;
        *(buf + 7) = (*hdr).check as u8;
    }
}

// Find UDP socket - bounded time
fn udp_find_socket(addr: IpAddr, port: u16) -> *mut UdpSocket {
    for i in 0..MAX_UDP_SOCKETS {
        unsafe {
            if udp_sockets[i].valid &&
               udp_sockets[i].local_port == port &&
               (udp_sockets[i].local_addr == addr || 
                udp_sockets[i].local_addr == 0) {  // 0 = INADDR_ANY
                return &mut udp_sockets[i];
            }
        }
    }
    return null;
}

// Allocate UDP socket - bounded time
fn udp_alloc_socket() -> *mut UdpSocket {
    for i in 0..MAX_UDP_SOCKETS {
        unsafe {
            if !udp_sockets[i].valid {
                udp_sockets[i].valid = true;
                udp_sockets[i].recv_count = 0;
                udp_sockets[i].recv_head = 0;
                udp_sockets[i].recv_tail = 0;
                return &mut udp_sockets[i];
            }
        }
    }
    return null;
}

// Process incoming UDP packet - bounded time
fn udp_rx_packet(data: *const u8, len: u32, saddr: IpAddr, daddr: IpAddr,
                 frame: *mut FrameBuffer) -> i32 {
    // Validate minimum length
    if len < UDP_HLEN {
        free_frame(frame);
        return -1;
    }
    
    // Parse header
    let hdr = udp_parse_header(data);
    
    // Validate length
    if hdr.len as u32 != len || hdr.len < UDP_HLEN as u16 {
        free_frame(frame);
        return -1;
    }
    
    // Verify checksum if present
    if hdr.check != 0 {
        let checksum = udp_checksum(saddr, daddr, data, len);
        if checksum != 0 {
            free_frame(frame);
            return -1;
        }
    }
    
    // Find socket
    let sock = udp_find_socket(daddr, hdr.dport);
    if sock == null {
        // No socket listening, send ICMP port unreachable
        free_frame(frame);
        return -1;
    }
    
    // Queue packet
    unsafe {
        if (*sock).recv_count >= UDP_RECV_QUEUE_SIZE {
            // Queue full, drop packet
            free_frame(frame);
            return -1;
        }
        
        let idx = (*sock).recv_tail;
        let pkt = &mut (*sock).recv_queue[idx];
        
        // Copy data
        let data_len = (hdr.len as u32) - UDP_HLEN;
        for i in 0..data_len {
            pkt.data[i] = *(data + UDP_HLEN + i);
        }
        pkt.len = data_len;
        pkt.src_addr = saddr;
        pkt.src_port = hdr.sport;
        pkt.valid = true;
        
        // Update queue pointers
        (*sock).recv_tail = ((*sock).recv_tail + 1) % UDP_RECV_QUEUE_SIZE;
        (*sock).recv_count += 1;
    }
    
    free_frame(frame);
    return 0;
}

// Send UDP packet - bounded time
fn udp_send(sock: *mut UdpSocket, dest_addr: IpAddr, dest_port: u16,
            data: *const u8, len: u32) -> i32 {
    // Validate length
    if len > UDP_MAX_PAYLOAD {
        return -1;
    }
    
    let frame = alloc_frame();
    if frame == null {
        return -1;
    }
    
    // Build UDP header
    let hdr: UdpHeader;
    unsafe {
        hdr.sport = (*sock).local_port;
        hdr.dport = dest_port;
        hdr.len = (UDP_HLEN + len) as u16;
        hdr.check = 0;  // Optional for IPv4
    }
    
    // Build packet
    unsafe {
        let buf = (*frame).data.as_mut_ptr() + ETH_HLEN + IP_HLEN_MIN;
        udp_build_header(&hdr, buf);
        
        // Copy data
        for i in 0..len {
            *(buf + UDP_HLEN + i) = *(data + i);
        }
        
        // Calculate checksum
        let src_addr = if (*sock).local_addr != 0 {
            (*sock).local_addr
        } else {
            local_ip
        };
        
        let checksum = udp_checksum(src_addr, dest_addr, buf, UDP_HLEN + len);
        *(buf + 6) = (checksum >> 8) as u8;
        *(buf + 7) = checksum as u8;
    }
    
    // Send via IP
    ipv4_tx_packet(dest_addr, IPPROTO_UDP,
                   unsafe { (*frame).data.as_ptr() + ETH_HLEN + IP_HLEN_MIN },
                   UDP_HLEN + len);
    
    free_frame(frame);
    return len as i32;
}

// UDP socket operations

// Create UDP socket - bounded time
fn udp_socket() -> *mut UdpSocket {
    return udp_alloc_socket();
}

// Bind socket to address/port - bounded time
fn udp_bind(sock: *mut UdpSocket, addr: IpAddr, port: u16) -> i32 {
    unsafe {
        // Check if port already in use
        for i in 0..MAX_UDP_SOCKETS {
            if udp_sockets[i].valid && 
               udp_sockets[i].local_port == port &&
               &udp_sockets[i] != sock {
                return -1;
            }
        }
        
        (*sock).local_addr = addr;
        (*sock).local_port = if port != 0 {
            port
        } else {
            // Allocate ephemeral port
            let p = next_udp_port;
            next_udp_port += 1;
            if next_udp_port == 0 {
                next_udp_port = 49152;
            }
            p
        };
    }
    
    return 0;
}

// Send datagram - bounded time
fn udp_sendto(sock: *mut UdpSocket, data: *const u8, len: u32,
              addr: IpAddr, port: u16) -> i32 {
    // Auto-bind if not bound
    unsafe {
        if (*sock).local_port == 0 {
            udp_bind(sock, 0, 0);
        }
    }
    
    return udp_send(sock, addr, port, data, len);
}

// Receive datagram - bounded time
fn udp_recvfrom(sock: *mut UdpSocket, buf: *mut u8, len: u32,
                addr: *mut IpAddr, port: *mut u16) -> i32 {
    unsafe {
        if (*sock).recv_count == 0 {
            return 0;  // No data available
        }
        
        let idx = (*sock).recv_head;
        let pkt = &(*sock).recv_queue[idx];
        
        if !pkt.valid {
            return -1;
        }
        
        // Copy data
        let copy_len = if pkt.len < len { pkt.len } else { len };
        for i in 0..copy_len {
            *(buf + i) = pkt.data[i];
        }
        
        // Return source address
        if addr != null {
            *addr = pkt.src_addr;
        }
        if port != null {
            *port = pkt.src_port;
        }
        
        // Mark packet as consumed
        (*sock).recv_queue[idx].valid = false;
        (*sock).recv_head = ((*sock).recv_head + 1) % UDP_RECV_QUEUE_SIZE;
        (*sock).recv_count -= 1;
        
        return copy_len as i32;
    }
}

// Close UDP socket - bounded time
fn udp_close(sock: *mut UdpSocket) {
    unsafe {
        (*sock).valid = false;
        (*sock).recv_count = 0;
    }
}

// Get local port - O(1)
fn udp_get_port(sock: *mut UdpSocket) -> u16 {
    unsafe { (*sock).local_port }
}

// Check if data available - O(1)
fn udp_poll(sock: *mut UdpSocket) -> bool {
    unsafe { (*sock).recv_count > 0 }
}

// Broadcast support - bounded time
fn udp_broadcast(sock: *mut UdpSocket, data: *const u8, len: u32, 
                 port: u16) -> i32 {
    // Auto-bind if not bound
    unsafe {
        if (*sock).local_port == 0 {
            udp_bind(sock, 0, 0);
        }
    }
    
    // Send to broadcast address
    return udp_send(sock, 0xFFFFFFFF, port, data, len);
}

// Multicast support helpers
fn udp_join_multicast(sock: *mut UdpSocket, mcast_addr: IpAddr) -> i32 {
    // Multicast addresses: 224.0.0.0 - 239.255.255.255
    if (mcast_addr & 0xF0000000) != 0xE0000000 {
        return -1;  // Not a multicast address
    }
    
    // Would configure interface for multicast here
    return 0;
}

fn udp_leave_multicast(sock: *mut UdpSocket, mcast_addr: IpAddr) -> i32 {
    // Would remove multicast configuration here
    return 0;
}
// ╔═════╦═════╦═════╗
// ║ 🛡️  ║ ⚖️  ║ ⚡  ║
// ║  C  ║  E  ║  G  ║
// ╚═════╩═════╩═════╝
// ╔═════════════════╗
// ║ wcet [T∞] bound ║
// ╚═════════════════╝
//
// Author: Ignacio Peña Sepúlveda
// Date: June 25, 2025

// tcp.tempo - Deterministic TCP implementation for AtomicOS
// Provides bounded WCET TCP processing with static allocation
//
// Author: Ignacio Peña Sepúlveda
// Date: June 25, 2025

const TCP_HLEN_MIN: u32 = 20;
const TCP_HLEN_MAX: u32 = 60;
const TCP_MSS_DEFAULT: u16 = 536;
const TCP_MSS_MAX: u16 = 1460;
const TCP_WINDOW_SIZE: u16 = 8192;

// TCP flags
const TCP_FIN: u8 = 0x01;
const TCP_SYN: u8 = 0x02;
const TCP_RST: u8 = 0x04;
const TCP_PSH: u8 = 0x08;
const TCP_ACK: u8 = 0x10;
const TCP_URG: u8 = 0x20;

// TCP states
const TCP_CLOSED: u8 = 0;
const TCP_LISTEN: u8 = 1;
const TCP_SYN_SENT: u8 = 2;
const TCP_SYN_RECV: u8 = 3;
const TCP_ESTABLISHED: u8 = 4;
const TCP_FIN_WAIT1: u8 = 5;
const TCP_FIN_WAIT2: u8 = 6;
const TCP_CLOSE_WAIT: u8 = 7;
const TCP_CLOSING: u8 = 8;
const TCP_LAST_ACK: u8 = 9;
const TCP_TIME_WAIT: u8 = 10;

// TCP header structure
struct TcpHeader {
    sport: u16,
    dport: u16,
    seq: u32,
    ack: u32,
    doff_res_flags: u16,  // Data offset (4 bits), reserved (6 bits), flags (6 bits)
    window: u16,
    check: u16,
    urgent: u16,
}

// TCP connection block
const MAX_TCP_CONNECTIONS: u32 = 32;
const TCP_SEND_BUFFER_SIZE: u32 = 4096;
const TCP_RECV_BUFFER_SIZE: u32 = 4096;

struct TcpConnection {
    state: u8,
    local_addr: IpAddr,
    local_port: u16,
    remote_addr: IpAddr,
    remote_port: u16,
    
    // Sequence numbers
    snd_una: u32,    // Send unacknowledged
    snd_nxt: u32,    // Send next
    snd_wnd: u16,    // Send window
    rcv_nxt: u32,    // Receive next
    rcv_wnd: u16,    // Receive window
    
    // Deterministic congestion control
    cwnd: u16,       // Congestion window (fixed algorithm)
    ssthresh: u16,   // Slow start threshold
    rtt_est: u32,    // RTT estimate (fixed point)
    
    // Static buffers
    send_buf: [u8; TCP_SEND_BUFFER_SIZE],
    send_len: u32,
    recv_buf: [u8; TCP_RECV_BUFFER_SIZE],
    recv_len: u32,
    
    // Timers (in ticks)
    retransmit_timer: u32,
    persist_timer: u32,
    keepalive_timer: u32,
    
    valid: bool,
}

// Global TCP connection table
static mut tcp_connections: [TcpConnection; MAX_TCP_CONNECTIONS] = [{
    state: TCP_CLOSED,
    local_addr: 0,
    local_port: 0,
    remote_addr: 0,
    remote_port: 0,
    snd_una: 0,
    snd_nxt: 0,
    snd_wnd: 0,
    rcv_nxt: 0,
    rcv_wnd: TCP_WINDOW_SIZE,
    cwnd: TCP_MSS_DEFAULT,
    ssthresh: 65535,
    rtt_est: 1000,  // 1 second initial estimate
    send_buf: [0; TCP_SEND_BUFFER_SIZE],
    send_len: 0,
    recv_buf: [0; TCP_RECV_BUFFER_SIZE],
    recv_len: 0,
    retransmit_timer: 0,
    persist_timer: 0,
    keepalive_timer: 0,
    valid: false,
}; MAX_TCP_CONNECTIONS];

// TCP port allocation
static mut next_ephemeral_port: u16 = 49152;

// Initialize TCP subsystem
fn tcp_init() {
    for i in 0..MAX_TCP_CONNECTIONS {
        unsafe {
            tcp_connections[i].valid = false;
            tcp_connections[i].state = TCP_CLOSED;
        }
    }
}

// Calculate TCP checksum - bounded time
fn tcp_checksum(saddr: IpAddr, daddr: IpAddr, data: *const u8, len: u32) -> u16 {
    let mut sum: u32 = 0;
    
    // Add pseudo header
    sum += (saddr >> 16) & 0xFFFF;
    sum += saddr & 0xFFFF;
    sum += (daddr >> 16) & 0xFFFF;
    sum += daddr & 0xFFFF;
    sum += IPPROTO_TCP as u32;
    sum += len;
    
    // Add TCP header and data
    let mut i = 0;
    while i < len - 1 {
        unsafe {
            sum += (*(data + i) as u32) << 8 | (*(data + i + 1) as u32);
        }
        i += 2;
    }
    
    // Add odd byte
    if i < len {
        unsafe { sum += (*(data + i) as u32) << 8; }
    }
    
    // Fold to 16 bits
    while sum >> 16 != 0 {
        sum = (sum & 0xFFFF) + (sum >> 16);
    }
    
    return !(sum as u16);
}

// Parse TCP header - bounded time
fn tcp_parse_header(data: *const u8) -> TcpHeader {
    let hdr: TcpHeader;
    
    unsafe {
        hdr.sport = (*(data) as u16) << 8 | (*(data + 1) as u16);
        hdr.dport = (*(data + 2) as u16) << 8 | (*(data + 3) as u16);
        hdr.seq = (*(data + 4) as u32) << 24 | (*(data + 5) as u32) << 16 |
                  (*(data + 6) as u32) << 8 | (*(data + 7) as u32);
        hdr.ack = (*(data + 8) as u32) << 24 | (*(data + 9) as u32) << 16 |
                  (*(data + 10) as u32) << 8 | (*(data + 11) as u32);
        hdr.doff_res_flags = (*(data + 12) as u16) << 8 | (*(data + 13) as u16);
        hdr.window = (*(data + 14) as u16) << 8 | (*(data + 15) as u16);
        hdr.check = (*(data + 16) as u16) << 8 | (*(data + 17) as u16);
        hdr.urgent = (*(data + 18) as u16) << 8 | (*(data + 19) as u16);
    }
    
    return hdr;
}

// Build TCP header - bounded time
fn tcp_build_header(hdr: *const TcpHeader, buf: *mut u8) {
    unsafe {
        *(buf) = ((*hdr).sport >> 8) as u8;
        *(buf + 1) = (*hdr).sport as u8;
        *(buf + 2) = ((*hdr).dport >> 8) as u8;
        *(buf + 3) = (*hdr).dport as u8;
        *(buf + 4) = ((*hdr).seq >> 24) as u8;
        *(buf + 5) = ((*hdr).seq >> 16) as u8;
        *(buf + 6) = ((*hdr).seq >> 8) as u8;
        *(buf + 7) = (*hdr).seq as u8;
        *(buf + 8) = ((*hdr).ack >> 24) as u8;
        *(buf + 9) = ((*hdr).ack >> 16) as u8;
        *(buf + 10) = ((*hdr).ack >> 8) as u8;
        *(buf + 11) = (*hdr).ack as u8;
        *(buf + 12) = ((*hdr).doff_res_flags >> 8) as u8;
        *(buf + 13) = (*hdr).doff_res_flags as u8;
        *(buf + 14) = ((*hdr).window >> 8) as u8;
        *(buf + 15) = (*hdr).window as u8;
        *(buf + 16) = 0;  // Checksum placeholder
        *(buf + 17) = 0;
        *(buf + 18) = ((*hdr).urgent >> 8) as u8;
        *(buf + 19) = (*hdr).urgent as u8;
    }
}

// Find TCP connection - bounded time
fn tcp_find_connection(laddr: IpAddr, lport: u16, raddr: IpAddr, rport: u16) -> *mut TcpConnection {
    for i in 0..MAX_TCP_CONNECTIONS {
        unsafe {
            if tcp_connections[i].valid {
                if tcp_connections[i].local_addr == laddr &&
                   tcp_connections[i].local_port == lport &&
                   tcp_connections[i].remote_addr == raddr &&
                   tcp_connections[i].remote_port == rport {
                    return &mut tcp_connections[i];
                }
            }
        }
    }
    return null;
}

// Find listening socket - bounded time
fn tcp_find_listener(port: u16) -> *mut TcpConnection {
    for i in 0..MAX_TCP_CONNECTIONS {
        unsafe {
            if tcp_connections[i].valid &&
               tcp_connections[i].state == TCP_LISTEN &&
               tcp_connections[i].local_port == port {
                return &mut tcp_connections[i];
            }
        }
    }
    return null;
}

// Allocate TCP connection - bounded time
fn tcp_alloc_connection() -> *mut TcpConnection {
    for i in 0..MAX_TCP_CONNECTIONS {
        unsafe {
            if !tcp_connections[i].valid {
                tcp_connections[i].valid = true;
                tcp_connections[i].state = TCP_CLOSED;
                tcp_connections[i].send_len = 0;
                tcp_connections[i].recv_len = 0;
                tcp_connections[i].cwnd = TCP_MSS_DEFAULT;
                tcp_connections[i].ssthresh = 65535;
                tcp_connections[i].rtt_est = 1000;
                return &mut tcp_connections[i];
            }
        }
    }
    return null;
}

// Process incoming TCP packet - bounded time
fn tcp_rx_packet(data: *const u8, len: u32, saddr: IpAddr, daddr: IpAddr, 
                 frame: *mut FrameBuffer) -> i32 {
    // Validate minimum length
    if len < TCP_HLEN_MIN {
        free_frame(frame);
        return -1;
    }
    
    // Parse header
    let hdr = tcp_parse_header(data);
    let hlen = ((hdr.doff_res_flags >> 12) * 4) as u32;
    let flags = (hdr.doff_res_flags & 0x3F) as u8;
    
    // Validate header length
    if hlen < TCP_HLEN_MIN || hlen > len {
        free_frame(frame);
        return -1;
    }
    
    // Verify checksum
    let checksum = tcp_checksum(saddr, daddr, data, len);
    if checksum != 0 {
        free_frame(frame);
        return -1;
    }
    
    // Find connection
    let mut conn = tcp_find_connection(daddr, hdr.dport, saddr, hdr.sport);
    
    // Handle SYN to listening socket
    if conn == null && flags & TCP_SYN != 0 && flags & TCP_ACK == 0 {
        conn = tcp_find_listener(hdr.dport);
        if conn != null {
            // Accept connection
            let new_conn = tcp_alloc_connection();
            if new_conn != null {
                unsafe {
                    (*new_conn).local_addr = daddr;
                    (*new_conn).local_port = hdr.dport;
                    (*new_conn).remote_addr = saddr;
                    (*new_conn).remote_port = hdr.sport;
                    (*new_conn).state = TCP_SYN_RECV;
                    (*new_conn).rcv_nxt = hdr.seq + 1;
                    (*new_conn).snd_nxt = 0x12345678;  // Initial sequence number
                    (*new_conn).snd_una = (*new_conn).snd_nxt;
                }
                
                // Send SYN+ACK
                tcp_send_flags(new_conn, TCP_SYN | TCP_ACK);
                unsafe { (*new_conn).snd_nxt += 1; }
            }
        }
        free_frame(frame);
        return 0;
    }
    
    // No connection found
    if conn == null {
        // Send RST
        if flags & TCP_RST == 0 {
            tcp_send_rst(saddr, hdr.sport, daddr, hdr.dport, hdr.ack);
        }
        free_frame(frame);
        return -1;
    }
    
    // Process based on state
    unsafe {
        match (*conn).state {
            TCP_SYN_SENT => {
                if flags & TCP_SYN != 0 && flags & TCP_ACK != 0 {
                    // Connection established
                    (*conn).rcv_nxt = hdr.seq + 1;
                    (*conn).snd_una = hdr.ack;
                    (*conn).state = TCP_ESTABLISHED;
                    tcp_send_flags(conn, TCP_ACK);
                }
            },
            TCP_SYN_RECV => {
                if flags & TCP_ACK != 0 {
                    (*conn).snd_una = hdr.ack;
                    (*conn).state = TCP_ESTABLISHED;
                }
            },
            TCP_ESTABLISHED => {
                // Process data
                let data_offset = hlen;
                let data_len = len - hlen;
                
                // Check sequence number
                if hdr.seq == (*conn).rcv_nxt {
                    // Copy data to receive buffer
                    if data_len > 0 && (*conn).recv_len + data_len <= TCP_RECV_BUFFER_SIZE {
                        for i in 0..data_len {
                            (*conn).recv_buf[(*conn).recv_len + i] = *(data + data_offset + i);
                        }
                        (*conn).recv_len += data_len;
                        (*conn).rcv_nxt += data_len;
                    }
                    
                    // Send ACK
                    tcp_send_flags(conn, TCP_ACK);
                }
                
                // Process ACK
                if flags & TCP_ACK != 0 {
                    let acked = hdr.ack - (*conn).snd_una;
                    if acked > 0 && acked <= (*conn).send_len {
                        // Remove acknowledged data
                        for i in acked..(*conn).send_len {
                            (*conn).send_buf[i - acked] = (*conn).send_buf[i];
                        }
                        (*conn).send_len -= acked;
                        (*conn).snd_una = hdr.ack;
                        
                        // Update congestion window (deterministic algorithm)
                        if (*conn).cwnd < (*conn).ssthresh {
                            // Slow start
                            (*conn).cwnd += TCP_MSS_DEFAULT;
                            if (*conn).cwnd > (*conn).ssthresh {
                                (*conn).cwnd = (*conn).ssthresh;
                            }
                        } else {
                            // Congestion avoidance
                            (*conn).cwnd += TCP_MSS_DEFAULT * TCP_MSS_DEFAULT / (*conn).cwnd;
                        }
                    }
                }
                
                // Check FIN
                if flags & TCP_FIN != 0 {
                    (*conn).rcv_nxt += 1;
                    (*conn).state = TCP_CLOSE_WAIT;
                    tcp_send_flags(conn, TCP_ACK);
                }
            },
            _ => {}
        }
    }
    
    free_frame(frame);
    return 0;
}

// Send TCP segment - bounded time
fn tcp_send_segment(conn: *mut TcpConnection, data: *const u8, len: u32, 
                    flags: u8) -> i32 {
    let frame = alloc_frame();
    if frame == null {
        return -1;
    }
    
    // Build TCP header
    let hdr: TcpHeader;
    unsafe {
        hdr.sport = (*conn).local_port;
        hdr.dport = (*conn).remote_port;
        hdr.seq = (*conn).snd_nxt;
        hdr.ack = (*conn).rcv_nxt;
        hdr.doff_res_flags = (5 << 12) | flags as u16;  // No options
        hdr.window = (*conn).rcv_wnd;
        hdr.check = 0;
        hdr.urgent = 0;
    }
    
    // Build segment
    unsafe {
        let buf = (*frame).data.as_mut_ptr() + ETH_HLEN + IP_HLEN_MIN;
        tcp_build_header(&hdr, buf);
        
        // Copy data
        for i in 0..len {
            *(buf + TCP_HLEN_MIN + i) = *(data + i);
        }
        
        // Calculate checksum
        let checksum = tcp_checksum((*conn).local_addr, (*conn).remote_addr,
                                   buf, TCP_HLEN_MIN + len);
        *(buf + 16) = (checksum >> 8) as u8;
        *(buf + 17) = checksum as u8;
    }
    
    // Send via IP
    ipv4_tx_packet(unsafe { (*conn).remote_addr }, IPPROTO_TCP,
                   unsafe { (*frame).data.as_ptr() + ETH_HLEN + IP_HLEN_MIN },
                   TCP_HLEN_MIN + len);
    
    free_frame(frame);
    return 0;
}

// Send TCP flags only - bounded time
fn tcp_send_flags(conn: *mut TcpConnection, flags: u8) -> i32 {
    return tcp_send_segment(conn, null, 0, flags);
}

// Send TCP RST - bounded time
fn tcp_send_rst(saddr: IpAddr, sport: u16, daddr: IpAddr, dport: u16, 
                seq: u32) -> i32 {
    let frame = alloc_frame();
    if frame == null {
        return -1;
    }
    
    // Build RST segment
    let hdr: TcpHeader;
    hdr.sport = dport;
    hdr.dport = sport;
    hdr.seq = seq;
    hdr.ack = 0;
    hdr.doff_res_flags = (5 << 12) | TCP_RST;
    hdr.window = 0;
    hdr.check = 0;
    hdr.urgent = 0;
    
    unsafe {
        let buf = (*frame).data.as_mut_ptr() + ETH_HLEN + IP_HLEN_MIN;
        tcp_build_header(&hdr, buf);
        
        // Calculate checksum
        let checksum = tcp_checksum(daddr, saddr, buf, TCP_HLEN_MIN);
        *(buf + 16) = (checksum >> 8) as u8;
        *(buf + 17) = checksum as u8;
    }
    
    // Send via IP
    ipv4_tx_packet(saddr, IPPROTO_TCP,
                   unsafe { (*frame).data.as_ptr() + ETH_HLEN + IP_HLEN_MIN },
                   TCP_HLEN_MIN);
    
    free_frame(frame);
    return 0;
}

// TCP socket operations

// Listen on port - bounded time
fn tcp_listen(port: u16) -> *mut TcpConnection {
    let conn = tcp_alloc_connection();
    if conn == null {
        return null;
    }
    
    unsafe {
        (*conn).local_port = port;
        (*conn).state = TCP_LISTEN;
    }
    
    return conn;
}

// Connect to remote - bounded time
fn tcp_connect(addr: IpAddr, port: u16) -> *mut TcpConnection {
    let conn = tcp_alloc_connection();
    if conn == null {
        return null;
    }
    
    unsafe {
        (*conn).local_addr = local_ip;
        (*conn).local_port = next_ephemeral_port;
        next_ephemeral_port += 1;
        if next_ephemeral_port == 0 {
            next_ephemeral_port = 49152;
        }
        
        (*conn).remote_addr = addr;
        (*conn).remote_port = port;
        (*conn).state = TCP_SYN_SENT;
        (*conn).snd_nxt = 0x12345678;  // Initial sequence
        (*conn).snd_una = (*conn).snd_nxt;
    }
    
    // Send SYN
    tcp_send_flags(conn, TCP_SYN);
    unsafe { (*conn).snd_nxt += 1; }
    
    return conn;
}

// Send data - bounded time
fn tcp_send(conn: *mut TcpConnection, data: *const u8, len: u32) -> i32 {
    unsafe {
        if (*conn).state != TCP_ESTABLISHED {
            return -1;
        }
        
        // Check buffer space
        if (*conn).send_len + len > TCP_SEND_BUFFER_SIZE {
            return -1;
        }
        
        // Copy to send buffer
        for i in 0..len {
            (*conn).send_buf[(*conn).send_len + i] = *(data + i);
        }
        (*conn).send_len += len;
        
        // Send data in MSS-sized chunks
        let mut sent = 0;
        while sent < len {
            let chunk_size = if len - sent > TCP_MSS_DEFAULT as u32 {
                TCP_MSS_DEFAULT as u32
            } else {
                len - sent
            };
            
            tcp_send_segment(conn, data + sent, chunk_size, TCP_ACK | TCP_PSH);
            (*conn).snd_nxt += chunk_size;
            sent += chunk_size;
        }
    }
    
    return len as i32;
}

// Receive data - bounded time
fn tcp_recv(conn: *mut TcpConnection, buf: *mut u8, len: u32) -> i32 {
    unsafe {
        if (*conn).recv_len == 0 {
            return 0;
        }
        
        let copy_len = if (*conn).recv_len < len {
            (*conn).recv_len
        } else {
            len
        };
        
        // Copy from receive buffer
        for i in 0..copy_len {
            *(buf + i) = (*conn).recv_buf[i];
        }
        
        // Shift remaining data
        for i in copy_len..(*conn).recv_len {
            (*conn).recv_buf[i - copy_len] = (*conn).recv_buf[i];
        }
        (*conn).recv_len -= copy_len;
        
        return copy_len as i32;
    }
}

// Close connection - bounded time
fn tcp_close(conn: *mut TcpConnection) {
    unsafe {
        if (*conn).state == TCP_ESTABLISHED {
            (*conn).state = TCP_FIN_WAIT1;
            tcp_send_flags(conn, TCP_FIN | TCP_ACK);
            (*conn).snd_nxt += 1;
        } else {
            (*conn).valid = false;
            (*conn).state = TCP_CLOSED;
        }
    }
}

// Timer processing - bounded time
fn tcp_timer_tick() {
    for i in 0..MAX_TCP_CONNECTIONS {
        unsafe {
            if tcp_connections[i].valid {
                // Retransmission timer
                if tcp_connections[i].retransmit_timer > 0 {
                    tcp_connections[i].retransmit_timer -= 1;
                    if tcp_connections[i].retransmit_timer == 0 {
                        // Retransmit
                        tcp_connections[i].ssthresh = tcp_connections[i].cwnd / 2;
                        tcp_connections[i].cwnd = TCP_MSS_DEFAULT;
                    }
                }
            }
        }
    }
}
// ╔═════╦═════╦═════╗
// ║ 🛡️  ║ ⚖️  ║ ⚡  ║
// ║  C  ║  E  ║  G  ║
// ╚═════╩═════╩═════╝
// ╔═════════════════╗
// ║ wcet [T∞] bound ║
// ╚═════════════════╝
//
// Author: Ignacio Peña Sepúlveda
// Date: June 25, 2025

// AtomicOS System Call Interface
// Provides userspace access to kernel services
//
// Author: Ignacio Peña Sepúlveda
// Date: June 25, 2025
//
// All standard library functions are globally available in Tempo
// No imports needed - everything built-in for offline programming

// Error codes for deterministic error handling
const EPERM = 1    // Operation not permitted
const EFAULT = 14  // Bad address
const EINVAL = 22  // Invalid argument
const ENOSYS = 38  // Function not implemented

// System call numbers
const SYSCALL_EXIT = 0
const SYSCALL_WRITE = 1
const SYSCALL_READ = 2
const SYSCALL_OPEN = 3
const SYSCALL_CLOSE = 4
const SYSCALL_FORK = 5
const SYSCALL_EXEC = 6
const SYSCALL_WAIT = 7
const SYSCALL_GETPID = 8
const SYSCALL_MALLOC = 9
const SYSCALL_FREE = 10
const SYSCALL_YIELD = 11
const SYSCALL_SLEEP = 12

// System call handler table
var syscall_table: [32]func(u32, u32, u32) -> u32

// Initialize system call interface
func syscalls_init() {
    // Register system call handlers
    syscall_table[SYSCALL_EXIT] = sys_exit
    syscall_table[SYSCALL_WRITE] = sys_write
    syscall_table[SYSCALL_READ] = sys_read
    syscall_table[SYSCALL_OPEN] = sys_open
    syscall_table[SYSCALL_CLOSE] = sys_close
    syscall_table[SYSCALL_FORK] = sys_fork
    syscall_table[SYSCALL_EXEC] = sys_exec
    syscall_table[SYSCALL_WAIT] = sys_wait
    syscall_table[SYSCALL_GETPID] = sys_getpid
    syscall_table[SYSCALL_MALLOC] = sys_malloc
    syscall_table[SYSCALL_FREE] = sys_free
    syscall_table[SYSCALL_YIELD] = sys_yield
    syscall_table[SYSCALL_SLEEP] = sys_sleep
    
    // Set up system call interrupt handler (INT 0x80)
    set_idt_entry(0x80, syscall_handler, 0x08, 0xEE)  // User callable
}

// Main system call dispatcher with security checks
func syscall_dispatch(syscall_num: u32, arg1: u32, arg2: u32, arg3: u32) -> u32 {
    // Security: Validate syscall number
    if syscall_num >= 32 || syscall_table[syscall_num] == null {
        log_security_event("Invalid syscall attempt", syscall_num)
        return -1  // Invalid system call
    }
    
    // Security: Check if process has permission for this syscall
    if !check_syscall_permission(get_current_pid(), syscall_num) {
        log_security_event("Permission denied for syscall", syscall_num)
        return -EPERM
    }
    
    // Security: Validate userspace pointers before access
    if requires_user_pointer_validation(syscall_num) {
        if !validate_user_pointers(syscall_num, arg1, arg2, arg3) {
            log_security_event("Invalid user pointer in syscall", syscall_num)
            return -EFAULT
        }
    }
    
    // Call the appropriate handler with bounds checking
    return syscall_table[syscall_num](arg1, arg2, arg3)
}

// System call implementations

// Exit current process
func sys_exit(status: u32, arg2: u32, arg3: u32) -> u32 {
    let pid = get_current_pid()
    terminate_process(pid)
    return 0  // Never reached
}

// Write to file descriptor (simplified - only stdout/VGA for now)
func sys_write(fd: u32, buffer: u32, count: u32) -> u32 {
    if fd != 1 {  // Only stdout supported for now
        return -1
    }
    
    let buf = buffer as *u8
    var written: u32 = 0
    
    for i in 0..count {
        let ch = buf[i]
        if ch == 0 {
            break
        }
        vga_putchar(ch)
        written += 1
    }
    
    return written
}

// Read from file descriptor (stub)
func sys_read(fd: u32, buffer: u32, count: u32) -> u32 {
    // TODO: Implement when we have keyboard input
    return 0
}

// Open file (stub)
func sys_open(path: u32, flags: u32, mode: u32) -> u32 {
    // TODO: Implement when we have a filesystem
    return -1
}

// Close file descriptor (stub)
func sys_close(fd: u32, arg2: u32, arg3: u32) -> u32 {
    // TODO: Implement when we have a filesystem
    return -1
}

// Fork process (stub)
func sys_fork(arg1: u32, arg2: u32, arg3: u32) -> u32 {
    // TODO: Implement process forking
    return -1
}

// Execute program (stub)
func sys_exec(path: u32, argv: u32, envp: u32) -> u32 {
    // TODO: Implement program execution
    return -1
}

// Wait for child process (stub)
func sys_wait(status: u32, arg2: u32, arg3: u32) -> u32 {
    // TODO: Implement process waiting
    return -1
}

// Get current process ID
func sys_getpid(arg1: u32, arg2: u32, arg3: u32) -> u32 {
    return get_current_pid()
}

// Allocate memory
func sys_malloc(size: u32, arg2: u32, arg3: u32) -> u32 {
    // Simple page-based allocation for now
    if size == 0 || size > 4096 {
        return 0
    }
    
    return allocate_page()
}

// Free memory
func sys_free(addr: u32, arg2: u32, arg3: u32) -> u32 {
    free_page(addr)
    return 0
}

// Yield CPU time
func sys_yield(arg1: u32, arg2: u32, arg3: u32) -> u32 {
    yield()
    return 0
}

// Sleep for milliseconds (simplified)
func sys_sleep(ms: u32, arg2: u32, arg3: u32) -> u32 {
    // TODO: Implement proper sleep with timer
    // For now, just yield
    yield()
    return 0
}

// Security helper functions

// Check if process has permission for syscall
func check_syscall_permission(pid: u32, syscall_num: u32) -> bool {
    // For now, all processes can make all syscalls
    // TODO: Implement capability-based security model
    return true
}

// Check if syscall requires pointer validation
func requires_user_pointer_validation(syscall_num: u32) -> bool {
    return syscall_num == SYSCALL_WRITE || 
           syscall_num == SYSCALL_READ ||
           syscall_num == SYSCALL_OPEN ||
           syscall_num == SYSCALL_EXEC
}

// Validate user-space pointers for safety
func validate_user_pointers(syscall_num: u32, arg1: u32, arg2: u32, arg3: u32) -> bool {
    match syscall_num {
        SYSCALL_WRITE | SYSCALL_READ => {
            // Validate buffer pointer
            return is_valid_user_pointer(arg2, arg3)
        }
        SYSCALL_OPEN => {
            // Validate path string pointer
            return is_valid_user_string(arg1)
        }
        SYSCALL_EXEC => {
            // Validate executable path
            return is_valid_user_string(arg1)
        }
        _ => true
    }
}

// Check if pointer points to valid user memory
func is_valid_user_pointer(addr: u32, size: u32) -> bool {
    // User space is below 0xC0000000 in our memory model
    return addr < 0xC0000000 && addr + size < 0xC0000000
}

// Check if pointer points to valid null-terminated string
func is_valid_user_string(addr: u32) -> bool {
    if addr >= 0xC0000000 {
        return false
    }
    
    // Check string is null-terminated within reasonable bounds
    let max_len = 4096u32
    let str_ptr = addr as *u8
    for i in 0..max_len {
        if str_ptr[i] == 0 {
            return true
        }
    }
    return false
}

// Log security events for auditing
func log_security_event(event: string, syscall: u32) {
    // TODO: Implement security logging
    print("[SECURITY] ", event, " syscall=", syscall, " pid=", get_current_pid())
}

// Assembly stubs
extern func syscall_handler()
extern func set_idt_entry(index: u8, handler: func(), selector: u16, type_attr: u8)
extern func get_current_pid() -> u32
extern func terminate_process(pid: u32)
// ╔═════╦═════╦═════╗
// ║ 🛡️  ║ ⚖️  ║ ⚡  ║
// ║  C  ║  E  ║  G  ║
// ╚═════╩═════╩═════╝
// ╔═════════════════╗
// ║ wcet [T∞] bound ║
// ╚═════════════════╝
//
// Author: Ignacio Peña Sepúlveda
// Date: June 25, 2025

// AtomicOS Kernel Main Initialization
// Implements kernel boot sequence and main loop

module kernel.init.main

import kernel.process.process
import kernel.process.scheduler
import kernel.memory.pmm
import kernel.memory.vmm
import kernel.ipc.channels
import kernel.drivers.timer
import kernel.drivers.keyboard

// Boot information structure
struct BootInfo {
    memory_map: []MemoryRegion
    total_memory: u64
    kernel_start: usize
    kernel_end: usize
    boot_time: u64
}

// Memory region descriptor
struct MemoryRegion {
    base: u64
    size: u64
    region_type: MemoryType
}

enum MemoryType {
    Available
    Reserved
    Kernel
    ACPI
    NVS
}

// Global kernel state
global kernel_state: KernelState

struct KernelState {
    boot_info: BootInfo
    scheduler: *Scheduler
    pmm: *PhysicalMemoryManager
    vmm: *VirtualMemoryManager
    channel_system: *ChannelSystem
    timer: *TimerDriver
    keyboard: *KeyboardDriver
    panic_handler: fn(string)
    initialized: bool
}

// Kernel entry point from bootloader
@export @noreturn
fn kernel_main(boot_info: *BootInfo) {
    // Disable interrupts during initialization
    disable_interrupts()
    
    // Initialize kernel state
    kernel_state.boot_info = *boot_info
    kernel_state.initialized = false
    kernel_state.panic_handler = default_panic_handler
    
    // Early console initialization for debugging
    init_early_console()
    kprint("AtomicOS Kernel v0.1.0 initializing...\n")
    
    // Initialize critical subsystems in order
    init_memory_management()
    init_interrupt_handlers()
    init_process_management()
    init_drivers()
    init_ipc_system()
    
    // Enable interrupts
    enable_interrupts()
    
    // Mark kernel as initialized
    kernel_state.initialized = true
    kprint("Kernel initialization complete\n")
    
    // Create init process
    create_init_process()
    
    // Enter scheduler main loop
    scheduler_main_loop()
}

// Initialize memory management subsystems
fn init_memory_management() {
    kprint("Initializing memory management...\n")
    
    // Initialize physical memory manager
    kernel_state.pmm = pmm.init(&kernel_state.boot_info.memory_map)
    
    // Initialize virtual memory manager
    kernel_state.vmm = vmm.init(kernel_state.pmm)
    
    // Set up kernel page tables
    setup_kernel_page_tables()
    
    kprint("Memory management initialized\n")
}

// Set up kernel virtual memory mappings
fn setup_kernel_page_tables() {
    let kernel_start = kernel_state.boot_info.kernel_start
    let kernel_end = kernel_state.boot_info.kernel_end
    let kernel_size = kernel_end - kernel_start
    
    // Map kernel code and data
    kernel_state.vmm.map_range(
        kernel_start,
        kernel_start,  // Identity map for now
        kernel_size,
        VMM_FLAG_PRESENT | VMM_FLAG_WRITABLE | VMM_FLAG_KERNEL
    )
    
    // Map VGA buffer for console
    kernel_state.vmm.map_range(
        0xB8000,
        0xB8000,
        4096,
        VMM_FLAG_PRESENT | VMM_FLAG_WRITABLE | VMM_FLAG_KERNEL
    )
}

// Initialize interrupt handling
fn init_interrupt_handlers() {
    kprint("Setting up interrupt handlers...\n")
    
    // Set up IDT
    setup_idt()
    
    // Install default handlers
    install_exception_handlers()
    install_irq_handlers()
    
    // Set up system call handler
    install_syscall_handler()
    
    kprint("Interrupt handlers installed\n")
}

// Initialize process management
fn init_process_management() {
    kprint("Initializing process management...\n")
    
    // Initialize process subsystem
    process.init()
    
    // Initialize scheduler
    kernel_state.scheduler = scheduler.init()
    
    kprint("Process management initialized\n")
}

// Initialize device drivers
fn init_drivers() {
    kprint("Initializing device drivers...\n")
    
    // Initialize timer
    kernel_state.timer = timer.init()
    kernel_state.timer.set_frequency(1000)  // 1000 Hz = 1ms resolution
    
    // Initialize keyboard
    kernel_state.keyboard = keyboard.init()
    
    kprint("Device drivers initialized\n")
}

// Initialize IPC system
fn init_ipc_system() {
    kprint("Initializing IPC system...\n")
    
    kernel_state.channel_system = channels.init()
    
    kprint("IPC system initialized\n")
}

// Create the init process
fn create_init_process() {
    kprint("Creating init process...\n")
    
    let init_proc = process.create("init", init_process_main)
    init_proc.priority = PRIORITY_HIGH
    
    kernel_state.scheduler.add_process(init_proc)
    
    kprint("Init process created\n")
}

// Init process main function
fn init_process_main() {
    kprint("[init] Init process started\n")
    
    // Start essential system services
    start_memory_service()
    start_filesystem_service()
    start_network_service()
    
    // Enter init main loop
    loop {
        // Monitor system health
        check_system_health()
        
        // Reap zombie processes
        reap_zombies()
        
        // Sleep for a bit
        process.sleep(100)  // 100ms
    }
}

// Start memory management service
fn start_memory_service() {
    let mem_proc = process.create("memory_service", memory_service_main)
    mem_proc.priority = PRIORITY_HIGH
    kernel_state.scheduler.add_process(mem_proc)
}

// Start filesystem service
fn start_filesystem_service() {
    let fs_proc = process.create("fs_service", fs_service_main)
    fs_proc.priority = PRIORITY_NORMAL
    kernel_state.scheduler.add_process(fs_proc)
}

// Start network service
fn start_network_service() {
    let net_proc = process.create("net_service", net_service_main)
    net_proc.priority = PRIORITY_NORMAL
    kernel_state.scheduler.add_process(net_proc)
}

// Placeholder service main functions
fn memory_service_main() {
    loop {
        // Handle memory allocation requests
        process.sleep(10)
    }
}

fn fs_service_main() {
    loop {
        // Handle filesystem requests
        process.sleep(10)
    }
}

fn net_service_main() {
    loop {
        // Handle network requests
        process.sleep(10)
    }
}

// Check overall system health
fn check_system_health() {
    // Check memory usage
    let free_mem = kernel_state.pmm.get_free_memory()
    let total_mem = kernel_state.boot_info.total_memory
    let usage_percent = ((total_mem - free_mem) * 100) / total_mem
    
    if usage_percent > 90 {
        kprint("[warning] High memory usage: %d%%\n", usage_percent)
    }
    
    // Check process count
    let proc_count = kernel_state.scheduler.get_process_count()
    if proc_count > 1000 {
        kprint("[warning] High process count: %d\n", proc_count)
    }
}

// Clean up zombie processes
fn reap_zombies() {
    let zombies = kernel_state.scheduler.get_zombie_processes()
    
    for zombie in zombies {
        process.cleanup(zombie)
        kernel_state.scheduler.remove_process(zombie.pid)
    }
}

// Main scheduler loop
@noreturn
fn scheduler_main_loop() {
    kprint("Entering scheduler main loop\n")
    
    loop {
        // Let scheduler pick next process
        let next_proc = kernel_state.scheduler.schedule()
        
        if next_proc != null {
            // Switch to selected process
            process.switch_to(next_proc)
        } else {
            // No runnable processes, idle
            idle()
        }
    }
}

// Idle when no processes are runnable
fn idle() {
    // Enable interrupts and halt until next interrupt
    enable_interrupts()
    halt()
}

// Early console output
fn init_early_console() {
    // Simple VGA text mode console
    // Assumes 80x25 text mode at 0xB8000
}

// Kernel print function
fn kprint(format: string, args: ...) {
    // Format and print to console
    let buffer = format_string(format, args)
    console_write(buffer)
}

// Console write
fn console_write(text: string) {
    static cursor_x: u8 = 0
    static cursor_y: u8 = 0
    
    let vga_buffer = 0xB8000 as *u16
    
    for char in text {
        if char == '\n' {
            cursor_x = 0
            cursor_y++
            if cursor_y >= 25 {
                scroll_console()
                cursor_y = 24
            }
        } else {
            let offset = (cursor_y * 80 + cursor_x) as usize
            vga_buffer[offset] = (0x07 << 8) | (char as u16)  // White on black
            cursor_x++
            if cursor_x >= 80 {
                cursor_x = 0
                cursor_y++
                if cursor_y >= 25 {
                    scroll_console()
                    cursor_y = 24
                }
            }
        }
    }
}

// Scroll console up one line
fn scroll_console() {
    let vga_buffer = 0xB8000 as *u16
    
    // Copy lines 1-24 to lines 0-23
    for y in 0..24 {
        for x in 0..80 {
            let src_offset = ((y + 1) * 80 + x) as usize
            let dst_offset = (y * 80 + x) as usize
            vga_buffer[dst_offset] = vga_buffer[src_offset]
        }
    }
    
    // Clear last line
    for x in 0..80 {
        let offset = (24 * 80 + x) as usize
        vga_buffer[offset] = (0x07 << 8) | 0x20  // Space character
    }
}

// Default panic handler
fn default_panic_handler(message: string) {
    disable_interrupts()
    
    kprint("\n!!! KERNEL PANIC !!!\n")
    kprint("Message: %s\n", message)
    kprint("Halting system...\n")
    
    // Dump registers and stack trace if available
    dump_registers()
    dump_stack_trace()
    
    // Halt forever
    loop {
        halt()
    }
}

// Kernel panic function
@export
fn kernel_panic(message: string) {
    kernel_state.panic_handler(message)
}

// Assembly stubs
@extern fn disable_interrupts()
@extern fn enable_interrupts()
@extern fn halt()
@extern fn setup_idt()
@extern fn install_exception_handlers()
@extern fn install_irq_handlers()
@extern fn install_syscall_handler()
@extern fn dump_registers()
@extern fn dump_stack_trace()

// Priority levels
const PRIORITY_IDLE = 0
const PRIORITY_LOW = 1
const PRIORITY_NORMAL = 2
const PRIORITY_HIGH = 3
const PRIORITY_REALTIME = 4

// VMM flags
const VMM_FLAG_PRESENT = 1 << 0
const VMM_FLAG_WRITABLE = 1 << 1
const VMM_FLAG_USER = 1 << 2
const VMM_FLAG_KERNEL = 1 << 3
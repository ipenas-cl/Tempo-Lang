// ╔═════╦═════╦═════╗
// ║ 🛡️  ║ ⚖️  ║ ⚡  ║
// ║  C  ║  E  ║  G  ║
// ╚═════╩═════╩═════╝
// ╔═════════════════╗
// ║ wcet [T∞] bound ║
// ╚═════════════════╝
//
// Author: Ignacio Peña Sepúlveda
// Date: June 25, 2025

// std/strings.tempo - String operations with WCET bounds
// Provides string manipulation functions with bounded execution time

module std::strings

// String builder for efficient string construction
struct Builder {
    data: Vec<u8>
    capacity: usize
}

// String iterator
struct Chars {
    data: &[u8]
    pos: usize
}

// Split iterator
struct Split {
    data: &[u8]
    delimiter: &[u8]
    pos: usize
    done: bool
}

// Error types
enum StringError {
    InvalidUtf8
    IndexOutOfBounds
    InvalidArgument
}

type Result<T> = union { Ok(T), Err(StringError) }

// Constants
const MAX_STRING_SIZE: usize = 1 << 30  // 1GB max string size

// Basic string operations
fn len(s: string) -> usize {
    return s.len()
}

fn is_empty(s: string) -> bool {
    return s.len() == 0
}

fn from_bytes(bytes: &[u8]) -> Result<string> {
    // Validate UTF-8
    if !is_valid_utf8(bytes) {
        return Err(StringError::InvalidUtf8)
    }
    return Ok(@string_from_bytes(bytes))
}

fn to_bytes(s: string) -> &[u8] {
    return @string_to_bytes(s)
}

// Character operations
fn char_at(s: string, index: usize) -> Result<char> {
    let bytes = to_bytes(s)
    if index >= bytes.len() {
        return Err(StringError::IndexOutOfBounds)
    }
    
    // Handle UTF-8 decoding
    let b = bytes[index]
    if b < 0x80 {
        return Ok(b as char)
    }
    
    // Multi-byte character
    let (ch, _) = decode_utf8_char(bytes, index)?
    return Ok(ch)
}

fn chars(s: string) -> Chars {
    return Chars {
        data: to_bytes(s),
        pos: 0
    }
}

fn chars_next(iter: &mut Chars) -> Option<char> {
    if iter.pos >= iter.data.len() {
        return None
    }
    
    let (ch, size) = decode_utf8_char(iter.data, iter.pos).ok()?
    iter.pos += size
    return Some(ch)
}

// Comparison operations
fn equals(s1: string, s2: string) -> bool {
    let b1 = to_bytes(s1)
    let b2 = to_bytes(s2)
    
    if b1.len() != b2.len() {
        return false
    }
    
    for i in 0..b1.len() {
        if b1[i] != b2[i] {
            return false
        }
    }
    
    return true
}

fn compare(s1: string, s2: string) -> i32 {
    let b1 = to_bytes(s1)
    let b2 = to_bytes(s2)
    
    let min_len = if b1.len() < b2.len() { b1.len() } else { b2.len() }
    
    for i in 0..min_len {
        if b1[i] < b2[i] {
            return -1
        } else if b1[i] > b2[i] {
            return 1
        }
    }
    
    if b1.len() < b2.len() {
        return -1
    } else if b1.len() > b2.len() {
        return 1
    } else {
        return 0
    }
}

fn starts_with(s: string, prefix: string) -> bool {
    let s_bytes = to_bytes(s)
    let prefix_bytes = to_bytes(prefix)
    
    if prefix_bytes.len() > s_bytes.len() {
        return false
    }
    
    for i in 0..prefix_bytes.len() {
        if s_bytes[i] != prefix_bytes[i] {
            return false
        }
    }
    
    return true
}

fn ends_with(s: string, suffix: string) -> bool {
    let s_bytes = to_bytes(s)
    let suffix_bytes = to_bytes(suffix)
    
    if suffix_bytes.len() > s_bytes.len() {
        return false
    }
    
    let offset = s_bytes.len() - suffix_bytes.len()
    
    for i in 0..suffix_bytes.len() {
        if s_bytes[offset + i] != suffix_bytes[i] {
            return false
        }
    }
    
    return true
}

fn contains(s: string, substr: string) -> bool {
    return index_of(s, substr) >= 0
}

// Search operations
fn index_of(s: string, substr: string) -> i32 {
    let s_bytes = to_bytes(s)
    let substr_bytes = to_bytes(substr)
    
    if substr_bytes.len() == 0 {
        return 0
    }
    
    if substr_bytes.len() > s_bytes.len() {
        return -1
    }
    
    // Simple search algorithm with bounded time
    let limit = s_bytes.len() - substr_bytes.len() + 1
    
    for i in 0..limit {
        let mut match = true
        for j in 0..substr_bytes.len() {
            if s_bytes[i + j] != substr_bytes[j] {
                match = false
                break
            }
        }
        if match {
            return i as i32
        }
    }
    
    return -1
}

fn last_index_of(s: string, substr: string) -> i32 {
    let s_bytes = to_bytes(s)
    let substr_bytes = to_bytes(substr)
    
    if substr_bytes.len() == 0 {
        return s_bytes.len() as i32
    }
    
    if substr_bytes.len() > s_bytes.len() {
        return -1
    }
    
    // Search backwards
    let limit = s_bytes.len() - substr_bytes.len() + 1
    
    for i in (0..limit).rev() {
        let mut match = true
        for j in 0..substr_bytes.len() {
            if s_bytes[i + j] != substr_bytes[j] {
                match = false
                break
            }
        }
        if match {
            return i as i32
        }
    }
    
    return -1
}

fn count(s: string, substr: string) -> usize {
    if is_empty(substr) {
        return 0
    }
    
    let s_bytes = to_bytes(s)
    let substr_bytes = to_bytes(substr)
    let mut count = 0
    let mut pos = 0
    
    while pos <= s_bytes.len() - substr_bytes.len() {
        let mut match = true
        for j in 0..substr_bytes.len() {
            if s_bytes[pos + j] != substr_bytes[j] {
                match = false
                break
            }
        }
        if match {
            count += 1
            pos += substr_bytes.len()
        } else {
            pos += 1
        }
    }
    
    return count
}

// Substring operations
fn substring(s: string, start: usize, end: usize) -> Result<string> {
    let bytes = to_bytes(s)
    
    if start > end || end > bytes.len() {
        return Err(StringError::IndexOutOfBounds)
    }
    
    return from_bytes(&bytes[start..end])
}

fn slice(s: string, start: usize) -> Result<string> {
    return substring(s, start, len(s))
}

// Case operations
fn to_lower(s: string) -> string {
    let mut builder = builder_new()
    let mut iter = chars(s)
    
    while let Some(ch) = chars_next(&mut iter) {
        builder_write_char(&mut builder, to_lower_char(ch))
    }
    
    return builder_to_string(&builder)
}

fn to_upper(s: string) -> string {
    let mut builder = builder_new()
    let mut iter = chars(s)
    
    while let Some(ch) = chars_next(&mut iter) {
        builder_write_char(&mut builder, to_upper_char(ch))
    }
    
    return builder_to_string(&builder)
}

fn to_lower_char(ch: char) -> char {
    if ch >= 'A' && ch <= 'Z' {
        return (ch as u32 + 32) as char
    }
    return ch
}

fn to_upper_char(ch: char) -> char {
    if ch >= 'a' && ch <= 'z' {
        return (ch as u32 - 32) as char
    }
    return ch
}

// Trim operations
fn trim(s: string) -> string {
    return trim_func(s, is_whitespace)
}

fn trim_left(s: string) -> string {
    return trim_left_func(s, is_whitespace)
}

fn trim_right(s: string) -> string {
    return trim_right_func(s, is_whitespace)
}

fn trim_func(s: string, f: fn(char) -> bool) -> string {
    return trim_right_func(trim_left_func(s, f), f)
}

fn trim_left_func(s: string, f: fn(char) -> bool) -> string {
    let bytes = to_bytes(s)
    let mut start = 0
    
    let mut iter = chars(s)
    while let Some(ch) = chars_next(&mut iter) {
        if !f(ch) {
            break
        }
        start = iter.pos
    }
    
    if start == bytes.len() {
        return ""
    }
    
    return slice(s, start).unwrap()
}

fn trim_right_func(s: string, f: fn(char) -> bool) -> string {
    let bytes = to_bytes(s)
    let mut end = bytes.len()
    
    // Find last non-trimmed character
    let mut iter = chars(s)
    let mut positions: Vec<usize> = vec![]
    
    while let Some(ch) = chars_next(&mut iter) {
        if !f(ch) {
            positions.clear()
        }
        positions.push(iter.pos)
    }
    
    if positions.len() > 0 {
        end = positions[0]
    }
    
    return substring(s, 0, end).unwrap()
}

// Split operations
fn split(s: string, delimiter: string) -> Vec<string> {
    let mut result: Vec<string> = vec![]
    
    if is_empty(delimiter) {
        result.push(s)
        return result
    }
    
    let s_bytes = to_bytes(s)
    let delim_bytes = to_bytes(delimiter)
    let mut start = 0
    let mut pos = 0
    
    while pos <= s_bytes.len() - delim_bytes.len() {
        let mut match = true
        for j in 0..delim_bytes.len() {
            if s_bytes[pos + j] != delim_bytes[j] {
                match = false
                break
            }
        }
        
        if match {
            result.push(substring(s, start, pos).unwrap())
            pos += delim_bytes.len()
            start = pos
        } else {
            pos += 1
        }
    }
    
    // Add remaining part
    result.push(substring(s, start, s_bytes.len()).unwrap())
    
    return result
}

fn split_n(s: string, delimiter: string, n: usize) -> Vec<string> {
    let mut result: Vec<string> = vec![]
    
    if n == 0 {
        return result
    }
    
    if is_empty(delimiter) || n == 1 {
        result.push(s)
        return result
    }
    
    let s_bytes = to_bytes(s)
    let delim_bytes = to_bytes(delimiter)
    let mut start = 0
    let mut pos = 0
    let mut count = 0
    
    while pos <= s_bytes.len() - delim_bytes.len() && count < n - 1 {
        let mut match = true
        for j in 0..delim_bytes.len() {
            if s_bytes[pos + j] != delim_bytes[j] {
                match = false
                break
            }
        }
        
        if match {
            result.push(substring(s, start, pos).unwrap())
            pos += delim_bytes.len()
            start = pos
            count += 1
        } else {
            pos += 1
        }
    }
    
    // Add remaining part
    result.push(substring(s, start, s_bytes.len()).unwrap())
    
    return result
}

// Join operations
fn join(parts: &[string], separator: string) -> string {
    if parts.len() == 0 {
        return ""
    }
    
    let mut builder = builder_new()
    
    for i in 0..parts.len() {
        builder_write_string(&mut builder, parts[i])
        if i < parts.len() - 1 {
            builder_write_string(&mut builder, separator)
        }
    }
    
    return builder_to_string(&builder)
}

// Replace operations
fn replace(s: string, old: string, new: string) -> string {
    return replace_n(s, old, new, -1)
}

fn replace_n(s: string, old: string, new: string, n: i32) -> string {
    if is_empty(old) || n == 0 {
        return s
    }
    
    let mut builder = builder_new()
    let s_bytes = to_bytes(s)
    let old_bytes = to_bytes(old)
    let mut pos = 0
    let mut count = 0
    
    while pos < s_bytes.len() {
        if pos <= s_bytes.len() - old_bytes.len() && (n < 0 || count < n) {
            let mut match = true
            for j in 0..old_bytes.len() {
                if s_bytes[pos + j] != old_bytes[j] {
                    match = false
                    break
                }
            }
            
            if match {
                builder_write_string(&mut builder, new)
                pos += old_bytes.len()
                count += 1
                continue
            }
        }
        
        builder_write_byte(&mut builder, s_bytes[pos])
        pos += 1
    }
    
    return builder_to_string(&builder)
}

// Repeat operations
fn repeat(s: string, count: usize) -> string {
    if count == 0 || is_empty(s) {
        return ""
    }
    
    let mut builder = builder_with_capacity(len(s) * count)
    
    for _ in 0..count {
        builder_write_string(&mut builder, s)
    }
    
    return builder_to_string(&builder)
}

// Padding operations
fn pad_left(s: string, width: usize, pad_char: char) -> string {
    let s_len = len(s)
    if s_len >= width {
        return s
    }
    
    let padding = width - s_len
    let mut builder = builder_with_capacity(width)
    
    for _ in 0..padding {
        builder_write_char(&mut builder, pad_char)
    }
    builder_write_string(&mut builder, s)
    
    return builder_to_string(&builder)
}

fn pad_right(s: string, width: usize, pad_char: char) -> string {
    let s_len = len(s)
    if s_len >= width {
        return s
    }
    
    let padding = width - s_len
    let mut builder = builder_with_capacity(width)
    
    builder_write_string(&mut builder, s)
    for _ in 0..padding {
        builder_write_char(&mut builder, pad_char)
    }
    
    return builder_to_string(&builder)
}

fn pad_center(s: string, width: usize, pad_char: char) -> string {
    let s_len = len(s)
    if s_len >= width {
        return s
    }
    
    let total_padding = width - s_len
    let left_padding = total_padding / 2
    let right_padding = total_padding - left_padding
    
    let mut builder = builder_with_capacity(width)
    
    for _ in 0..left_padding {
        builder_write_char(&mut builder, pad_char)
    }
    builder_write_string(&mut builder, s)
    for _ in 0..right_padding {
        builder_write_char(&mut builder, pad_char)
    }
    
    return builder_to_string(&builder)
}

// String builder operations
fn builder_new() -> Builder {
    return Builder {
        data: vec![],
        capacity: 0
    }
}

fn builder_with_capacity(cap: usize) -> Builder {
    return Builder {
        data: vec![],
        capacity: cap
    }
}

fn builder_write_string(b: &mut Builder, s: string) {
    let bytes = to_bytes(s)
    for i in 0..bytes.len() {
        b.data.push(bytes[i])
    }
}

fn builder_write_char(b: &mut Builder, ch: char) {
    let bytes = encode_utf8_char(ch)
    for i in 0..bytes.len() {
        b.data.push(bytes[i])
    }
}

fn builder_write_byte(b: &mut Builder, byte: u8) {
    b.data.push(byte)
}

fn builder_write_bytes(b: &mut Builder, bytes: &[u8]) {
    for i in 0..bytes.len() {
        b.data.push(bytes[i])
    }
}

fn builder_len(b: &Builder) -> usize {
    return b.data.len()
}

fn builder_clear(b: &mut Builder) {
    b.data.clear()
}

fn builder_to_string(b: &Builder) -> string {
    return from_bytes(&b.data[..]).unwrap()
}

// Character classification
fn is_whitespace(ch: char) -> bool {
    return ch == ' ' || ch == '\t' || ch == '\n' || ch == '\r' ||
           ch == '\x0B' || ch == '\x0C'
}

fn is_digit(ch: char) -> bool {
    return ch >= '0' && ch <= '9'
}

fn is_alpha(ch: char) -> bool {
    return (ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z')
}

fn is_alphanumeric(ch: char) -> bool {
    return is_alpha(ch) || is_digit(ch)
}

fn is_upper(ch: char) -> bool {
    return ch >= 'A' && ch <= 'Z'
}

fn is_lower(ch: char) -> bool {
    return ch >= 'a' && ch <= 'z'
}

// UTF-8 helpers
fn is_valid_utf8(bytes: &[u8]) -> bool {
    let mut i = 0
    
    while i < bytes.len() {
        let b = bytes[i]
        
        if b < 0x80 {
            i += 1
        } else if b < 0xC0 {
            return false  // Invalid start byte
        } else if b < 0xE0 {
            if i + 1 >= bytes.len() || bytes[i + 1] & 0xC0 != 0x80 {
                return false
            }
            i += 2
        } else if b < 0xF0 {
            if i + 2 >= bytes.len() ||
               bytes[i + 1] & 0xC0 != 0x80 ||
               bytes[i + 2] & 0xC0 != 0x80 {
                return false
            }
            i += 3
        } else if b < 0xF8 {
            if i + 3 >= bytes.len() ||
               bytes[i + 1] & 0xC0 != 0x80 ||
               bytes[i + 2] & 0xC0 != 0x80 ||
               bytes[i + 3] & 0xC0 != 0x80 {
                return false
            }
            i += 4
        } else {
            return false  // Invalid UTF-8
        }
    }
    
    return true
}

fn decode_utf8_char(bytes: &[u8], pos: usize) -> Result<(char, usize)> {
    if pos >= bytes.len() {
        return Err(StringError::IndexOutOfBounds)
    }
    
    let b = bytes[pos]
    
    if b < 0x80 {
        return Ok((b as char, 1))
    } else if b < 0xC0 {
        return Err(StringError::InvalidUtf8)
    } else if b < 0xE0 {
        if pos + 1 >= bytes.len() {
            return Err(StringError::InvalidUtf8)
        }
        let ch = ((b & 0x1F) as u32 << 6) | (bytes[pos + 1] & 0x3F) as u32
        return Ok((ch as char, 2))
    } else if b < 0xF0 {
        if pos + 2 >= bytes.len() {
            return Err(StringError::InvalidUtf8)
        }
        let ch = ((b & 0x0F) as u32 << 12) |
                 ((bytes[pos + 1] & 0x3F) as u32 << 6) |
                 (bytes[pos + 2] & 0x3F) as u32
        return Ok((ch as char, 3))
    } else if b < 0xF8 {
        if pos + 3 >= bytes.len() {
            return Err(StringError::InvalidUtf8)
        }
        let ch = ((b & 0x07) as u32 << 18) |
                 ((bytes[pos + 1] & 0x3F) as u32 << 12) |
                 ((bytes[pos + 2] & 0x3F) as u32 << 6) |
                 (bytes[pos + 3] & 0x3F) as u32
        return Ok((ch as char, 4))
    }
    
    return Err(StringError::InvalidUtf8)
}

fn encode_utf8_char(ch: char) -> Vec<u8> {
    let code = ch as u32
    let mut result: Vec<u8> = vec![]
    
    if code < 0x80 {
        result.push(code as u8)
    } else if code < 0x800 {
        result.push((0xC0 | (code >> 6)) as u8)
        result.push((0x80 | (code & 0x3F)) as u8)
    } else if code < 0x10000 {
        result.push((0xE0 | (code >> 12)) as u8)
        result.push((0x80 | ((code >> 6) & 0x3F)) as u8)
        result.push((0x80 | (code & 0x3F)) as u8)
    } else {
        result.push((0xF0 | (code >> 18)) as u8)
        result.push((0x80 | ((code >> 12) & 0x3F)) as u8)
        result.push((0x80 | ((code >> 6) & 0x3F)) as u8)
        result.push((0x80 | (code & 0x3F)) as u8)
    }
    
    return result
}

// Parsing helpers
fn parse_i32(s: string) -> Result<i32> {
    let bytes = to_bytes(s)
    if bytes.len() == 0 {
        return Err(StringError::InvalidArgument)
    }
    
    let mut result: i32 = 0
    let mut sign = 1
    let mut start = 0
    
    if bytes[0] == '-' {
        sign = -1
        start = 1
    } else if bytes[0] == '+' {
        start = 1
    }
    
    if start >= bytes.len() {
        return Err(StringError::InvalidArgument)
    }
    
    for i in start..bytes.len() {
        if bytes[i] < '0' || bytes[i] > '9' {
            return Err(StringError::InvalidArgument)
        }
        
        let digit = (bytes[i] - '0') as i32
        
        // Check for overflow
        if result > (i32::MAX - digit) / 10 {
            return Err(StringError::InvalidArgument)
        }
        
        result = result * 10 + digit
    }
    
    return Ok(result * sign)
}

fn parse_u32(s: string) -> Result<u32> {
    let bytes = to_bytes(s)
    if bytes.len() == 0 {
        return Err(StringError::InvalidArgument)
    }
    
    let mut result: u32 = 0
    
    for i in 0..bytes.len() {
        if bytes[i] < '0' || bytes[i] > '9' {
            return Err(StringError::InvalidArgument)
        }
        
        let digit = (bytes[i] - '0') as u32
        
        // Check for overflow
        if result > (u32::MAX - digit) / 10 {
            return Err(StringError::InvalidArgument)
        }
        
        result = result * 10 + digit
    }
    
    return Ok(result)
}

fn parse_u8(s: string) -> Result<u8> {
    let u = parse_u32(s)?
    if u > 255 {
        return Err(StringError::InvalidArgument)
    }
    return Ok(u as u8)
}

fn parse_u16(s: string) -> Result<u16> {
    let u = parse_u32(s)?
    if u > 65535 {
        return Err(StringError::InvalidArgument)
    }
    return Ok(u as u16)
}
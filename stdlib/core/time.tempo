// ╔═════╦═════╦═════╗
// ║ 🛡️  ║ ⚖️  ║ ⚡  ║
// ║  C  ║  E  ║  G  ║
// ╚═════╩═════╩═════╝
// ╔═════════════════╗
// ║ wcet [T∞] bound ║
// ╚═════════════════╝
//
// Author: Ignacio Peña Sepúlveda
// Date: June 25, 2025

// std/time.tempo - Time operations without non-deterministic syscalls
// Provides deterministic time operations with bounded execution

module std::time

// Time representation - nanoseconds since epoch
struct Time {
    nanos: u64
}

// Duration representation
struct Duration {
    nanos: u64
}

// Date/time components
struct DateTime {
    year: u32
    month: u8
    day: u8
    hour: u8
    minute: u8
    second: u8
    nanos: u32
}

// Weekday enumeration
enum Weekday {
    Monday = 1
    Tuesday = 2
    Wednesday = 3
    Thursday = 4
    Friday = 5
    Saturday = 6
    Sunday = 7
}

// Constants
const NANOS_PER_MICRO: u64 = 1000
const NANOS_PER_MILLI: u64 = 1000000
const NANOS_PER_SECOND: u64 = 1000000000
const NANOS_PER_MINUTE: u64 = 60 * NANOS_PER_SECOND
const NANOS_PER_HOUR: u64 = 60 * NANOS_PER_MINUTE
const NANOS_PER_DAY: u64 = 24 * NANOS_PER_HOUR

const SECONDS_PER_MINUTE: u64 = 60
const SECONDS_PER_HOUR: u64 = 3600
const SECONDS_PER_DAY: u64 = 86400

const DAYS_PER_400_YEARS: u32 = 146097
const DAYS_PER_100_YEARS: u32 = 36524
const DAYS_PER_4_YEARS: u32 = 1461
const DAYS_PER_YEAR: u32 = 365

// Unix epoch: January 1, 1970
const UNIX_EPOCH_YEAR: u32 = 1970

// Time creation and conversion
fn now() -> Time {
    // Get current time from runtime (deterministic in Tempo)
    let nanos = @runtime_time_nanos()
    return Time { nanos: nanos }
}

fn from_nanos(nanos: u64) -> Time {
    return Time { nanos: nanos }
}

fn from_micros(micros: u64) -> Time {
    return Time { nanos: micros * NANOS_PER_MICRO }
}

fn from_millis(millis: u64) -> Time {
    return Time { nanos: millis * NANOS_PER_MILLI }
}

fn from_seconds(seconds: u64) -> Time {
    return Time { nanos: seconds * NANOS_PER_SECOND }
}

fn to_nanos(t: Time) -> u64 {
    return t.nanos
}

fn to_micros(t: Time) -> u64 {
    return t.nanos / NANOS_PER_MICRO
}

fn to_millis(t: Time) -> u64 {
    return t.nanos / NANOS_PER_MILLI
}

fn to_seconds(t: Time) -> u64 {
    return t.nanos / NANOS_PER_SECOND
}

// Duration creation and conversion
fn duration_from_nanos(nanos: u64) -> Duration {
    return Duration { nanos: nanos }
}

fn duration_from_micros(micros: u64) -> Duration {
    return Duration { nanos: micros * NANOS_PER_MICRO }
}

fn duration_from_millis(millis: u64) -> Duration {
    return Duration { nanos: millis * NANOS_PER_MILLI }
}

fn duration_from_seconds(seconds: u64) -> Duration {
    return Duration { nanos: seconds * NANOS_PER_SECOND }
}

fn duration_to_nanos(d: Duration) -> u64 {
    return d.nanos
}

fn duration_to_micros(d: Duration) -> u64 {
    return d.nanos / NANOS_PER_MICRO
}

fn duration_to_millis(d: Duration) -> u64 {
    return d.nanos / NANOS_PER_MILLI
}

fn duration_to_seconds(d: Duration) -> u64 {
    return d.nanos / NANOS_PER_SECOND
}

// Time arithmetic
fn add(t: Time, d: Duration) -> Time {
    return Time { nanos: t.nanos + d.nanos }
}

fn sub(t: Time, d: Duration) -> Time {
    return Time { nanos: t.nanos - d.nanos }
}

fn diff(t1: Time, t2: Time) -> Duration {
    if t1.nanos >= t2.nanos {
        return Duration { nanos: t1.nanos - t2.nanos }
    } else {
        return Duration { nanos: t2.nanos - t1.nanos }
    }
}

fn since(t: Time) -> Duration {
    let now = now()
    return diff(now, t)
}

fn until(t: Time) -> Duration {
    let now = now()
    return diff(t, now)
}

// Duration arithmetic
fn duration_add(d1: Duration, d2: Duration) -> Duration {
    return Duration { nanos: d1.nanos + d2.nanos }
}

fn duration_sub(d1: Duration, d2: Duration) -> Duration {
    if d1.nanos >= d2.nanos {
        return Duration { nanos: d1.nanos - d2.nanos }
    } else {
        return Duration { nanos: 0 }
    }
}

fn duration_mul(d: Duration, factor: u64) -> Duration {
    return Duration { nanos: d.nanos * factor }
}

fn duration_div(d: Duration, divisor: u64) -> Duration {
    return Duration { nanos: d.nanos / divisor }
}

// Comparisons
fn before(t1: Time, t2: Time) -> bool {
    return t1.nanos < t2.nanos
}

fn after(t1: Time, t2: Time) -> bool {
    return t1.nanos > t2.nanos
}

fn equal(t1: Time, t2: Time) -> bool {
    return t1.nanos == t2.nanos
}

fn duration_less(d1: Duration, d2: Duration) -> bool {
    return d1.nanos < d2.nanos
}

fn duration_greater(d1: Duration, d2: Duration) -> bool {
    return d1.nanos > d2.nanos
}

fn duration_equal(d1: Duration, d2: Duration) -> bool {
    return d1.nanos == d2.nanos
}

// Calendar operations
fn is_leap_year(year: u32) -> bool {
    return year % 4 == 0 && (year % 100 != 0 || year % 400 == 0)
}

fn days_in_month(year: u32, month: u8) -> u8 {
    match month {
        1 | 3 | 5 | 7 | 8 | 10 | 12 => 31
        4 | 6 | 9 | 11 => 30
        2 => if is_leap_year(year) { 29 } else { 28 }
        _ => 0
    }
}

fn days_since_epoch(year: u32, month: u8, day: u8) -> u64 {
    // Calculate days since Unix epoch (1970-01-01)
    let mut days: u64 = 0
    
    // Add days for complete years
    for y in UNIX_EPOCH_YEAR..year {
        if is_leap_year(y) {
            days += 366
        } else {
            days += 365
        }
    }
    
    // Add days for complete months in current year
    for m in 1..month {
        days += days_in_month(year, m) as u64
    }
    
    // Add days in current month
    days += (day - 1) as u64
    
    return days
}

fn to_datetime(t: Time) -> DateTime {
    let total_seconds = t.nanos / NANOS_PER_SECOND
    let nanos = (t.nanos % NANOS_PER_SECOND) as u32
    
    // Calculate time components
    let seconds_today = total_seconds % SECONDS_PER_DAY
    let hour = (seconds_today / SECONDS_PER_HOUR) as u8
    let minute = ((seconds_today % SECONDS_PER_HOUR) / SECONDS_PER_MINUTE) as u8
    let second = (seconds_today % SECONDS_PER_MINUTE) as u8
    
    // Calculate date components
    let days_since_epoch = total_seconds / SECONDS_PER_DAY
    let (year, month, day) = days_to_date(days_since_epoch as u32)
    
    return DateTime {
        year: year,
        month: month,
        day: day,
        hour: hour,
        minute: minute,
        second: second,
        nanos: nanos
    }
}

fn from_datetime(dt: DateTime) -> Time {
    let days = days_since_epoch(dt.year, dt.month, dt.day)
    let seconds = days * SECONDS_PER_DAY +
                  dt.hour as u64 * SECONDS_PER_HOUR +
                  dt.minute as u64 * SECONDS_PER_MINUTE +
                  dt.second as u64
    let nanos = seconds * NANOS_PER_SECOND + dt.nanos as u64
    
    return Time { nanos: nanos }
}

// Helper function to convert days since epoch to date
fn days_to_date(days: u32) -> (u32, u8, u8) {
    let mut days_left = days
    let mut year = UNIX_EPOCH_YEAR
    
    // Fast-forward through 400-year cycles
    let cycles_400 = days_left / DAYS_PER_400_YEARS
    year += cycles_400 * 400
    days_left %= DAYS_PER_400_YEARS
    
    // Handle remaining years
    while days_left >= 365 {
        if is_leap_year(year) {
            if days_left >= 366 {
                days_left -= 366
                year += 1
            } else {
                break
            }
        } else {
            days_left -= 365
            year += 1
        }
    }
    
    // Find month and day
    let mut month: u8 = 1
    while month <= 12 {
        let days_in_month = days_in_month(year, month) as u32
        if days_left < days_in_month {
            break
        }
        days_left -= days_in_month
        month += 1
    }
    
    let day = (days_left + 1) as u8
    
    return (year, month, day)
}

fn weekday(t: Time) -> Weekday {
    let days = to_seconds(t) / SECONDS_PER_DAY
    // Unix epoch (1970-01-01) was a Thursday
    let day_of_week = ((days + 3) % 7) as u8
    
    match day_of_week {
        0 => Weekday::Monday
        1 => Weekday::Tuesday
        2 => Weekday::Wednesday
        3 => Weekday::Thursday
        4 => Weekday::Friday
        5 => Weekday::Saturday
        6 => Weekday::Sunday
        _ => Weekday::Monday  // Should never happen
    }
}

// Formatting
fn format_rfc3339(t: Time) -> string {
    let dt = to_datetime(t)
    return fmt::sprintf("%04d-%02d-%02dT%02d:%02d:%02d.%09dZ",
        dt.year, dt.month, dt.day,
        dt.hour, dt.minute, dt.second, dt.nanos)
}

fn format_http(t: Time) -> string {
    let dt = to_datetime(t)
    let wd = weekday(t)
    
    let weekday_str = match wd {
        Weekday::Monday => "Mon"
        Weekday::Tuesday => "Tue"
        Weekday::Wednesday => "Wed"
        Weekday::Thursday => "Thu"
        Weekday::Friday => "Fri"
        Weekday::Saturday => "Sat"
        Weekday::Sunday => "Sun"
    }
    
    let month_str = match dt.month {
        1 => "Jan"
        2 => "Feb"
        3 => "Mar"
        4 => "Apr"
        5 => "May"
        6 => "Jun"
        7 => "Jul"
        8 => "Aug"
        9 => "Sep"
        10 => "Oct"
        11 => "Nov"
        12 => "Dec"
        _ => "Jan"
    }
    
    return fmt::sprintf("%s, %02d %s %04d %02d:%02d:%02d GMT",
        weekday_str, dt.day, month_str, dt.year,
        dt.hour, dt.minute, dt.second)
}

fn format_duration(d: Duration) -> string {
    let total_seconds = d.nanos / NANOS_PER_SECOND
    let nanos = d.nanos % NANOS_PER_SECOND
    
    if total_seconds == 0 {
        if nanos >= NANOS_PER_MILLI {
            return fmt::sprintf("%dms", nanos / NANOS_PER_MILLI)
        } else if nanos >= NANOS_PER_MICRO {
            return fmt::sprintf("%dµs", nanos / NANOS_PER_MICRO)
        } else {
            return fmt::sprintf("%dns", nanos)
        }
    }
    
    let hours = total_seconds / 3600
    let minutes = (total_seconds % 3600) / 60
    let seconds = total_seconds % 60
    
    if hours > 0 {
        return fmt::sprintf("%dh%dm%ds", hours, minutes, seconds)
    } else if minutes > 0 {
        return fmt::sprintf("%dm%ds", minutes, seconds)
    } else {
        return fmt::sprintf("%ds", seconds)
    }
}

// Sleep function (deterministic in Tempo)
fn sleep(d: Duration) {
    @runtime_sleep_nanos(d.nanos)
}

// Timer for measuring elapsed time
struct Timer {
    start: Time
}

fn timer_start() -> Timer {
    return Timer { start: now() }
}

fn timer_elapsed(t: &Timer) -> Duration {
    return since(t.start)
}

fn timer_reset(t: &mut Timer) {
    t.start = now()
}

// Timeout helper
struct Timeout {
    deadline: Time
}

fn timeout_new(d: Duration) -> Timeout {
    return Timeout { deadline: add(now(), d) }
}

fn timeout_expired(t: &Timeout) -> bool {
    return after(now(), t.deadline)
}

fn timeout_remaining(t: &Timeout) -> Duration {
    let now = now()
    if after(now, t.deadline) {
        return duration_from_nanos(0)
    }
    return diff(t.deadline, now)
}
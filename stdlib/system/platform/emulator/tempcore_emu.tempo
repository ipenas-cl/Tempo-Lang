// ╔═════╦═════╦═════╗
// ║ 🛡️  ║ ⚖️  ║ ⚡  ║
// ║  C  ║  E  ║  G  ║
// ╚═════╩═════╩═════╝
// ╔═════════════════╗
// ║ wcet [T∞] bound ║
// ╚═════════════════╝
//
// Author: Ignacio Peña Sepúlveda
// Date: June 25, 2025

// TempoCore Cycle-Accurate Emulator
// Provides bit-accurate emulation of the TempoCore processor

module tempcore_emulator {
    import tempcore_isa::*;
    import tempcore_pipeline::*;
    import tempcore_cache::*;
    import tempcore_extensions::*;
    
    // Emulator Configuration
    struct EmulatorConfig {
        enable_trace: bool,
        enable_stats: bool,
        max_cycles: u64,
        breakpoints: Vec<u64>,
        watch_addresses: Vec<u64>,
        log_file: Option<String>,
    }
    
    impl EmulatorConfig {
        fn default() -> Self {
            EmulatorConfig {
                enable_trace: false,
                enable_stats: true,
                max_cycles: 1_000_000_000,  // 1 billion cycles max
                breakpoints: Vec::new(),
                watch_addresses: Vec::new(),
                log_file: None,
            }
        }
    }
    
    // Emulator State
    struct Emulator {
        // Core components
        state: ProcessorState,
        pipeline: Pipeline,
        memory: Memory,
        ext_state: ExtensionState,
        
        // Emulation control
        config: EmulatorConfig,
        running: bool,
        cycle: u64,
        
        // Statistics
        stats: EmulatorStats,
        
        // Debug support
        trace_buffer: Vec<TraceEntry>,
        last_pc: u64,
    }
    
    // Trace Entry for debugging
    struct TraceEntry {
        cycle: u64,
        pc: u64,
        instruction: u32,
        registers_modified: Vec<(u8, u64)>,
        memory_accessed: Vec<(u64, u64, bool)>,  // addr, value, is_write
    }
    
    // Emulator Statistics
    struct EmulatorStats {
        total_cycles: u64,
        instructions_executed: u64,
        branches_taken: u64,
        memory_reads: u64,
        memory_writes: u64,
        scratchpad_accesses: u64,
        pipeline_stalls: u64,
        deadline_misses: u64,
        exceptions: u64,
        
        // Instruction mix
        instruction_counts: HashMap<InstructionClass, u64>,
        
        // Timing histogram
        basic_block_cycles: Vec<u64>,
    }
    
    impl EmulatorStats {
        fn new() -> Self {
            EmulatorStats {
                total_cycles: 0,
                instructions_executed: 0,
                branches_taken: 0,
                memory_reads: 0,
                memory_writes: 0,
                scratchpad_accesses: 0,
                pipeline_stalls: 0,
                deadline_misses: 0,
                exceptions: 0,
                instruction_counts: HashMap::new(),
                basic_block_cycles: Vec::new(),
            }
        }
    }
    
    impl Emulator {
        // Create new emulator instance
        pub fn new(config: EmulatorConfig) -> Self {
            Emulator {
                state: ProcessorState {
                    registers: [0; REGISTER_COUNT],
                    pc: 0x00010000,  // Default code start
                    sp: 0x00008000,  // Default stack in scratchpad
                    lr: 0,
                    sr: 0,
                    cycle_count: 0,
                    current_wcet: u32::MAX,
                    deadline: u64::MAX,
                    atomic_depth: 0,
                    exception: Exception::None,
                },
                pipeline: init_pipeline(),
                memory: Memory::new(),
                ext_state: ExtensionState::new(),
                config,
                running: false,
                cycle: 0,
                stats: EmulatorStats::new(),
                trace_buffer: Vec::new(),
                last_pc: 0,
            }
        }
        
        // Load program into memory
        pub fn load_program(&mut self, program: &[u8], address: u64) -> Result<(), String> {
            if address < 0x00010000 || address >= 0x01000000 {
                return Err("Program must be loaded in code region".to_string());
            }
            
            for (i, &byte) in program.iter().enumerate() {
                self.memory.write_data(address + i as u64, byte as u64);
            }
            
            self.state.pc = address;
            Ok(())
        }
        
        // Single-step execution
        pub fn step(&mut self) -> Result<(), Exception> {
            let trace_entry = if self.config.enable_trace {
                Some(TraceEntry {
                    cycle: self.cycle,
                    pc: self.state.pc,
                    instruction: 0,
                    registers_modified: Vec::new(),
                    memory_accessed: Vec::new(),
                })
            } else {
                None
            };
            
            // Save old state for tracing
            let old_registers = self.state.registers.clone();
            
            // Check breakpoints
            if self.config.breakpoints.contains(&self.state.pc) {
                self.running = false;
                return Ok(());
            }
            
            // Advance pipeline
            advance_pipeline(&mut self.pipeline, &mut self.state, &mut self.memory);
            
            // Update statistics
            self.stats.total_cycles += 1;
            self.cycle += 1;
            
            // Check for exceptions
            if self.state.exception != Exception::None {
                self.stats.exceptions += 1;
                return Err(self.state.exception);
            }
            
            // Check deadline
            if self.state.cycle_count > self.state.deadline {
                self.stats.deadline_misses += 1;
                self.state.exception = Exception::DeadlineMiss;
            }
            
            // Update trace if enabled
            if let Some(mut entry) = trace_entry {
                // Record register changes
                for i in 0..32 {
                    if old_registers[i] != self.state.registers[i] {
                        entry.registers_modified.push((i as u8, self.state.registers[i]));
                    }
                }
                
                self.trace_buffer.push(entry);
                
                // Limit trace buffer size
                if self.trace_buffer.len() > 10000 {
                    self.trace_buffer.remove(0);
                }
            }
            
            Ok(())
        }
        
        // Run until halt or breakpoint
        pub fn run(&mut self) -> Result<(), Exception> {
            self.running = true;
            
            while self.running && self.cycle < self.config.max_cycles {
                self.step()?;
                
                // Check for halt instruction
                if self.last_pc == self.state.pc {
                    // PC didn't change, likely halted
                    self.running = false;
                }
                
                self.last_pc = self.state.pc;
            }
            
            Ok(())
        }
        
        // Execute single instruction (for testing)
        pub fn execute_instruction(&mut self, inst: u32) -> Result<u64, Exception> {
            let decoded = decode(inst);
            let opcode = decoded.opcode as InstructionClass;
            
            // Read operands
            let rs1_val = self.state.registers[decoded.rs1 as usize];
            let rs2_val = self.state.registers[decoded.rs2 as usize];
            
            // Execute based on opcode
            let result = match opcode {
                // Arithmetic operations
                InstructionClass::ADD => rs1_val.wrapping_add(rs2_val),
                InstructionClass::SUB => rs1_val.wrapping_sub(rs2_val),
                InstructionClass::AND => rs1_val & rs2_val,
                InstructionClass::OR => rs1_val | rs2_val,
                InstructionClass::XOR => rs1_val ^ rs2_val,
                InstructionClass::SHL => rs1_val << (rs2_val & 0x3F),
                InstructionClass::SHR => rs1_val >> (rs2_val & 0x3F),
                InstructionClass::NOT => !rs1_val,
                
                // Immediate operations
                InstructionClass::ADDI => {
                    let imm = sign_extend(decoded.imm as u64, 14);
                    rs1_val.wrapping_add(imm)
                },
                InstructionClass::LDI => sign_extend(decoded.imm as u64, 14),
                
                // Memory operations
                InstructionClass::LD => {
                    let addr = rs1_val.wrapping_add(sign_extend(decoded.imm as u64, 14));
                    self.memory.read_data(addr)
                },
                InstructionClass::LDSP => {
                    let addr = rs1_val.wrapping_add(sign_extend(decoded.imm as u64, 14));
                    self.memory.read_scratchpad(addr)
                },
                
                // Tempo-specific
                InstructionClass::GET_CYCLE => self.state.cycle_count,
                InstructionClass::CHECK_TIME => {
                    if self.state.cycle_count < self.state.deadline { 1 } else { 0 }
                },
                
                _ => {
                    // Try extension instructions
                    execute_extension(
                        decoded.opcode,
                        rs1_val,
                        rs2_val,
                        decoded.rd,
                        &mut self.state,
                        &mut self.ext_state,
                        &mut self.memory
                    )?
                }
            };
            
            // Update statistics
            self.stats.instructions_executed += 1;
            *self.stats.instruction_counts.entry(opcode).or_insert(0) += 1;
            
            // Update cycle count
            let cycles = get_cycle_count(decoded.opcode);
            self.state.cycle_count += cycles as u64;
            
            Ok(result)
        }
        
        // Debug functions
        pub fn read_register(&self, reg: u8) -> u64 {
            if reg < 32 {
                self.state.registers[reg as usize]
            } else {
                0
            }
        }
        
        pub fn write_register(&mut self, reg: u8, value: u64) {
            if reg < 32 && reg != 0 {  // r0 is always zero
                self.state.registers[reg as usize] = value;
            }
        }
        
        pub fn read_memory(&mut self, addr: u64) -> u64 {
            self.memory.read_data(addr)
        }
        
        pub fn write_memory(&mut self, addr: u64, value: u64) {
            self.memory.write_data(addr, value);
        }
        
        pub fn get_pc(&self) -> u64 {
            self.state.pc
        }
        
        pub fn set_pc(&mut self, pc: u64) {
            self.state.pc = pc;
        }
        
        // Performance analysis
        pub fn get_stats(&self) -> &EmulatorStats {
            &self.stats
        }
        
        pub fn print_stats(&self) {
            println!("=== TempoCore Emulator Statistics ===");
            println!("Total Cycles: {}", self.stats.total_cycles);
            println!("Instructions Executed: {}", self.stats.instructions_executed);
            println!("IPC: {:.3}", 
                self.stats.instructions_executed as f64 / self.stats.total_cycles as f64);
            println!("Branches Taken: {}", self.stats.branches_taken);
            println!("Memory Reads: {}", self.stats.memory_reads);
            println!("Memory Writes: {}", self.stats.memory_writes);
            println!("Pipeline Stalls: {}", self.stats.pipeline_stalls);
            println!("Deadline Misses: {}", self.stats.deadline_misses);
            println!("Exceptions: {}", self.stats.exceptions);
            
            println!("\nInstruction Mix:");
            let mut sorted_counts: Vec<_> = self.stats.instruction_counts.iter().collect();
            sorted_counts.sort_by_key(|(_, count)| -(**count as i64));
            
            for (opcode, count) in sorted_counts.iter().take(10) {
                let percentage = 100.0 * **count as f64 / self.stats.instructions_executed as f64;
                println!("  {:?}: {} ({:.1}%)", opcode, count, percentage);
            }
        }
        
        // Trace analysis
        pub fn dump_trace(&self, last_n: usize) {
            let start = self.trace_buffer.len().saturating_sub(last_n);
            
            println!("=== Execution Trace ===");
            for entry in &self.trace_buffer[start..] {
                println!("Cycle {}: PC={:#010x} Inst={:#010x}", 
                    entry.cycle, entry.pc, entry.instruction);
                
                for (reg, value) in &entry.registers_modified {
                    println!("  R{} <- {:#018x}", reg, value);
                }
                
                for (addr, value, is_write) in &entry.memory_accessed {
                    if *is_write {
                        println!("  [{:#010x}] <- {:#018x}", addr, value);
                    } else {
                        println!("  [{:#010x}] -> {:#018x}", addr, value);
                    }
                }
            }
        }
        
        // WCET Analysis
        pub fn analyze_wcet(&self, start_pc: u64, end_pc: u64) -> u64 {
            // Simple WCET analysis based on instruction counts
            let mut wcet = 0u64;
            let mut pc = start_pc;
            let mut visited = HashSet::new();
            
            while pc < end_pc && !visited.contains(&pc) {
                visited.insert(pc);
                
                let inst = self.memory.read_instruction(pc);
                let decoded = decode(inst);
                let cycles = get_cycle_count(decoded.opcode);
                
                wcet += cycles as u64;
                
                // Assume worst case for branches (always taken)
                if is_branch(decoded.opcode as InstructionClass) {
                    wcet += 1;  // Branch penalty
                }
                
                pc += 4;
            }
            
            wcet
        }
    }
    
    // Helper function to sign-extend
    fn sign_extend(value: u64, bits: u32) -> u64 {
        let sign_bit = 1 << (bits - 1);
        if value & sign_bit != 0 {
            value | (u64::MAX << bits)
        } else {
            value
        }
    }
    
    fn is_branch(op: InstructionClass) -> bool {
        matches!(op, InstructionClass::BEQ | InstructionClass::BNE | 
                     InstructionClass::BLT | InstructionClass::BGE |
                     InstructionClass::JMP | InstructionClass::JMPI |
                     InstructionClass::CALL | InstructionClass::RET)
    }
    
    // Test harness
    #[cfg(test)]
    mod tests {
        use super::*;
        
        #[test]
        fn test_basic_arithmetic() {
            let mut emu = Emulator::new(EmulatorConfig::default());
            
            // ADD r3, r1, r2
            emu.write_register(1, 10);
            emu.write_register(2, 20);
            let inst = 0x01_03_08_10;  // ADD instruction
            let result = emu.execute_instruction(inst).unwrap();
            
            assert_eq!(result, 30);
            assert_eq!(emu.state.cycle_count, 1);
        }
        
        #[test]
        fn test_memory_access() {
            let mut emu = Emulator::new(EmulatorConfig::default());
            
            // Store value
            emu.write_memory(0x1000, 42);
            
            // Load value
            emu.write_register(1, 0x1000);
            let inst = 0x20_02_08_00;  // LD r2, 0(r1)
            let result = emu.execute_instruction(inst).unwrap();
            
            assert_eq!(result, 42);
            assert_eq!(emu.state.cycle_count, 2);  // Memory access is 2 cycles
        }
        
        #[test]
        fn test_deadline_checking() {
            let mut emu = Emulator::new(EmulatorConfig::default());
            
            // Set deadline
            emu.state.deadline = 100;
            emu.state.cycle_count = 50;
            
            // CHECK_TIME instruction
            let inst = 0x43_01_00_00;
            let result = emu.execute_instruction(inst).unwrap();
            
            assert_eq!(result, 1);  // Within deadline
            
            // Advance past deadline
            emu.state.cycle_count = 101;
            let result = emu.execute_instruction(inst).unwrap();
            
            assert_eq!(result, 0);  // Past deadline
        }
    }
}
// ╔═════╦═════╦═════╗
// ║ 🛡️  ║ ⚖️  ║ ⚡  ║
// ║  C  ║  E  ║  G  ║
// ╚═════╩═════╩═════╝
// ╔═════════════════╗
// ║ wcet [T∞] bound ║
// ╚═════════════════╝
//
// Author: Ignacio Peña Sepúlveda
// Date: June 25, 2025

// VESA Framebuffer Driver for AtomicOS
// Provides deterministic, bounded-time graphics operations
// No dynamic allocation - all buffers are statically allocated

#include <stdint.h>
#include <stdbool.h>

// VESA mode information structure
typedef struct {
    uint16_t width;
    uint16_t height;
    uint8_t bpp;        // Bits per pixel
    uint8_t bytes_per_pixel;
    uint32_t pitch;     // Bytes per scanline
    uint32_t framebuffer_addr;
    uint32_t framebuffer_size;
} vesa_mode_info_t;

// Static VESA driver state
static vesa_mode_info_t current_mode;
static uint8_t* framebuffer;
static bool initialized = false;

// Maximum supported resolution for static allocation
#define MAX_WIDTH 1920
#define MAX_HEIGHT 1080
#define MAX_BPP 32

// Static back buffer for double buffering
static uint32_t back_buffer[MAX_WIDTH * MAX_HEIGHT];

// Initialize VESA driver with given mode
// Returns true on success, false on failure
// Completes in O(1) time
bool vesa_init(uint16_t width, uint16_t height, uint8_t bpp) {
    // Validate parameters
    if (width > MAX_WIDTH || height > MAX_HEIGHT || bpp > MAX_BPP) {
        return false;
    }
    
    // Set up mode information
    current_mode.width = width;
    current_mode.height = height;
    current_mode.bpp = bpp;
    current_mode.bytes_per_pixel = bpp / 8;
    current_mode.pitch = width * current_mode.bytes_per_pixel;
    
    // In real implementation, this would set VESA mode via BIOS
    // For now, assume framebuffer at fixed address
    current_mode.framebuffer_addr = 0xE0000000;
    current_mode.framebuffer_size = width * height * current_mode.bytes_per_pixel;
    
    framebuffer = (uint8_t*)current_mode.framebuffer_addr;
    initialized = true;
    
    return true;
}

// Put pixel at (x, y) with given color
// Completes in O(1) time
void vesa_put_pixel(uint16_t x, uint16_t y, uint32_t color) {
    if (!initialized || x >= current_mode.width || y >= current_mode.height) {
        return;
    }
    
    uint32_t offset = y * current_mode.width + x;
    back_buffer[offset] = color;
}

// Fill rectangle with solid color
// Completes in O(width * height) time - bounded by max resolution
void vesa_fill_rect(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint32_t color) {
    if (!initialized) return;
    
    // Clip to screen bounds
    uint16_t x_end = (x + width > current_mode.width) ? current_mode.width : x + width;
    uint16_t y_end = (y + height > current_mode.height) ? current_mode.height : y + height;
    
    // Fill rectangle row by row
    for (uint16_t row = y; row < y_end; row++) {
        for (uint16_t col = x; col < x_end; col++) {
            back_buffer[row * current_mode.width + col] = color;
        }
    }
}

// Copy rectangular region from source to back buffer
// Completes in O(width * height) time
void vesa_blit(uint16_t dest_x, uint16_t dest_y, 
               const uint32_t* source, uint16_t src_width, uint16_t src_height,
               uint16_t src_x, uint16_t src_y, uint16_t width, uint16_t height) {
    if (!initialized) return;
    
    // Clip to screen bounds
    uint16_t copy_width = width;
    uint16_t copy_height = height;
    
    if (dest_x + copy_width > current_mode.width) {
        copy_width = current_mode.width - dest_x;
    }
    if (dest_y + copy_height > current_mode.height) {
        copy_height = current_mode.height - dest_y;
    }
    
    // Copy row by row
    for (uint16_t row = 0; row < copy_height; row++) {
        for (uint16_t col = 0; col < copy_width; col++) {
            uint32_t src_offset = (src_y + row) * src_width + (src_x + col);
            uint32_t dest_offset = (dest_y + row) * current_mode.width + (dest_x + col);
            back_buffer[dest_offset] = source[src_offset];
        }
    }
}

// Swap back buffer to front (vsync)
// Completes in O(width * height) time
void vesa_swap_buffers(void) {
    if (!initialized) return;
    
    // Copy back buffer to framebuffer
    uint32_t* fb32 = (uint32_t*)framebuffer;
    uint32_t pixels = current_mode.width * current_mode.height;
    
    for (uint32_t i = 0; i < pixels; i++) {
        fb32[i] = back_buffer[i];
    }
}

// Clear back buffer to color
// Completes in O(width * height) time
void vesa_clear(uint32_t color) {
    if (!initialized) return;
    
    uint32_t pixels = current_mode.width * current_mode.height;
    for (uint32_t i = 0; i < pixels; i++) {
        back_buffer[i] = color;
    }
}

// Get current mode information
vesa_mode_info_t vesa_get_mode(void) {
    return current_mode;
}

// Check if driver is initialized
bool vesa_is_initialized(void) {
    return initialized;
}
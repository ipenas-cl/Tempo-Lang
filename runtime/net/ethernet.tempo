// ╔═════╦═════╦═════╗
// ║ 🛡️  ║ ⚖️  ║ ⚡  ║
// ║  C  ║  E  ║  G  ║
// ╚═════╩═════╩═════╝
// ╔═════════════════╗
// ║ wcet [T∞] bound ║
// ╚═════════════════╝
//
// Author: Ignacio Peña Sepúlveda
// Date: June 25, 2025

// ethernet.tempo - Deterministic Ethernet frame handling for AtomicOS
// Provides bounded WCET Ethernet frame processing with static allocation

const ETH_ALEN: u32 = 6;
const ETH_HLEN: u32 = 14;
const ETH_DATA_LEN: u32 = 1500;
const ETH_FRAME_LEN: u32 = 1514;
const ETH_FCS_LEN: u32 = 4;

// Ethernet frame types
const ETH_P_IP: u16 = 0x0800;
const ETH_P_ARP: u16 = 0x0806;
const ETH_P_IPV6: u16 = 0x86DD;

// Static MAC address storage
type MacAddr = [u8; 6];

// Ethernet header structure
struct EthHeader {
    dest: MacAddr,
    src: MacAddr,
    proto: u16,
}

// Static frame buffer pool
const MAX_FRAMES: u32 = 64;
struct FrameBuffer {
    data: [u8; ETH_FRAME_LEN],
    len: u32,
    used: bool,
}

// Global frame pool with static allocation
static mut frame_pool: [FrameBuffer; MAX_FRAMES] = [{
    data: [0; ETH_FRAME_LEN],
    len: 0,
    used: false,
}; MAX_FRAMES];

// Frame allocation bitmap for O(1) allocation
static mut frame_bitmap: u64 = 0;

// Initialize Ethernet subsystem
fn eth_init() {
    // Reset frame pool
    for i in 0..MAX_FRAMES {
        unsafe {
            frame_pool[i].used = false;
            frame_pool[i].len = 0;
        }
    }
    unsafe { frame_bitmap = 0; }
}

// Allocate frame buffer - O(1) operation
fn alloc_frame() -> *mut FrameBuffer {
    unsafe {
        // Find first free bit using CLZ instruction
        let free_idx = frame_bitmap.leading_zeros();
        if free_idx >= MAX_FRAMES {
            return null;
        }
        
        // Mark as used
        frame_bitmap |= 1 << free_idx;
        frame_pool[free_idx].used = true;
        return &mut frame_pool[free_idx];
    }
}

// Free frame buffer - O(1) operation
fn free_frame(frame: *mut FrameBuffer) {
    unsafe {
        let idx = (frame - frame_pool.as_ptr()) / sizeof(FrameBuffer);
        if idx < MAX_FRAMES {
            frame_bitmap &= !(1 << idx);
            frame_pool[idx].used = false;
            frame_pool[idx].len = 0;
        }
    }
}

// Parse Ethernet header - bounded time
fn eth_parse_header(data: *const u8) -> EthHeader {
    let hdr: EthHeader;
    
    // Copy destination MAC
    for i in 0..6 {
        hdr.dest[i] = unsafe { *(data + i) };
    }
    
    // Copy source MAC
    for i in 0..6 {
        hdr.src[i] = unsafe { *(data + 6 + i) };
    }
    
    // Extract protocol (big-endian)
    hdr.proto = unsafe {
        (*(data + 12) as u16) << 8 | (*(data + 13) as u16)
    };
    
    return hdr;
}

// Build Ethernet header - bounded time
fn eth_build_header(dest: *const MacAddr, src: *const MacAddr, proto: u16, 
                    buf: *mut u8) {
    // Copy destination MAC
    for i in 0..6 {
        unsafe { *(buf + i) = (*dest)[i]; }
    }
    
    // Copy source MAC
    for i in 0..6 {
        unsafe { *(buf + 6 + i) = (*src)[i]; }
    }
    
    // Set protocol (big-endian)
    unsafe {
        *(buf + 12) = (proto >> 8) as u8;
        *(buf + 13) = proto as u8;
    }
}

// Process incoming Ethernet frame - bounded time
fn eth_rx_frame(data: *const u8, len: u32) -> i32 {
    // Validate frame length
    if len < ETH_HLEN || len > ETH_FRAME_LEN {
        return -1;
    }
    
    // Parse header
    let hdr = eth_parse_header(data);
    
    // Allocate frame buffer
    let frame = alloc_frame();
    if frame == null {
        return -1;
    }
    
    // Copy frame data - bounded by ETH_FRAME_LEN
    unsafe {
        for i in 0..len {
            (*frame).data[i] = *(data + i);
        }
        (*frame).len = len;
    }
    
    // Dispatch based on protocol
    let payload = unsafe { frame.data.as_ptr() + ETH_HLEN };
    let payload_len = len - ETH_HLEN;
    
    match hdr.proto {
        ETH_P_IP => ipv4_rx_packet(payload, payload_len, frame),
        ETH_P_ARP => arp_rx_packet(payload, payload_len, frame),
        _ => {
            free_frame(frame);
            return -1;
        }
    }
    
    return 0;
}

// Transmit Ethernet frame - bounded time
fn eth_tx_frame(dest: *const MacAddr, proto: u16, data: *const u8, 
                len: u32) -> i32 {
    // Validate length
    if len > ETH_DATA_LEN {
        return -1;
    }
    
    // Allocate frame
    let frame = alloc_frame();
    if frame == null {
        return -1;
    }
    
    // Get local MAC address
    let src_mac = netdev_get_mac();
    
    // Build header
    unsafe {
        eth_build_header(dest, src_mac, proto, (*frame).data.as_mut_ptr());
        
        // Copy payload - bounded by ETH_DATA_LEN
        for i in 0..len {
            (*frame).data[ETH_HLEN + i] = *(data + i);
        }
        
        (*frame).len = ETH_HLEN + len;
    }
    
    // Send to device driver
    let result = netdev_tx_frame(frame);
    
    // Free frame on error
    if result < 0 {
        free_frame(frame);
    }
    
    return result;
}

// Calculate Ethernet FCS - bounded time
fn eth_calc_fcs(data: *const u8, len: u32) -> u32 {
    let mut crc: u32 = 0xFFFFFFFF;
    
    // Process each byte - bounded by frame length
    for i in 0..len {
        let byte = unsafe { *(data + i) };
        crc ^= byte as u32;
        
        // Process 8 bits
        for j in 0..8 {
            if crc & 1 != 0 {
                crc = (crc >> 1) ^ 0xEDB88320;
            } else {
                crc = crc >> 1;
            }
        }
    }
    
    return !crc;
}

// Compare MAC addresses - bounded time
fn eth_mac_equal(a: *const MacAddr, b: *const MacAddr) -> bool {
    for i in 0..6 {
        unsafe {
            if (*a)[i] != (*b)[i] {
                return false;
            }
        }
    }
    return true;
}

// Check if MAC is broadcast - bounded time
fn eth_is_broadcast(mac: *const MacAddr) -> bool {
    for i in 0..6 {
        unsafe {
            if (*mac)[i] != 0xFF {
                return false;
            }
        }
    }
    return true;
}

// Check if MAC is multicast - O(1)
fn eth_is_multicast(mac: *const MacAddr) -> bool {
    unsafe { (*mac)[0] & 0x01 != 0 }
}

// Copy MAC address - bounded time
fn eth_copy_mac(dest: *mut MacAddr, src: *const MacAddr) {
    for i in 0..6 {
        unsafe { (*dest)[i] = (*src)[i]; }
    }
}

// Set broadcast MAC - bounded time
fn eth_set_broadcast(mac: *mut MacAddr) {
    for i in 0..6 {
        unsafe { (*mac)[i] = 0xFF; }
    }
}

// Convert MAC to string - bounded time
fn eth_mac_to_str(mac: *const MacAddr, buf: *mut u8, size: u32) {
    if size < 18 { return; }
    
    let hex = "0123456789abcdef";
    let mut pos = 0;
    
    for i in 0..6 {
        let byte = unsafe { (*mac)[i] };
        unsafe {
            *(buf + pos) = hex[(byte >> 4) as usize];
            *(buf + pos + 1) = hex[(byte & 0x0F) as usize];
            if i < 5 {
                *(buf + pos + 2) = ':';
                pos += 3;
            } else {
                *(buf + pos + 2) = '\0';
            }
        }
    }
}
// ╔═════╦═════╦═════╗
// ║ 🛡️  ║ ⚖️  ║ ⚡  ║
// ║  C  ║  E  ║  G  ║
// ╚═════╩═════╩═════╝
// ╔═════════════════╗
// ║ wcet [T∞] bound ║
// ╚═════════════════╝
//
// Author: Ignacio Peña Sepúlveda
// Date: June 25, 2025

// ipv4.tempo - Deterministic IPv4 protocol implementation for AtomicOS
// Provides bounded WCET IP packet processing with static allocation

const IP_VERSION: u8 = 4;
const IP_HLEN_MIN: u32 = 20;
const IP_HLEN_MAX: u32 = 60;
const IP_TTL_DEFAULT: u8 = 64;
const IP_MTU: u32 = 1500;

// IP protocols
const IPPROTO_ICMP: u8 = 1;
const IPPROTO_TCP: u8 = 6;
const IPPROTO_UDP: u8 = 17;

// IP flags
const IP_FLAG_DF: u16 = 0x4000;  // Don't fragment
const IP_FLAG_MF: u16 = 0x2000;  // More fragments

// IPv4 address type
type IpAddr = u32;

// IPv4 header structure
struct IpHeader {
    version_ihl: u8,
    tos: u8,
    tot_len: u16,
    id: u16,
    frag_off: u16,
    ttl: u8,
    protocol: u8,
    check: u16,
    saddr: IpAddr,
    daddr: IpAddr,
}

// Static routing table
const MAX_ROUTES: u32 = 32;
struct Route {
    dest: IpAddr,
    mask: IpAddr,
    gateway: IpAddr,
    metric: u16,
    valid: bool,
}

static mut routing_table: [Route; MAX_ROUTES] = [{
    dest: 0,
    mask: 0,
    gateway: 0,
    metric: 0,
    valid: false,
}; MAX_ROUTES];

// Static ARP cache
const MAX_ARP_ENTRIES: u32 = 64;
struct ArpEntry {
    ip: IpAddr,
    mac: MacAddr,
    valid: bool,
    age: u32,
}

static mut arp_cache: [ArpEntry; MAX_ARP_ENTRIES] = [{
    ip: 0,
    mac: [0; 6],
    valid: false,
    age: 0,
}; MAX_ARP_ENTRIES];

// Local IP configuration
static mut local_ip: IpAddr = 0;
static mut netmask: IpAddr = 0;
static mut gateway: IpAddr = 0;

// Packet ID counter
static mut ip_id_counter: u16 = 0;

// Initialize IPv4 subsystem
fn ipv4_init(ip: IpAddr, mask: IpAddr, gw: IpAddr) {
    unsafe {
        local_ip = ip;
        netmask = mask;
        gateway = gw;
        ip_id_counter = 0;
    }
    
    // Clear routing table
    for i in 0..MAX_ROUTES {
        unsafe { routing_table[i].valid = false; }
    }
    
    // Clear ARP cache
    for i in 0..MAX_ARP_ENTRIES {
        unsafe { arp_cache[i].valid = false; }
    }
    
    // Add default route
    ipv4_add_route(0, 0, gateway, 1);
}

// Calculate IP checksum - bounded time
fn ip_checksum(data: *const u8, len: u32) -> u16 {
    let mut sum: u32 = 0;
    let mut i = 0;
    
    // Sum 16-bit words
    while i < len - 1 {
        unsafe {
            sum += (*(data + i) as u32) << 8 | (*(data + i + 1) as u32);
        }
        i += 2;
    }
    
    // Add odd byte if present
    if i < len {
        unsafe { sum += (*(data + i) as u32) << 8; }
    }
    
    // Fold 32-bit sum to 16 bits
    while sum >> 16 != 0 {
        sum = (sum & 0xFFFF) + (sum >> 16);
    }
    
    return !(sum as u16);
}

// Parse IP header - bounded time
fn ip_parse_header(data: *const u8) -> IpHeader {
    let hdr: IpHeader;
    
    unsafe {
        hdr.version_ihl = *data;
        hdr.tos = *(data + 1);
        hdr.tot_len = (*(data + 2) as u16) << 8 | (*(data + 3) as u16);
        hdr.id = (*(data + 4) as u16) << 8 | (*(data + 5) as u16);
        hdr.frag_off = (*(data + 6) as u16) << 8 | (*(data + 7) as u16);
        hdr.ttl = *(data + 8);
        hdr.protocol = *(data + 9);
        hdr.check = (*(data + 10) as u16) << 8 | (*(data + 11) as u16);
        hdr.saddr = (*(data + 12) as u32) << 24 | (*(data + 13) as u32) << 16 |
                    (*(data + 14) as u32) << 8 | (*(data + 15) as u32);
        hdr.daddr = (*(data + 16) as u32) << 24 | (*(data + 17) as u32) << 16 |
                    (*(data + 18) as u32) << 8 | (*(data + 19) as u32);
    }
    
    return hdr;
}

// Build IP header - bounded time
fn ip_build_header(hdr: *const IpHeader, buf: *mut u8) {
    unsafe {
        *buf = (*hdr).version_ihl;
        *(buf + 1) = (*hdr).tos;
        *(buf + 2) = ((*hdr).tot_len >> 8) as u8;
        *(buf + 3) = (*hdr).tot_len as u8;
        *(buf + 4) = ((*hdr).id >> 8) as u8;
        *(buf + 5) = (*hdr).id as u8;
        *(buf + 6) = ((*hdr).frag_off >> 8) as u8;
        *(buf + 7) = (*hdr).frag_off as u8;
        *(buf + 8) = (*hdr).ttl;
        *(buf + 9) = (*hdr).protocol;
        *(buf + 10) = 0;  // Checksum placeholder
        *(buf + 11) = 0;
        *(buf + 12) = ((*hdr).saddr >> 24) as u8;
        *(buf + 13) = ((*hdr).saddr >> 16) as u8;
        *(buf + 14) = ((*hdr).saddr >> 8) as u8;
        *(buf + 15) = (*hdr).saddr as u8;
        *(buf + 16) = ((*hdr).daddr >> 24) as u8;
        *(buf + 17) = ((*hdr).daddr >> 16) as u8;
        *(buf + 18) = ((*hdr).daddr >> 8) as u8;
        *(buf + 19) = (*hdr).daddr as u8;
        
        // Calculate and set checksum
        let checksum = ip_checksum(buf, IP_HLEN_MIN);
        *(buf + 10) = (checksum >> 8) as u8;
        *(buf + 11) = checksum as u8;
    }
}

// Process incoming IP packet - bounded time
fn ipv4_rx_packet(data: *const u8, len: u32, frame: *mut FrameBuffer) -> i32 {
    // Validate minimum length
    if len < IP_HLEN_MIN {
        free_frame(frame);
        return -1;
    }
    
    // Parse header
    let hdr = ip_parse_header(data);
    
    // Validate version
    if (hdr.version_ihl >> 4) != IP_VERSION {
        free_frame(frame);
        return -1;
    }
    
    // Get header length
    let hlen = ((hdr.version_ihl & 0x0F) * 4) as u32;
    if hlen < IP_HLEN_MIN || hlen > IP_HLEN_MAX || hlen > len {
        free_frame(frame);
        return -1;
    }
    
    // Verify checksum
    let checksum = ip_checksum(data, hlen);
    if checksum != 0 {
        free_frame(frame);
        return -1;
    }
    
    // Check if packet is for us
    unsafe {
        if hdr.daddr != local_ip && hdr.daddr != 0xFFFFFFFF {
            // Not for us, would forward if routing enabled
            free_frame(frame);
            return -1;
        }
    }
    
    // Handle fragmentation
    if hdr.frag_off & (IP_FLAG_MF | 0x1FFF) != 0 {
        // Fragmentation not supported in this implementation
        free_frame(frame);
        return -1;
    }
    
    // Dispatch based on protocol
    let payload = unsafe { data + hlen };
    let payload_len = hdr.tot_len as u32 - hlen;
    
    match hdr.protocol {
        IPPROTO_TCP => tcp_rx_packet(payload, payload_len, hdr.saddr, hdr.daddr, frame),
        IPPROTO_UDP => udp_rx_packet(payload, payload_len, hdr.saddr, hdr.daddr, frame),
        IPPROTO_ICMP => icmp_rx_packet(payload, payload_len, hdr.saddr, frame),
        _ => {
            free_frame(frame);
            return -1;
        }
    }
    
    return 0;
}

// Transmit IP packet - bounded time
fn ipv4_tx_packet(dest: IpAddr, protocol: u8, data: *const u8, len: u32) -> i32 {
    // Validate length
    if len > IP_MTU - IP_HLEN_MIN {
        return -1;
    }
    
    // Allocate frame
    let frame = alloc_frame();
    if frame == null {
        return -1;
    }
    
    // Build IP header
    let hdr: IpHeader;
    unsafe {
        hdr.version_ihl = (IP_VERSION << 4) | 5;  // No options
        hdr.tos = 0;
        hdr.tot_len = (IP_HLEN_MIN + len) as u16;
        hdr.id = ip_id_counter;
        ip_id_counter += 1;
        hdr.frag_off = IP_FLAG_DF;  // Don't fragment
        hdr.ttl = IP_TTL_DEFAULT;
        hdr.protocol = protocol;
        hdr.check = 0;
        hdr.saddr = local_ip;
        hdr.daddr = dest;
    }
    
    // Build packet
    unsafe {
        let buf = (*frame).data.as_mut_ptr() + ETH_HLEN;
        ip_build_header(&hdr, buf);
        
        // Copy payload
        for i in 0..len {
            *(buf + IP_HLEN_MIN + i) = *(data + i);
        }
        
        (*frame).len = ETH_HLEN + IP_HLEN_MIN + len;
    }
    
    // Find destination MAC
    let dest_mac = ipv4_resolve_mac(dest);
    if dest_mac == null {
        free_frame(frame);
        return -1;
    }
    
    // Send Ethernet frame
    eth_tx_frame(dest_mac, ETH_P_IP, 
                 unsafe { (*frame).data.as_ptr() + ETH_HLEN },
                 IP_HLEN_MIN + len);
    
    free_frame(frame);
    return 0;
}

// Resolve IP to MAC address - bounded time
fn ipv4_resolve_mac(ip: IpAddr) -> *const MacAddr {
    // Check if on local network
    let dest_ip = unsafe {
        if (ip & netmask) == (local_ip & netmask) {
            ip
        } else {
            gateway
        }
    };
    
    // Search ARP cache
    for i in 0..MAX_ARP_ENTRIES {
        unsafe {
            if arp_cache[i].valid && arp_cache[i].ip == dest_ip {
                return &arp_cache[i].mac;
            }
        }
    }
    
    // Would send ARP request here
    return null;
}

// Add route - bounded time
fn ipv4_add_route(dest: IpAddr, mask: IpAddr, gw: IpAddr, metric: u16) -> i32 {
    // Find free slot
    for i in 0..MAX_ROUTES {
        unsafe {
            if !routing_table[i].valid {
                routing_table[i].dest = dest;
                routing_table[i].mask = mask;
                routing_table[i].gateway = gw;
                routing_table[i].metric = metric;
                routing_table[i].valid = true;
                return 0;
            }
        }
    }
    return -1;
}

// Lookup route - bounded time
fn ipv4_route_lookup(dest: IpAddr) -> *const Route {
    let mut best_route: *const Route = null;
    let mut best_mask: u32 = 0;
    
    for i in 0..MAX_ROUTES {
        unsafe {
            if routing_table[i].valid {
                if (dest & routing_table[i].mask) == routing_table[i].dest {
                    // Longest prefix match
                    let mask_bits = routing_table[i].mask.count_ones();
                    if mask_bits > best_mask {
                        best_mask = mask_bits;
                        best_route = &routing_table[i];
                    }
                }
            }
        }
    }
    
    return best_route;
}

// Add ARP entry - bounded time
fn ipv4_add_arp(ip: IpAddr, mac: *const MacAddr) -> i32 {
    // Update existing entry
    for i in 0..MAX_ARP_ENTRIES {
        unsafe {
            if arp_cache[i].valid && arp_cache[i].ip == ip {
                eth_copy_mac(&mut arp_cache[i].mac, mac);
                arp_cache[i].age = 0;
                return 0;
            }
        }
    }
    
    // Find free slot
    for i in 0..MAX_ARP_ENTRIES {
        unsafe {
            if !arp_cache[i].valid {
                arp_cache[i].ip = ip;
                eth_copy_mac(&mut arp_cache[i].mac, mac);
                arp_cache[i].valid = true;
                arp_cache[i].age = 0;
                return 0;
            }
        }
    }
    
    // Replace oldest entry
    let mut oldest_idx = 0;
    let mut oldest_age = 0;
    for i in 0..MAX_ARP_ENTRIES {
        unsafe {
            if arp_cache[i].age > oldest_age {
                oldest_age = arp_cache[i].age;
                oldest_idx = i;
            }
        }
    }
    
    unsafe {
        arp_cache[oldest_idx].ip = ip;
        eth_copy_mac(&mut arp_cache[oldest_idx].mac, mac);
        arp_cache[oldest_idx].age = 0;
    }
    
    return 0;
}

// Convert IP to string - bounded time
fn ip_to_str(ip: IpAddr, buf: *mut u8, size: u32) {
    if size < 16 { return; }
    
    let a = (ip >> 24) & 0xFF;
    let b = (ip >> 16) & 0xFF;
    let c = (ip >> 8) & 0xFF;
    let d = ip & 0xFF;
    
    // Simple integer to string conversion
    let mut pos = 0;
    pos += u8_to_str(a as u8, unsafe { buf + pos }, size - pos);
    unsafe { *(buf + pos) = '.'; }
    pos += 1;
    pos += u8_to_str(b as u8, unsafe { buf + pos }, size - pos);
    unsafe { *(buf + pos) = '.'; }
    pos += 1;
    pos += u8_to_str(c as u8, unsafe { buf + pos }, size - pos);
    unsafe { *(buf + pos) = '.'; }
    pos += 1;
    pos += u8_to_str(d as u8, unsafe { buf + pos }, size - pos);
    unsafe { *(buf + pos) = '\0'; }
}

// Helper: u8 to string - bounded time
fn u8_to_str(val: u8, buf: *mut u8, size: u32) -> u32 {
    if size < 4 { return 0; }
    
    let mut v = val;
    let mut digits = 0;
    let mut temp = [0u8; 3];
    
    // Extract digits
    loop {
        temp[digits] = (v % 10) + '0' as u8;
        digits += 1;
        v /= 10;
        if v == 0 { break; }
    }
    
    // Reverse copy
    for i in 0..digits {
        unsafe { *(buf + i) = temp[digits - 1 - i]; }
    }
    
    return digits;
}
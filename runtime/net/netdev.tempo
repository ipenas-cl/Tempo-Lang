// ╔═════╦═════╦═════╗
// ║ 🛡️  ║ ⚖️  ║ ⚡  ║
// ║  C  ║  E  ║  G  ║
// ╚═════╩═════╩═════╝
// ╔═════════════════╗
// ║ wcet [T∞] bound ║
// ╚═════════════════╝
//
// Author: Ignacio Peña Sepúlveda
// Date: June 25, 2025

// netdev.tempo - Network device driver interface for AtomicOS
// Provides bounded WCET network device abstraction with static allocation

const NETDEV_NAME_LEN: u32 = 16;
const MAX_NETDEVS: u32 = 4;

// Network device flags
const NETDEV_UP: u32 = 0x0001;
const NETDEV_BROADCAST: u32 = 0x0002;
const NETDEV_MULTICAST: u32 = 0x0004;
const NETDEV_PROMISC: u32 = 0x0008;
const NETDEV_RUNNING: u32 = 0x0010;

// Network device statistics
struct NetdevStats {
    rx_packets: u64,
    tx_packets: u64,
    rx_bytes: u64,
    tx_bytes: u64,
    rx_errors: u64,
    tx_errors: u64,
    rx_dropped: u64,
    tx_dropped: u64,
}

// Network device operations
struct NetdevOps {
    init: fn(*mut Netdev) -> i32,
    open: fn(*mut Netdev) -> i32,
    close: fn(*mut Netdev) -> i32,
    transmit: fn(*mut Netdev, *mut FrameBuffer) -> i32,
    set_mac: fn(*mut Netdev, *const MacAddr) -> i32,
    get_link_status: fn(*mut Netdev) -> bool,
    set_multicast: fn(*mut Netdev, bool) -> i32,
    set_promisc: fn(*mut Netdev, bool) -> i32,
}

// Network device structure
struct Netdev {
    name: [u8; NETDEV_NAME_LEN],
    index: u32,
    flags: u32,
    mtu: u32,
    mac_addr: MacAddr,
    ip_addr: IpAddr,
    netmask: IpAddr,
    gateway: IpAddr,
    stats: NetdevStats,
    ops: *const NetdevOps,
    priv_data: *mut void,  // Driver private data
    
    // Transmit queue
    tx_queue: [*mut FrameBuffer; 32],
    tx_head: u32,
    tx_tail: u32,
    tx_count: u32,
    
    valid: bool,
}

// Global network device table
static mut netdevs: [Netdev; MAX_NETDEVS] = [{
    name: [0; NETDEV_NAME_LEN],
    index: 0,
    flags: 0,
    mtu: 1500,
    mac_addr: [0; 6],
    ip_addr: 0,
    netmask: 0,
    gateway: 0,
    stats: {
        rx_packets: 0,
        tx_packets: 0,
        rx_bytes: 0,
        tx_bytes: 0,
        rx_errors: 0,
        tx_errors: 0,
        rx_dropped: 0,
        tx_dropped: 0,
    },
    ops: null,
    priv_data: null,
    tx_queue: [null; 32],
    tx_head: 0,
    tx_tail: 0,
    tx_count: 0,
    valid: false,
}; MAX_NETDEVS];

// Default network device
static mut default_netdev: *mut Netdev = null;

// Initialize network device subsystem
fn netdev_init() {
    for i in 0..MAX_NETDEVS {
        unsafe {
            netdevs[i].valid = false;
            netdevs[i].tx_count = 0;
            netdevs[i].tx_head = 0;
            netdevs[i].tx_tail = 0;
        }
    }
}

// Allocate network device - bounded time
fn netdev_alloc(name: *const u8, ops: *const NetdevOps) -> *mut Netdev {
    for i in 0..MAX_NETDEVS {
        unsafe {
            if !netdevs[i].valid {
                let dev = &mut netdevs[i];
                
                // Clear device structure
                dev.index = i;
                dev.flags = 0;
                dev.mtu = 1500;
                dev.ops = ops;
                dev.tx_count = 0;
                dev.tx_head = 0;
                dev.tx_tail = 0;
                
                // Copy name
                let mut j = 0;
                while j < NETDEV_NAME_LEN - 1 && *(name + j) != 0 {
                    dev.name[j] = *(name + j);
                    j += 1;
                }
                dev.name[j] = 0;
                
                // Clear statistics
                dev.stats.rx_packets = 0;
                dev.stats.tx_packets = 0;
                dev.stats.rx_bytes = 0;
                dev.stats.tx_bytes = 0;
                dev.stats.rx_errors = 0;
                dev.stats.tx_errors = 0;
                dev.stats.rx_dropped = 0;
                dev.stats.tx_dropped = 0;
                
                dev.valid = true;
                return dev;
            }
        }
    }
    return null;
}

// Register network device - bounded time
fn netdev_register(dev: *mut Netdev) -> i32 {
    unsafe {
        if dev == null || !(*dev).valid {
            return -1;
        }
        
        // Initialize device
        if (*dev).ops != null && (*(*dev).ops).init != null {
            let result = ((*(*dev).ops).init)(dev);
            if result < 0 {
                return result;
            }
        }
        
        // Set as default if first device
        if default_netdev == null {
            default_netdev = dev;
        }
        
        (*dev).flags |= NETDEV_UP;
    }
    
    return 0;
}

// Unregister network device - bounded time
fn netdev_unregister(dev: *mut Netdev) -> i32 {
    unsafe {
        if dev == null || !(*dev).valid {
            return -1;
        }
        
        // Close device
        if (*dev).ops != null && (*(*dev).ops).close != null {
            ((*(*dev).ops).close)(dev);
        }
        
        (*dev).flags &= !NETDEV_UP;
        (*dev).valid = false;
        
        // Update default device
        if default_netdev == dev {
            default_netdev = null;
            // Find another device
            for i in 0..MAX_NETDEVS {
                if netdevs[i].valid && netdevs[i].flags & NETDEV_UP != 0 {
                    default_netdev = &mut netdevs[i];
                    break;
                }
            }
        }
    }
    
    return 0;
}

// Open network device - bounded time
fn netdev_open(dev: *mut Netdev) -> i32 {
    unsafe {
        if dev == null || !(*dev).valid {
            return -1;
        }
        
        if (*dev).flags & NETDEV_UP == 0 {
            return -1;
        }
        
        if (*dev).ops != null && (*(*dev).ops).open != null {
            let result = ((*(*dev).ops).open)(dev);
            if result < 0 {
                return result;
            }
        }
        
        (*dev).flags |= NETDEV_RUNNING;
    }
    
    return 0;
}

// Close network device - bounded time
fn netdev_close(dev: *mut Netdev) -> i32 {
    unsafe {
        if dev == null || !(*dev).valid {
            return -1;
        }
        
        (*dev).flags &= !NETDEV_RUNNING;
        
        if (*dev).ops != null && (*(*dev).ops).close != null {
            return ((*(*dev).ops).close)(dev);
        }
    }
    
    return 0;
}

// Transmit frame - bounded time
fn netdev_transmit(dev: *mut Netdev, frame: *mut FrameBuffer) -> i32 {
    unsafe {
        if dev == null || !(*dev).valid || frame == null {
            return -1;
        }
        
        if (*dev).flags & NETDEV_RUNNING == 0 {
            return -1;
        }
        
        // Check queue space
        if (*dev).tx_count >= 32 {
            (*dev).stats.tx_dropped += 1;
            return -1;
        }
        
        // Add to queue
        (*dev).tx_queue[(*dev).tx_tail] = frame;
        (*dev).tx_tail = ((*dev).tx_tail + 1) % 32;
        (*dev).tx_count += 1;
        
        // Try to transmit immediately
        netdev_tx_poll(dev);
    }
    
    return 0;
}

// Poll transmit queue - bounded time
fn netdev_tx_poll(dev: *mut Netdev) {
    unsafe {
        while (*dev).tx_count > 0 {
            let frame = (*dev).tx_queue[(*dev).tx_head];
            
            if (*dev).ops != null && (*(*dev).ops).transmit != null {
                let result = ((*(*dev).ops).transmit)(dev, frame);
                
                if result < 0 {
                    // Device busy, try later
                    break;
                }
                
                // Success
                (*dev).stats.tx_packets += 1;
                (*dev).stats.tx_bytes += (*frame).len as u64;
                
                // Remove from queue
                (*dev).tx_head = ((*dev).tx_head + 1) % 32;
                (*dev).tx_count -= 1;
                
                // Free frame
                free_frame(frame);
            } else {
                // No transmit function, drop frame
                (*dev).stats.tx_dropped += 1;
                (*dev).tx_head = ((*dev).tx_head + 1) % 32;
                (*dev).tx_count -= 1;
                free_frame(frame);
            }
        }
    }
}

// Receive frame (called by driver) - bounded time
fn netdev_rx(dev: *mut Netdev, data: *const u8, len: u32) {
    unsafe {
        if dev == null || !(*dev).valid {
            return;
        }
        
        (*dev).stats.rx_packets += 1;
        (*dev).stats.rx_bytes += len as u64;
        
        // Process frame
        let result = eth_rx_frame(data, len);
        if result < 0 {
            (*dev).stats.rx_errors += 1;
        }
    }
}

// Set IP configuration - bounded time
fn netdev_set_ip(dev: *mut Netdev, addr: IpAddr, mask: IpAddr, gw: IpAddr) -> i32 {
    unsafe {
        if dev == null || !(*dev).valid {
            return -1;
        }
        
        (*dev).ip_addr = addr;
        (*dev).netmask = mask;
        (*dev).gateway = gw;
        
        // Update global IP configuration if default device
        if dev == default_netdev {
            ipv4_init(addr, mask, gw);
        }
    }
    
    return 0;
}

// Get network device by name - bounded time
fn netdev_get_by_name(name: *const u8) -> *mut Netdev {
    for i in 0..MAX_NETDEVS {
        unsafe {
            if netdevs[i].valid {
                // Compare names
                let mut match = true;
                let mut j = 0;
                while j < NETDEV_NAME_LEN {
                    if netdevs[i].name[j] != *(name + j) {
                        match = false;
                        break;
                    }
                    if netdevs[i].name[j] == 0 {
                        break;
                    }
                    j += 1;
                }
                
                if match {
                    return &mut netdevs[i];
                }
            }
        }
    }
    return null;
}

// Get network device by index - O(1)
fn netdev_get_by_index(index: u32) -> *mut Netdev {
    if index >= MAX_NETDEVS {
        return null;
    }
    
    unsafe {
        if netdevs[index].valid {
            return &mut netdevs[index];
        }
    }
    
    return null;
}

// Get default network device - O(1)
fn netdev_get_default() -> *mut Netdev {
    unsafe { default_netdev }
}

// Helper functions for global access

// Get MAC address of default device - O(1)
fn netdev_get_mac() -> *const MacAddr {
    unsafe {
        if default_netdev != null {
            return &(*default_netdev).mac_addr;
        }
    }
    return null;
}

// Transmit frame via default device - bounded time
fn netdev_tx_frame(frame: *mut FrameBuffer) -> i32 {
    unsafe {
        if default_netdev != null {
            return netdev_transmit(default_netdev, frame);
        }
    }
    return -1;
}

// Check link status - bounded time
fn netdev_get_link_status(dev: *mut Netdev) -> bool {
    unsafe {
        if dev == null || !(*dev).valid {
            return false;
        }
        
        if (*dev).ops != null && (*(*dev).ops).get_link_status != null {
            return ((*(*dev).ops).get_link_status)(dev);
        }
    }
    
    return true;  // Assume up if no status function
}

// Set multicast mode - bounded time
fn netdev_set_multicast(dev: *mut Netdev, enable: bool) -> i32 {
    unsafe {
        if dev == null || !(*dev).valid {
            return -1;
        }
        
        if enable {
            (*dev).flags |= NETDEV_MULTICAST;
        } else {
            (*dev).flags &= !NETDEV_MULTICAST;
        }
        
        if (*dev).ops != null && (*(*dev).ops).set_multicast != null {
            return ((*(*dev).ops).set_multicast)(dev, enable);
        }
    }
    
    return 0;
}

// Set promiscuous mode - bounded time  
fn netdev_set_promisc(dev: *mut Netdev, enable: bool) -> i32 {
    unsafe {
        if dev == null || !(*dev).valid {
            return -1;
        }
        
        if enable {
            (*dev).flags |= NETDEV_PROMISC;
        } else {
            (*dev).flags &= !NETDEV_PROMISC;
        }
        
        if (*dev).ops != null && (*(*dev).ops).set_promisc != null {
            return ((*(*dev).ops).set_promisc)(dev, enable);
        }
    }
    
    return 0;
}

// Network device iteration helpers - bounded time
fn netdev_for_each(callback: fn(*mut Netdev)) {
    for i in 0..MAX_NETDEVS {
        unsafe {
            if netdevs[i].valid {
                callback(&mut netdevs[i]);
            }
        }
    }
}

// Get network statistics - O(1)
fn netdev_get_stats(dev: *mut Netdev) -> *const NetdevStats {
    unsafe {
        if dev == null || !(*dev).valid {
            return null;
        }
        return &(*dev).stats;
    }
}
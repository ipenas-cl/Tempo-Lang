// ╔═════╦═════╦═════╗
// ║ 🛡️  ║ ⚖️  ║ ⚡  ║
// ║  C  ║  E  ║  G  ║
// ╚═════╩═════╩═════╝
// ╔═════════════════╗
// ║ wcet [T∞] bound ║
// ╚═════════════════╝
//
// Author: Ignacio Peña Sepúlveda
// Date: June 25, 2025

// AtomicOS Interrupt Handling
// Sets up IDT and handles CPU interrupts/exceptions

import "vga.tempo"

// Interrupt Descriptor Table entry
struct IDTEntry {
    offset_low: u16
    selector: u16
    zero: u8
    type_attr: u8
    offset_high: u16
}

// IDT pointer structure
struct IDTPointer {
    limit: u16
    base: u32
}

// IDT with 256 entries
var idt: [256]IDTEntry
var idt_ptr: IDTPointer

// Initialize the Interrupt Descriptor Table
func interrupts_init() {
    // Set up IDT pointer
    idt_ptr.limit = sizeof(idt) - 1
    idt_ptr.base = &idt as u32
    
    // Set up exception handlers (0-31)
    set_idt_entry(0, exception_0, 0x08, 0x8E)   // Division by zero
    set_idt_entry(1, exception_1, 0x08, 0x8E)   // Debug
    set_idt_entry(2, exception_2, 0x08, 0x8E)   // NMI
    set_idt_entry(3, exception_3, 0x08, 0x8E)   // Breakpoint
    set_idt_entry(4, exception_4, 0x08, 0x8E)   // Overflow
    set_idt_entry(5, exception_5, 0x08, 0x8E)   // Bound range exceeded
    set_idt_entry(6, exception_6, 0x08, 0x8E)   // Invalid opcode
    set_idt_entry(7, exception_7, 0x08, 0x8E)   // Device not available
    set_idt_entry(8, exception_8, 0x08, 0x8E)   // Double fault
    set_idt_entry(13, exception_13, 0x08, 0x8E) // General protection fault
    set_idt_entry(14, exception_14, 0x08, 0x8E) // Page fault
    
    // Set up hardware interrupt handlers (32-47)
    set_idt_entry(32, irq_0, 0x08, 0x8E)  // Timer
    set_idt_entry(33, irq_1, 0x08, 0x8E)  // Keyboard
    
    // Load IDT
    load_idt(&idt_ptr)
    
    // Initialize PIC (Programmable Interrupt Controller)
    init_pic()
}

// Set an IDT entry
func set_idt_entry(index: u8, handler: func(), selector: u16, type_attr: u8) {
    let handler_addr = handler as u32
    idt[index].offset_low = handler_addr & 0xFFFF
    idt[index].selector = selector
    idt[index].zero = 0
    idt[index].type_attr = type_attr
    idt[index].offset_high = (handler_addr >> 16) & 0xFFFF
}

// Initialize the 8259 PIC
func init_pic() {
    // ICW1
    outb(0x20, 0x11)  // Initialize PIC1
    outb(0xA0, 0x11)  // Initialize PIC2
    
    // ICW2 - Remap IRQs to 32-47
    outb(0x21, 0x20)  // PIC1 starts at 32
    outb(0xA1, 0x28)  // PIC2 starts at 40
    
    // ICW3
    outb(0x21, 0x04)  // PIC1 has slave on IRQ2
    outb(0xA1, 0x02)  // PIC2 is slave on master's IRQ2
    
    // ICW4
    outb(0x21, 0x01)  // 8086 mode
    outb(0xA1, 0x01)
    
    // Mask all interrupts except timer and keyboard
    outb(0x21, 0xFC)  // Enable IRQ0 (timer) and IRQ1 (keyboard)
    outb(0xA1, 0xFF)  // Mask all on PIC2
}

// Common interrupt handler
func interrupt_handler(int_num: u32, err_code: u32) {
    if int_num < 32 {
        // CPU exception
        vga_print("\n[EXCEPTION] CPU Exception ")
        vga_print_hex(int_num)
        if err_code != 0 {
            vga_print(" Error Code: ")
            vga_print_hex(err_code)
        }
        vga_print("\n")
        
        // Halt on critical exceptions
        if int_num == 8 || int_num == 13 || int_num == 14 {
            vga_print("System halted.\n")
            while true { halt() }
        }
    } else if int_num >= 32 && int_num < 48 {
        // Hardware interrupt
        if int_num == 32 {
            // Timer interrupt - used by scheduler
            scheduler_tick()
        } else if int_num == 33 {
            // Keyboard interrupt
            let scancode = inb(0x60)
            // Process keyboard input here
        }
        
        // Send EOI to PIC
        if int_num >= 40 {
            outb(0xA0, 0x20)  // EOI to slave PIC
        }
        outb(0x20, 0x20)  // EOI to master PIC
    }
}

// Exception handlers (assembly stubs will call interrupt_handler)
extern func exception_0()
extern func exception_1()
extern func exception_2()
extern func exception_3()
extern func exception_4()
extern func exception_5()
extern func exception_6()
extern func exception_7()
extern func exception_8()
extern func exception_13()
extern func exception_14()

// IRQ handlers
extern func irq_0()
extern func irq_1()

// Assembly functions
extern func load_idt(ptr: *IDTPointer)
extern func outb(port: u16, value: u8)
extern func inb(port: u16) -> u8
extern func halt()